{
  "version": 3,
  "sources": ["../../earcut/src/earcut.js", "../../@deck.gl/layers/src/arc-layer/arc-layer-uniforms.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/lib/common.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/vec2.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/common.js", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/vec3.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/mat3.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/classes/matrix3.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/mat4.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/vec4.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/classes/matrix4.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/gl-matrix/quat.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/classes/euler.ts", "../../@deck.gl/layers/node_modules/@math.gl/core/src/lib/math-utils.ts", "../../@deck.gl/layers/node_modules/@math.gl/web-mercator/src/assert.ts", "../../@deck.gl/layers/node_modules/@math.gl/web-mercator/src/web-mercator-utils.ts", "../../@deck.gl/layers/node_modules/@math.gl/web-mercator/src/get-bounds.ts", "../../@deck.gl/layers/src/bitmap-layer/create-mesh.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer-uniforms.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer-vertex.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer-fragment.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer-uniforms.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/icon-layer/icon-manager.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer.ts", "../../@deck.gl/layers/src/line-layer/line-layer-uniforms.ts", "../../@deck.gl/layers/src/line-layer/line-layer.wgsl.ts", "../../@deck.gl/layers/src/line-layer/line-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/line-layer/line-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/line-layer/line-layer.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/lib/shader-assembly/shader-injections.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/lib/shader-transpiler/transpile-glsl-shader.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/lib/shader-assembly/assemble-shaders.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/lib/glsl-utils/shader-utils.ts", "../../wgsl_reflect/src/reflect/info.ts", "../../wgsl_reflect/src/utils/float.ts", "../../wgsl_reflect/src/utils/texture_sample.ts", "../../wgsl_reflect/src/utils/texture_format_info.ts", "../../wgsl_reflect/src/wgsl_ast.ts", "../../wgsl_reflect/src/wgsl_scanner.ts", "../../wgsl_reflect/src/utils/cast.ts", "../../wgsl_reflect/src/reflect/reflect.ts", "../../wgsl_reflect/src/exec/exec_context.ts", "../../wgsl_reflect/src/exec/exec_interface.ts", "../../wgsl_reflect/src/exec/builtin_functions.ts", "../../wgsl_reflect/src/utils/matrix.ts", "../../wgsl_reflect/src/wgsl_exec.ts", "../../wgsl_reflect/src/ast/parse_context.ts", "../../wgsl_reflect/src/wgsl_parser.ts", "../../wgsl_reflect/src/wgsl_reflect.ts", "../../wgsl_reflect/src/exec/command.ts", "../../wgsl_reflect/src/exec/stack_frame.ts", "../../wgsl_reflect/src/exec/exec_stack.ts", "../../wgsl_reflect/src/wgsl_debug.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/math/fp16/fp16-utils.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/lights/lighting-uniforms-glsl.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/lights/lighting-uniforms-wgsl.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/lights/lighting.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/phong-material/phong-shaders-glsl.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/phong-material/phong-shaders-wgsl.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/gouraud-material/gouraud-material.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules/lighting/phong-material/phong-material.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules-webgl1/project/project.ts", "../../@deck.gl/layers/node_modules/@luma.gl/shadertools/src/modules-webgl1/lighting/dirlight/dirlight.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer-uniforms.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-uniforms.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.wgsl.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.ts", "../../@deck.gl/layers/node_modules/@math.gl/polygon/src/polygon-utils.ts", "../../@deck.gl/layers/node_modules/@math.gl/polygon/src/utils.ts", "../../@deck.gl/layers/node_modules/@math.gl/polygon/src/lineclip.ts", "../../@deck.gl/layers/node_modules/@math.gl/polygon/src/cut-by-grid.ts", "../../@deck.gl/layers/node_modules/@math.gl/polygon/src/cut-by-mercator-bounds.ts", "../../@deck.gl/layers/src/column-layer/column-geometry.ts", "../../@deck.gl/layers/src/column-layer/column-layer-uniforms.ts", "../../@deck.gl/layers/src/column-layer/column-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/column-layer/column-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/column-layer/column-layer.ts", "../../@deck.gl/layers/src/column-layer/grid-cell-layer.ts", "../../@deck.gl/layers/src/path-layer/path.ts", "../../@deck.gl/layers/src/path-layer/path-tesselator.ts", "../../@deck.gl/layers/src/path-layer/path-layer-uniforms.ts", "../../@deck.gl/layers/src/path-layer/path-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/path-layer/path-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/path-layer/path-layer.ts", "../../@deck.gl/layers/src/solid-polygon-layer/polygon.ts", "../../@deck.gl/layers/src/solid-polygon-layer/polygon-tesselator.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-uniforms.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer.ts", "../../@deck.gl/layers/src/utils.ts", "../../@deck.gl/layers/src/polygon-layer/polygon-layer.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-binary.ts", "../../@deck.gl/layers/src/text-layer/multi-icon-layer/sdf-uniforms.ts", "../../@deck.gl/layers/src/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/text-layer/multi-icon-layer/multi-icon-layer.ts", "../../@mapbox/tiny-sdf/index.js", "../../@deck.gl/layers/src/text-layer/utils.ts", "../../@deck.gl/layers/src/text-layer/lru-cache.ts", "../../@deck.gl/layers/src/text-layer/font-atlas-manager.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer-uniforms.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer.ts", "../../@deck.gl/layers/src/text-layer/text-layer.ts", "../../@deck.gl/layers/src/geojson-layer/sub-layer-map.ts", "../../@deck.gl/layers/src/geojson-layer/geojson.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-layer-props.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-layer.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform arcUniforms {\n  bool greatCircle;\n  bool useShortestPath;\n  float numSegments;\n  float widthScale;\n  float widthMinPixels;\n  float widthMaxPixels;\n  highp int widthUnits;\n} arc;\n`;\n\nexport type ArcProps = {\n  greatCircle: boolean;\n  useShortestPath: boolean;\n  numSegments: number;\n  widthScale: number;\n  widthMinPixels: number;\n  widthMaxPixels: number;\n  widthUnits: number;\n};\n\nexport const arcUniforms = {\n  name: 'arc',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    greatCircle: 'f32',\n    useShortestPath: 'f32',\n    numSegments: 'f32',\n    widthScale: 'f32',\n    widthMinPixels: 'f32',\n    widthMaxPixels: 'f32',\n    widthUnits: 'i32'\n  }\n} as const satisfies ShaderModule<ArcProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME arc-layer-vertex-shader\n\nin vec4 instanceSourceColors;\nin vec4 instanceTargetColors;\nin vec3 instanceSourcePositions;\nin vec3 instanceSourcePositions64Low;\nin vec3 instanceTargetPositions;\nin vec3 instanceTargetPositions64Low;\nin vec3 instancePickingColors;\nin float instanceWidths;\nin float instanceHeights;\nin float instanceTilts;\n\nout vec4 vColor;\nout vec2 uv;\nout float isValid;\n\nfloat paraboloid(float distance, float sourceZ, float targetZ, float ratio) {\n  // d: distance on the xy plane\n  // r: ratio of the current point\n  // p: ratio of the peak of the arc\n  // h: height multiplier\n  // z = f(r) = sqrt(r * (p * 2 - r)) * d * h\n  // f(0) = 0\n  // f(1) = dz\n\n  float deltaZ = targetZ - sourceZ;\n  float dh = distance * instanceHeights;\n  if (dh == 0.0) {\n    return sourceZ + deltaZ * ratio;\n  }\n  float unitZ = deltaZ / dh;\n  float p2 = unitZ * unitZ + 1.0;\n\n  // sqrt does not deal with negative values, manually flip source and target if delta.z < 0\n  float dir = step(deltaZ, 0.0);\n  float z0 = mix(sourceZ, targetZ, dir);\n  float r = mix(ratio, 1.0 - ratio, dir);\n  return sqrt(r * (p2 - r)) * dh + z0;\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (arc.numSegments - 1.0));\n}\n\nvec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {\n  float distance = length(source.xy - target.xy);\n  float z = paraboloid(distance, source.z, target.z, segmentRatio);\n\n  float tiltAngle = radians(instanceTilts);\n  vec2 tiltDirection = normalize(target.xy - source.xy);\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);\n\n  return vec3(\n    mix(source.xy, target.xy, segmentRatio) + tilt,\n    z * cos(tiltAngle)\n  );\n}\n\n/* Great circle interpolation\n * http://www.movable-type.co.uk/scripts/latlong.html\n */\nfloat getAngularDist (vec2 source, vec2 target) {\n  vec2 sourceRadians = radians(source);\n  vec2 targetRadians = radians(target);\n  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);\n  vec2 shd_sq = sin_half_delta * sin_half_delta;\n\n  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;\n  return 2.0 * asin(sqrt(a));\n}\n\nvec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {\n  vec2 lngLat;\n\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\n  if(abs(angularDist - PI) < 0.001) {\n    lngLat = (1.0 - t) * source.xy + t * target.xy;\n  } else {\n    float a = sin((1.0 - t) * angularDist);\n    float b = sin(t * angularDist);\n    vec3 p = source3D.yxz * a + target3D.yxz * b;\n    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));\n  }\n\n  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);\n\n  return vec3(lngLat, z);\n}\n\n/* END GREAT CIRCLE */\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  /*\n  *  --(i, -1)-----------_(i+1, -1)--\n  *       |          _,-\"  |\n  *       o      _,-\"      o\n  *       |  _,-\"          |\n  *  --(i, 1)\"-------------(i+1, 1)--\n  */\n  float segmentIndex = float(gl_VertexID / 2);\n  float segmentSide = mod(float(gl_VertexID), 2.) == 0. ? -1. : 1.;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));\n  float nextSegmentRatio = getSegmentRatio(min(arc.numSegments - 1.0, segmentIndex + 1.0));\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  isValid = 1.0;\n\n  uv = vec2(segmentRatio, segmentSide);\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  vec4 curr;\n  vec4 next;\n  vec3 source;\n  vec3 target;\n\n  if ((arc.greatCircle || project.projectionMode == PROJECTION_MODE_GLOBE) && project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));\n    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));\n    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);\n\n    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);\n    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);\n    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);\n\n    if (abs(currPos.x - prevPos.x) > 180.0) {\n      indexDir = -1.0;\n      isValid = 0.0;\n    } else if (abs(currPos.x - nextPos.x) > 180.0) {\n      indexDir = 1.0;\n      isValid = 0.0;\n    }\n    nextPos = indexDir < 0.0 ? prevPos : nextPos;\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n\n    if (isValid == 0.0) {\n      // split at the 180th meridian\n      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;\n      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);\n      currPos = mix(currPos, nextPos, t);\n      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);\n    }\n\n    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);\n    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);\n  \n    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);\n    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\n  \n  } else {\n    vec3 source_world = instanceSourcePositions;\n    vec3 target_world = instanceTargetPositions;\n    if (arc.useShortestPath) {\n      source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n      target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n\n      float deltaLng = target_world.x - source_world.x;\n      if (deltaLng > 180.) target_world.x -= 360.;\n      if (deltaLng < -180.) source_world.x -= 360.;\n    }\n    source = project_position(source_world, instanceSourcePositions64Low);\n    target = project_position(target_world, instanceTargetPositions64Low);\n\n    // common x at longitude=-180\n    float antiMeridianX = 0.0;\n\n    if (arc.useShortestPath) {\n      if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n        antiMeridianX = -(project.coordinateOrigin.x + 180.) / 360. * TILE_SIZE;\n      }\n      float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);\n\n      if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {\n        isValid = 0.0;\n        indexDir = sign(segmentRatio - thresholdRatio);\n        segmentRatio = thresholdRatio;\n      }\n    }\n\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n    vec3 currPos = interpolateFlat(source, target, segmentRatio);\n    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);\n\n    if (arc.useShortestPath) {\n      if (nextPos.x < antiMeridianX) {\n        currPos.x += TILE_SIZE;\n        nextPos.x += TILE_SIZE;\n      }\n    }\n\n    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\n    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\n    geometry.position = vec4(currPos, 1.0);\n  }\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * arc.widthScale, arc.widthUnits),\n    arc.widthMinPixels, arc.widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset((next.xy - curr.xy) * indexDir, segmentSide, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(curr, geometry);\n  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);\n  vColor = vec4(color.rgb, color.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME arc-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\nin vec2 uv;\nin float isValid;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  if (isValid == 0.0) {\n    discard;\n  }\n\n  fragColor = vColor;\n  geometry.uv = uv;\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport {Model} from '@luma.gl/engine';\n\nimport {arcUniforms, ArcProps} from './arc-layer-uniforms';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: (x: any) => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: (x: any) => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n  numSegments: {type: 'number', value: 50, min: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = unknown> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The number of segments used to draw each arc.\n   * @default 50\n   */\n  numSegments?: number;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, arcUniforms]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      wrapLongitude,\n      numSegments\n    } = this.props;\n    const arcProps: ArcProps = {\n      numSegments,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      useShortestPath: wrapLongitude\n    };\n\n    const model = this.state.model!;\n    model.shaderInputs.setProps({arc: arcProps});\n    model.setVertexCount(numSegments * 2);\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      topology: 'triangle-strip',\n      isInstanced: true\n    });\n  }\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable no-shadow */ // radians and degrees are common variable names\n\nimport type {NumericArray} from '@math.gl/types';\n\nimport type {MathArray} from '../classes/base/math-array';\n\nconst RADIANS_TO_DEGREES = (1 / Math.PI) * 180;\nconst DEGREES_TO_RADIANS = (1 / 180) * Math.PI;\n\nexport type ConfigurationOptions = {\n  EPSILON: number;\n  debug?: boolean;\n  precision: number;\n  printTypes?: boolean;\n  printDegrees?: boolean;\n  printRowMajor?: boolean;\n  _cartographicRadians?: boolean;\n};\n\nconst DEFAULT_CONFIG: Required<ConfigurationOptions> = {\n  EPSILON: 1e-12,\n  debug: false,\n  precision: 4,\n  printTypes: false,\n  printDegrees: false,\n  printRowMajor: true,\n  _cartographicRadians: false\n};\n\n// We use a global field to store the config\ndeclare global {\n  // eslint-disable-next-line no-var\n  var mathgl: {\n    config: Required<ConfigurationOptions>;\n  };\n}\n\n// Configuration is truly global as of v3.6 to ensure single config even if multiple copies of math.gl\n// Multiple copies of config can be quite tricky to debug...\nglobalThis.mathgl = globalThis.mathgl || {config: {...DEFAULT_CONFIG}};\n\nexport const config = globalThis.mathgl.config;\n\nexport function configure(options: Partial<ConfigurationOptions>): ConfigurationOptions {\n  // Only copy existing keys\n  Object.assign(config, options);\n  return config;\n}\n\n/**\n * Formats a value into a string\n * @param value\n * @param param1\n * @returns\n */\nexport function formatValue(\n  value: number,\n  {precision = config.precision}: {precision?: number} = {}\n): string {\n  value = round(value);\n  // get rid of trailing zeros\n  return `${parseFloat(value.toPrecision(precision))}`;\n}\n\n/**\n * Check if value is an \"array\"\n * Returns `true` if value is either an array or a typed array\n * Note: returns `false` for `ArrayBuffer` and `DataView` instances\n * @note isTypedArray and isNumericArray are often more useful in TypeScript\n */\nexport function isArray(value: unknown): boolean {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && !(value instanceof DataView));\n}\n\nexport function clone(array: NumericArray | MathArray): NumericArray {\n  return 'clone' in array ? array.clone() : array.slice();\n}\n\nexport function toRadians(degrees: number): number;\nexport function toRadians(degrees: NumericArray): NumericArray;\n\nexport function toRadians(degrees: number | NumericArray): number | NumericArray {\n  return radians(degrees as NumericArray);\n}\n\nexport function toDegrees(degrees: number): number;\nexport function toDegrees(degrees: NumericArray): NumericArray;\n\nexport function toDegrees(radians: number | NumericArray): number | NumericArray {\n  return degrees(radians as NumericArray);\n}\n\n// GLSL math function equivalents - Works on both single values and vectors\n\n/**\n * \"GLSL equivalent\" radians: Works on single values and vectors\n */\nexport function radians(degrees: number): number;\nexport function radians(degrees: NumericArray, result?: NumericArray): NumericArray;\n\nexport function radians(\n  degrees: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(degrees, (degrees) => degrees * DEGREES_TO_RADIANS, result);\n}\n\n/**\n * \"GLSL equivalent\" degrees: Works on single values and vectors\n */\nexport function degrees(radians: number): number;\nexport function degrees(radians: NumericArray, result?: NumericArray): NumericArray;\n\nexport function degrees(\n  radians: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(radians, (radians) => radians * RADIANS_TO_DEGREES, result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.sin`: Works on single values and vectors\n * @deprecated\n */\nexport function sin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.sin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.cos`: Works on single values and vectors\n * @deprecated\n */\nexport function cos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.cos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.tan`: Works on single values and vectors\n * @deprecated\n */\nexport function tan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.tan(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.asin`: Works on single values and vectors\n * @deprecated\n */\nexport function asin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.asin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.acos`: Works on single values and vectors\n * @deprecated\n */\nexport function acos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.acos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.atan`: Works on single values and vectors\n * @deprecated\n */\nexport function atan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.atan(angle), result);\n}\n\n/**\n * GLSL style value clamping: Works on single values and vectors\n */\nexport function clamp(value: number, min: number, max: number): number;\nexport function clamp(value: NumericArray, min: number, max: number): NumericArray;\n\nexport function clamp(\n  value: number | NumericArray,\n  min: number,\n  max: number\n): number | NumericArray {\n  return map(value, (value) => Math.max(min, Math.min(max, value)));\n}\n\n/**\n * Interpolate between two numbers or two arrays\n */\nexport function lerp(a: number, b: number, t: number): number;\nexport function lerp(a: NumericArray, b: NumericArray, t: number): NumericArray;\n\nexport function lerp(\n  a: number | NumericArray,\n  b: number | NumericArray,\n  t: number\n): number | NumericArray {\n  if (isArray(a)) {\n    return (a as NumericArray).map((ai: number, i: number) => lerp(ai, (b as NumericArray)[i], t));\n  }\n  return t * (b as number) + (1 - t) * (a as number);\n}\n\n/* eslint-disable */\n\n/**\n * Compares any two math objects, using `equals` method if available.\n * @param a\n * @param b\n * @param epsilon\n * @returns\n */\nexport function equals(a: any, b: any, epsilon?: number): boolean {\n  const oldEpsilon = config.EPSILON;\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n  try {\n    if (a === b) {\n      return true;\n    }\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (let i = 0; i < a.length; ++i) {\n        // eslint-disable-next-line max-depth\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n    if (typeof a === 'number' && typeof b === 'number') {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));\n    }\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\n\nexport function exactEquals(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (a && typeof a === 'object' && b && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/* eslint-enable */\n\nexport function withEpsilon<T>(epsilon: number, func: () => T): T {\n  const oldPrecision = config.EPSILON;\n  config.EPSILON = epsilon;\n  let value: T;\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n  return value;\n}\n\n// HELPERS\n\nfunction round(value: number): number {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nfunction duplicateArray(array: NumericArray): NumericArray {\n  // @ts-expect-error We check for math.gl class methods\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  return array.clone ? (array.clone() as NumericArray) : (new Array(array.length) as number[]);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(\n  value: number | NumericArray,\n  func: (x: number, index?: number, resultArray?: NumericArray) => number,\n  result?: NumericArray\n): number | NumericArray {\n  if (isArray(value)) {\n    const array = value as NumericArray;\n    result = result || duplicateArray(array);\n    for (let i = 0; i < result.length && i < array.length; ++i) {\n      const val = typeof value === 'number' ? value : value[i];\n      result[i] = func(val, i, result);\n    }\n    return result;\n  }\n  return func(value as number);\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport type {NumericArray} from '@math.gl/types';\nimport * as glMatrix from './common.js';\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns a new 2D vector\n */\nexport function create(): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param a vector to clone\n * @returns a new 2D vector\n */\nexport function clone(a: Readonly<NumericArray>): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param x X component\n * @param y Y component\n * @returns a new 2D vector\n */\nexport function fromValues(x: number, y: number): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the source vector\n * @returns {NumericArray} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to ceil\n * @returns {NumericArray} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to floor\n * @returns {NumericArray} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to round\n * @returns {NumericArray} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {NumericArray} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {NumericArray} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to negate\n * @returns {NumericArray} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to invert\n * @returns {NumericArray} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to normalize\n * @returns {NumericArray} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {NumericArray} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {NumericArray} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2d(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {NumericArray} out The receiving vec2\n * @param {Readonly<NumericArray>} a The vec2 point to rotate\n * @param {Readonly<NumericArray>} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {NumericArray} out\n */\nexport function rotate(out, a, b, rad) {\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {Readonly<NumericArray>} a The first operand\n * @param {Readonly<NumericArray>} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n  // mag is the product of the magnitudes of a and b\n  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));\n  // mag &&.. short circuits if mag == 0\n  const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec2 to zero\n *\n * @param {NumericArray} out the receiving vector\n * @returns {NumericArray} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {Readonly<NumericArray>} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const b0 = b[0];\n  const b1 = b[1];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n  );\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n", "// @eslint-disable\n// @ts-nocheck\n\n/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\n\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  const sinTotal = Math.sin(angle);\n\n  const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  const ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = glMatrix.RANDOM() * 2.0 - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n  );\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n", "import * as glMatrix from './common.js';\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b01 = a22 * a11 - a12 * a21;\n  const b11 = -a22 * a10 + a12 * a20;\n  const b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  return (\n    a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20)\n  );\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[3];\n  const b11 = b[4];\n  const b12 = b[5];\n  const b20 = b[6];\n  const b21 = b[7];\n  const b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n  );\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8))\n  );\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray, NumericArray9} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\n\nimport {\n  fromQuat as mat3_fromQuat,\n  determinant as mat3_determinant,\n  transpose as mat3_transpose,\n  invert as mat3_invert,\n  multiply as mat3_multiply,\n  rotate as mat3_rotate,\n  scale as mat3_scale,\n  translate as mat3_translate\n} from '../gl-matrix/mat3';\nimport {transformMat3 as vec2_transformMat3} from '../gl-matrix/vec2';\nimport {transformMat3 as vec3_transformMat3} from '../gl-matrix/vec3';\n\n// eslint-disable-next-line no-shadow\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL1ROW0 = 3,\n  COL1ROW1 = 4,\n  COL1ROW2 = 5,\n  COL2ROW0 = 6,\n  COL2ROW1 = 7,\n  COL2ROW2 = 8\n}\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\n/** Helper type that captures array length for a 3x3 matrix */\nexport type Matrix3Like = Matrix3 | NumericArray9;\n\n/**\n * A 3x3 matrix with common linear algebra operations\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Matrix3 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix3> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix3> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 9;\n  }\n\n  get RANK(): number {\n    return 3;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>);\n  /** @deprecated */\n  constructor(...args: number[]);\n\n  constructor(array?: number | Readonly<NumericArray>, ...args: number[]) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else if (args.length > 0) {\n      this.copy([array as number, ...args]);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    // Element wise copy for performance\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // Constructors\n\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /** Calculates a 3x3 matrix from the given quaternion\n   * q quat  Quaternion to create matrix from\n   */\n  fromQuaternion(q: Readonly<NumericArray>): this {\n    mat3_fromQuat(this, q);\n    return this.check();\n  }\n\n  /**\n   * accepts column major order, stores in column major order\n   */\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m02: number,\n    m12: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  /**\n   * accepts row major order, stores as column major\n   */\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m20: number,\n    m21: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat3_determinant(this);\n  }\n\n  // Modifiers\n  transpose(): this {\n    mat3_transpose(this, this);\n    return this.check();\n  }\n\n  /** Invert a matrix. Note that this can fail if the matrix is not invertible */\n  invert(): this {\n    mat3_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n  multiplyLeft(a: NumericArray): this {\n    mat3_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: NumericArray): this {\n    mat3_multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians: number): this {\n    mat3_rotate(this, this, radians);\n    return this.check();\n  }\n\n  override scale(factor: NumericArray | number): this {\n    if (Array.isArray(factor)) {\n      mat3_scale(this, this, factor);\n    } else {\n      mat3_scale(this, this, [factor as number, factor as number]);\n    }\n    return this.check();\n  }\n\n  translate(vec: NumericArray): this {\n    mat3_translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat3(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat3(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      case 4:\n        out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector2(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector3(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n}\n\nlet ZERO_MATRIX3: Matrix3 | null;\nlet IDENTITY_MATRIX3: Matrix3 | null = null;\n\nfunction getZeroMatrix(): Readonly<Matrix3> {\n  if (!ZERO_MATRIX3) {\n    ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO_MATRIX3);\n  }\n  return ZERO_MATRIX3;\n}\n\nfunction getIdentityMatrix(): Matrix3 {\n  if (!IDENTITY_MATRIX3) {\n    IDENTITY_MATRIX3 = new Matrix3();\n    Object.freeze(IDENTITY_MATRIX3);\n  }\n  return IDENTITY_MATRIX3;\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns a new 4x4 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(\n  out,\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b0 = a00 * a11 - a01 * a10;\n  const b1 = a00 * a12 - a02 * a10;\n  const b2 = a01 * a12 - a02 * a11;\n  const b3 = a20 * a31 - a21 * a30;\n  const b4 = a20 * a32 - a22 * a30;\n  const b5 = a21 * a32 - a22 * a31;\n  const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  let b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n  let b00;\n  let b01;\n  let b02;\n  let b10;\n  let b11;\n  let b12;\n  let b20;\n  let b21;\n  let b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  const translation = new glMatrix.ARRAY_TYPE(3);\n  const bx = -a[0];\n  const by = -a[1];\n  const bz = -a[2];\n  const bw = a[3];\n  const ax = a[4];\n  const ay = a[5];\n  const az = a[6];\n  const aw = a[7];\n\n  const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  // Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n    translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n    translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  const scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n\n  const is1 = 1 / scaling[0];\n  const is2 = 1 / scaling[1];\n  const is3 = 1 / scaling[2];\n\n  const sm11 = mat[0] * is1;\n  const sm12 = mat[1] * is2;\n  const sm13 = mat[2] * is3;\n  const sm21 = mat[4] * is1;\n  const sm22 = mat[5] * is2;\n  const sm23 = mat[6] * is3;\n  const sm31 = mat[8] * is1;\n  const sm32 = mat[9] * is2;\n  const sm33 = mat[10] * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Decomposes a transformation matrix into its rotation, translation\n * and scale components. Returns only the rotation component\n * @param  {quat} out_r Quaternion to receive the rotation component\n * @param  {vec3} out_t Vector to receive the translation vector\n * @param  {vec3} out_s Vector to receive the scaling factor\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @returns {quat} out_r\n */\nexport function decompose(out_r, out_t, out_s, mat) {\n  out_t[0] = mat[12];\n  out_t[1] = mat[13];\n  out_t[2] = mat[14];\n\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  const is1 = 1 / out_s[0];\n  const is2 = 1 / out_s[1];\n  const is3 = 1 / out_s[2];\n\n  const sm11 = m11 * is1;\n  const sm12 = m12 * is2;\n  const sm13 = m13 * is3;\n  const sm21 = m21 * is1;\n  const sm22 = m22 * is2;\n  const sm23 = m23 * is3;\n  const sm31 = m31 * is1;\n  const sm32 = m32 * is2;\n  const sm33 = m33 * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out_r[3] = 0.25 * S;\n    out_r[0] = (sm23 - sm32) / S;\n    out_r[1] = (sm31 - sm13) / S;\n    out_r[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out_r[3] = (sm23 - sm32) / S;\n    out_r[0] = 0.25 * S;\n    out_r[1] = (sm12 + sm21) / S;\n    out_r[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out_r[3] = (sm31 - sm13) / S;\n    out_r[0] = (sm12 + sm21) / S;\n    out_r[1] = 0.25 * S;\n    out_r[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out_r[3] = (sm12 - sm21) / S;\n    out_r[0] = (sm31 + sm13) / S;\n    out_r[1] = (sm23 + sm32) / S;\n    out_r[2] = 0.25 * S;\n  }\n\n  return out_r;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  const ox = o[0];\n  const oy = o[1];\n  const oz = o[2];\n\n  const out0 = (1 - (yy + zz)) * sx;\n  const out1 = (xy + wz) * sx;\n  const out2 = (xz - wy) * sx;\n  const out4 = (xy - wz) * sy;\n  const out5 = (1 - (xx + zz)) * sy;\n  const out6 = (yz + wx) * sy;\n  const out8 = (xz + wy) * sz;\n  const out9 = (yz - wx) * sz;\n  const out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  const rl = 1 / (right - left);\n  const tb = 1 / (top - bottom);\n  const nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\nexport const perspective = perspectiveNO;\n\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n  const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n  const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n  const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n  const xScale = 2.0 / (leftTan + rightTan);\n  const yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\nexport const ortho = orthoNO;\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let len;\n  let x0;\n  let x1;\n  let x2;\n  let y0;\n  let y1;\n  let y2;\n  let z0;\n  let z1;\n  let z2;\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  const centerx = center[0];\n  const centery = center[1];\n  const centerz = center[2];\n\n  if (\n    Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n    Math.abs(eyey - centery) < glMatrix.EPSILON &&\n    Math.abs(eyez - centerz) < glMatrix.EPSILON\n  ) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n\n  let z0 = eyex - target[0];\n  let z1 = eyey - target[1];\n  let z2 = eyez - target[2];\n\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1;\n  let x1 = upz * z0 - upx * z2;\n  let x2 = upx * z1 - upy * z0;\n\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n  );\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8] &&\n    a[9] === b[9] &&\n    a[10] === b[10] &&\n    a[11] === b[11] &&\n    a[12] === b[12] &&\n    a[13] === b[13] &&\n    a[14] === b[14] &&\n    a[15] === b[15]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const a9 = a[9];\n  const a10 = a[10];\n  const a11 = a[11];\n  const a12 = a[12];\n  const a13 = a[13];\n  const a14 = a[14];\n  const a15 = a[15];\n\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  const b9 = b[9];\n  const b10 = b[10];\n  const b11 = b[11];\n  const b12 = b[12];\n  const b13 = b[13];\n  const b14 = b[14];\n  const b15 = b[15];\n\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15))\n  );\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  const A = v[0] * w[1] - v[1] * w[0];\n  const B = v[0] * w[2] - v[2] * w[0];\n  const C = v[0] * w[3] - v[3] * w[0];\n  const D = v[1] * w[2] - v[2] * w[1];\n  const E = v[1] * w[3] - v[3] * w[1];\n  const F = v[2] * w[3] - v[3] * w[2];\n  const G = u[0];\n  const H = u[1];\n  const I = u[2];\n  const J = u[3];\n\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1;\n  let v2;\n  let v3;\n  let v4;\n  let s1;\n  let s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n  );\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray, NumericArray16} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n// @ts-ignore gl-matrix types...\nimport {\n  fromQuat as mat4_fromQuat,\n  frustum as mat4_frustum,\n  lookAt as mat4_lookAt,\n  ortho as mat4_ortho,\n  perspective as mat4_perspective,\n  determinant as mat4_determinant,\n  transpose as mat4_transpose,\n  invert as mat4_invert,\n  multiply as mat4_multiply,\n  rotateX as mat4_rotateX,\n  rotateY as mat4_rotateY,\n  rotateZ as mat4_rotateZ,\n  rotate as mat4_rotate,\n  scale as mat4_scale,\n  translate as mat4_translate\n} from '../gl-matrix/mat4';\nimport {transformMat4 as vec2_transformMat4} from '../gl-matrix/vec2';\nimport {transformMat4 as vec3_transformMat4} from '../gl-matrix/vec3';\nimport {transformMat4 as vec4_transformMat4} from '../gl-matrix/vec4';\n\n// eslint-disable-next-line no-shadow\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL0ROW3 = 3,\n  COL1ROW0 = 4,\n  COL1ROW1 = 5,\n  COL1ROW2 = 6,\n  COL1ROW3 = 7,\n  COL2ROW0 = 8,\n  COL2ROW1 = 9,\n  COL2ROW2 = 10,\n  COL2ROW3 = 11,\n  COL3ROW0 = 12,\n  COL3ROW1 = 13,\n  COL3ROW2 = 14,\n  COL3ROW3 = 15\n}\n\nconst DEFAULT_FOVY = (45 * Math.PI) / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n/** Helper type that captures array length for a 4x4 matrix */\nexport type Matrix4Like = Matrix4 | NumericArray16;\n\n/**\n * A 4x4 matrix with common linear algebra operations\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Matrix4 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix4> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix4> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 16;\n  }\n\n  get RANK(): number {\n    return 4;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m30: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m31: number,\n    m02: number,\n    m12: number,\n    m22: number,\n    m32: number,\n    m03: number,\n    m13: number,\n    m23: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m03: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m13: number,\n    m20: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m30: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result: NumericArray): NumericArray {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  /** Set to identity matrix */\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    mat4_fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4_frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view: {\n    eye: Readonly<NumericArray>;\n    center?: Readonly<NumericArray>;\n    up?: Readonly<NumericArray>;\n  }): this {\n    const {eye, center = [0, 0, 0], up = [0, 1, 0]} = view;\n    mat4_lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    mat4_ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view: {\n    fovy?: number;\n    aspect?: number;\n    focalDistance?: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    checkRadians(fovy);\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view: {fovy: number; aspect?: number; near?: number; far?: number}): this {\n    const {fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500} = view;\n    checkRadians(fovy);\n    mat4_perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat4_determinant(this);\n  }\n\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result: NumericArray = [-0, -0, -0]): NumericArray {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose(): this {\n    mat4_transpose(this, this);\n    return this.check();\n  }\n\n  invert(): this {\n    mat4_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians: number): this {\n    mat4_rotateX(this, this, radians);\n    // mat4_rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians: number): this {\n    mat4_rotateY(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians: number): this {\n    mat4_rotateZ(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ: Readonly<NumericArray>): this {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians: number, axis: Readonly<NumericArray>): this {\n    mat4_rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  override scale(factor: number | Readonly<NumericArray>): this {\n    mat4_scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector: Readonly<NumericArray>): this {\n    mat4_translate(this, this, vector);\n    return this.check();\n  }\n\n  // Transforms\n\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    if (vector.length === 4) {\n      result = vec4_transformMat4(result || [-0, -0, -0, -0], vector, this) as NumericArray;\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    const {length} = vector;\n    let out: NumericArray;\n    switch (length) {\n      case 2:\n        out = vec2_transformMat4(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat4(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformDirection(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsVector(vector, result);\n  }\n\n  // three.js math API compatibility\n\n  makeRotationX(radians: number): this {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x: number, y: number, z: number): this {\n    return this.identity().translate([x, y, z]);\n  }\n}\n\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO: Matrix4;\nlet IDENTITY: Matrix4;\n\nfunction getZeroMatrix(): Readonly<Matrix4> {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\n\nfunction getIdentityMatrix(): Matrix4 {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n\n// HELPER FUNCTIONS\n\nfunction checkRadians(possiblyDegrees: number) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(\n  result: NumericArray,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  near: number\n): NumericArray {\n  const column0Row0 = (2 * near) / (right - left);\n  const column1Row1 = (2 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\nimport * as mat3 from './mat3.js';\nimport * as vec3 from './vec3.js';\nimport * as vec4 from './vec4.js';\n\n// const glMatrix: {EPSILON = 0.000001};\n\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  const dotproduct = dot(a, b);\n\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const by = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bz = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const et = Math.exp(w);\n  const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n\n  return out;\n}\n\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n  return out;\n}\n\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosom;\n  let omega;\n  let scale0;\n  let scale1;\n  let sinom;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n// export function random(out) {\n//   // Implementation of http://planning.cs.uiuc.edu/node198.html\n//   // TODO: Calling random 3 times is probably not the fastest solution\n//   let u1 = glMatrix.RANDOM();\n//   let u2 = glMatrix.RANDOM();\n//   let u3 = glMatrix.RANDOM();\n\n//   let sqrt1MinusU1 = Math.sqrt(1 - u1);\n//   let sqrtU1 = Math.sqrt(u1);\n\n//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n//   return out;\n// }\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\n// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {\n//   let halfToRad = Math.PI / 360;\n//   x *= halfToRad;\n//   z *= halfToRad;\n//   y *= halfToRad;\n\n//   let sx = Math.sin(x);\n//   let cx = Math.cos(x);\n//   let sy = Math.sin(y);\n//   let cy = Math.cos(y);\n//   let sz = Math.sin(z);\n//   let cz = Math.cos(z);\n\n//   switch (order) {\n//     case \"xyz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"xzy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yxz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yzx\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zxy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zyx\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     default:\n//       throw new Error('Unknown angle order ' + order);\n//   }\n\n//   return out;\n// }\n\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function () {\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n\n  return function (out, a, b) {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return normalize(out, out);\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  const temp1 = create();\n  const temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function () {\n  const matr = mat3.create();\n\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {MathArray} from './base/math-array';\nimport {Quaternion} from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\n// eslint-disable-next-line no-shadow\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // @ts-expect-error\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: Record<string, unknown>): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  override validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  override toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  override fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// NOTE: Added to make Cesium-derived test cases work\n// TODO: Determine if/how to keep\nexport const EPSILON1 = 1e-1;\nexport const EPSILON2 = 1e-2;\nexport const EPSILON3 = 1e-3;\nexport const EPSILON4 = 1e-4;\nexport const EPSILON5 = 1e-5;\nexport const EPSILON6 = 1e-6;\nexport const EPSILON7 = 1e-7;\nexport const EPSILON8 = 1e-8;\nexport const EPSILON9 = 1e-9;\nexport const EPSILON10 = 1e-10;\nexport const EPSILON11 = 1e-11;\nexport const EPSILON12 = 1e-12;\nexport const EPSILON13 = 1e-13;\nexport const EPSILON14 = 1e-14;\nexport const EPSILON15 = 1e-15;\nexport const EPSILON16 = 1e-16;\nexport const EPSILON17 = 1e-17;\nexport const EPSILON18 = 1e-18;\nexport const EPSILON19 = 1e-19;\nexport const EPSILON20 = 1e-20;\n\nexport const PI_OVER_TWO = Math.PI / 2;\nexport const PI_OVER_FOUR = Math.PI / 4;\nexport const PI_OVER_SIX = Math.PI / 6;\n\nexport const TWO_PI = Math.PI * 2;\n", "// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition: unknown, message?: string): void {\n  if (!condition) {\n    throw new Error(message || '@math.gl/web-mercator: assertion failed.');\n  }\n}\n", "// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, clamp, log2} from './math-utils';\n\nimport {mat4, vec2, vec3} from '@math.gl/core';\nimport {assert} from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  // eslint-disable-next-line no-shadow\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance =\n    (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n    Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance =\n    Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n", "/* eslint-disable camelcase */\nimport {vec2} from '@math.gl/core';\nimport type {WebMercatorViewport} from './web-mercator-viewport';\nimport {worldToLngLat} from './web-mercator-utils';\nimport {transformVector} from './math-utils';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport function getBounds(viewport: WebMercatorViewport, z: number = 0): number[][] {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const {width, height, unproject} = viewport;\n  const unprojectOps = {targetZ: z};\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft: number[];\n  let topRight: number[];\n\n  const halfFov = viewport.fovy\n    ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS\n    : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport: WebMercatorViewport, x: number, targetZ: number): number[] {\n  const {pixelUnprojectionMatrix} = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n\n  const result = worldToLngLat(coord);\n  result.push(targetZ);\n  return result;\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {lerp} from '@math.gl/core';\n\nconst DEFAULT_INDICES = new Uint32Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(\n    Math.abs(bounds[0][0] - bounds[3][0]),\n    Math.abs(bounds[1][0] - bounds[2][0])\n  );\n  const maxYSpan = Math.max(\n    Math.abs(bounds[1][1] - bounds[0][1]),\n    Math.abs(bounds[2][1] - bounds[3][1])\n  );\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\n\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\n\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Texture} from '@luma.gl/core';\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform bitmapUniforms {\n  vec4 bounds;\n  float coordinateConversion;\n  float desaturate;\n  vec3 tintColor;\n  vec4 transparentColor;\n} bitmap;\n`;\n\nexport type BitmapProps = {\n  bounds: [number, number, number, number];\n  coordinateConversion: number;\n  desaturate: number;\n  tintColor: [number, number, number];\n  transparentColor: [number, number, number, number];\n  bitmapTexture: Texture;\n};\n\nexport const bitmapUniforms = {\n  name: 'bitmap',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    bounds: 'vec4<f32>',\n    coordinateConversion: 'f32',\n    desaturate: 'f32',\n    tintColor: 'vec3<f32>',\n    transparentColor: 'vec4<f32>'\n  }\n} as const satisfies ShaderModule<BitmapProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME bitmap-layer-vertex-shader\n\nin vec2 texCoords;\nin vec3 positions;\nin vec3 positions64Low;\n\nout vec2 vTexCoord;\nout vec2 vTexPos;\n\nconst vec3 pickingColor = vec3(1.0, 0.0, 0.0);\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = pickingColor;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  if (bitmap.coordinateConversion < -0.5) {\n    vTexPos = geometry.position.xy + project.commonOrigin.xy;\n  } else if (bitmap.coordinateConversion > 0.5) {\n    vTexPos = geometry.worldPosition.xy;\n  }\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * Pack the top 12 bits of two normalized floats into 3 8-bit (rgb) values\n * This enables addressing 4096x4096 individual pixels\n *\n * returns vec3 encoded RGB colors\n *  result.r - top 8 bits of u\n *  result.g - top 8 bits of v\n *  result.b - next 4 bits of u and v: (u + v * 16)\n */\nconst packUVsIntoRGB = `\nvec3 packUVsIntoRGB(vec2 uv) {\n  // Extract the top 8 bits. We want values to be truncated down so we can add a fraction\n  vec2 uv8bit = floor(uv * 256.);\n\n  // Calculate the normalized remainders of u and v parts that do not fit into 8 bits\n  // Scale and clamp to 0-1 range\n  vec2 uvFraction = fract(uv * 256.);\n  vec2 uvFraction4bit = floor(uvFraction * 16.);\n\n  // Remainder can be encoded in blue channel, encode as 4 bits for pixel coordinates\n  float fractions = uvFraction4bit.x + uvFraction4bit.y * 16.;\n\n  return vec3(uv8bit, fractions) / 255.;\n}\n`;\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture;\n\nin vec2 vTexCoord;\nin vec2 vTexPos;\n\nout vec4 fragColor;\n\n/* projection utils */\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / PI / 2.0;\n\n// from degrees to Web Mercator\nvec2 lnglat_to_mercator(vec2 lnglat) {\n  float x = lnglat.x;\n  float y = clamp(lnglat.y, -89.9, 89.9);\n  return vec2(\n    radians(x) + PI,\n    PI + log(tan(PI * 0.25 + radians(y) * 0.5))\n  ) * WORLD_SCALE;\n}\n\n// from Web Mercator to degrees\nvec2 mercator_to_lnglat(vec2 xy) {\n  xy /= WORLD_SCALE;\n  return degrees(vec2(\n    xy.x - PI,\n    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5\n  ));\n}\n/* End projection utils */\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), bitmap.desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * bitmap.tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  if (bitmap.transparentColor.a == 0.0) {\n    return vec4(color, alpha);\n  }\n  float blendedAlpha = alpha + bitmap.transparentColor.a * (1.0 - alpha);\n  float highLightRatio = alpha / blendedAlpha;\n  vec3 blendedRGB = mix(bitmap.transparentColor.rgb, color, highLightRatio);\n  return vec4(blendedRGB, blendedAlpha);\n}\n\nvec2 getUV(vec2 pos) {\n  return vec2(\n    (pos.x - bitmap.bounds[0]) / (bitmap.bounds[2] - bitmap.bounds[0]),\n    (pos.y - bitmap.bounds[3]) / (bitmap.bounds[1] - bitmap.bounds[3])\n  );\n}\n\n${packUVsIntoRGB}\n\nvoid main(void) {\n  vec2 uv = vTexCoord;\n  if (bitmap.coordinateConversion < -0.5) {\n    vec2 lnglat = mercator_to_lnglat(vTexPos);\n    uv = getUV(lnglat);\n  } else if (bitmap.coordinateConversion > 0.5) {\n    vec2 commonPos = lnglat_to_mercator(vTexPos);\n    uv = getUV(commonPos);\n  }\n  vec4 bitmapColor = texture(bitmapTexture, uv);\n\n  fragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * layer.opacity);\n\n  geometry.uv = uv;\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n\n  if (bool(picking.isActive) && !bool(picking.isAttribute)) {\n    // Since instance information is not used, we can use picking color for pixel index\n    fragColor.rgb = packUVsIntoRGB(uv);\n  }\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  CoordinateSystem,\n  COORDINATE_SYSTEM,\n  LayerProps,\n  PickingInfo,\n  GetPickingInfoParams,\n  UpdateParameters,\n  Color,\n  TextureSource,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model} from '@luma.gl/engine';\nimport type {SamplerProps, Texture} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport {bitmapUniforms, BitmapProps} from './bitmap-layer-uniforms';\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps: DefaultProps<BitmapLayerProps> = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]},\n\n  textureParameters: {type: 'object', ignore: true, value: null}\n};\n\n/** All properties supported by BitmapLayer. */\nexport type BitmapLayerProps = _BitmapLayerProps & LayerProps;\nexport type BitmapBoundingBox =\n  | [left: number, bottom: number, right: number, top: number]\n  | [Position, Position, Position, Position];\n\n/** Properties added by BitmapLayer. */\ntype _BitmapLayerProps = {\n  data: never;\n  /**\n   * The image to display.\n   *\n   * @default null\n   */\n  image?: string | TextureSource | null;\n\n  /**\n   * Supported formats:\n   *  - Coordinates of the bounding box of the bitmap `[left, bottom, right, top]`\n   *  - Coordinates of four corners of the bitmap, should follow the sequence of `[[left, bottom], [left, top], [right, top], [right, bottom]]`.\n   *   Each position could optionally contain a third component `z`.\n   * @default [1, 0, 0, 1]\n   */\n  bounds?: BitmapBoundingBox;\n\n  /**\n   * > Note: this prop is experimental.\n   *\n   * Specifies how image coordinates should be geographically interpreted.\n   * @default COORDINATE_SYSTEM.DEFAULT\n   */\n  _imageCoordinateSystem?: CoordinateSystem;\n\n  /**\n   * The desaturation of the bitmap. Between `[0, 1]`.\n   * @default 0\n   */\n  desaturate?: number;\n\n  /**\n   * The color to use for transparent pixels, in `[r, g, b, a]`.\n   * @default [0, 0, 0, 0]\n   */\n  transparentColor?: Color;\n\n  /**\n   * The color to tint the bitmap by, in `[r, g, b]`.\n   * @default [255, 255, 255]\n   */\n  tintColor?: Color;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: SamplerProps | null;\n};\n\nexport type BitmapLayerPickingInfo = PickingInfo<\n  null,\n  {\n    bitmap: {\n      /** Size of the original image */\n      size: {\n        width: number;\n        height: number;\n      };\n      /** Hovered pixel uv in 0-1 range */\n      uv: [number, number];\n      /** Hovered pixel in the original image */\n      pixel: [number, number];\n    } | null;\n  }\n>;\n\n/** Render a bitmap at specified boundaries. */\nexport default class BitmapLayer<ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_BitmapLayerProps>\n> {\n  static layerName = 'BitmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    disablePicking?: boolean;\n    model?: Model;\n    mesh?: any;\n    coordinateConversion: number;\n    bounds: [number, number, number, number];\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, bitmapUniforms]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    // setup model first\n    const attributeManager = this.getAttributeManager()!;\n\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager.invalidateAll();\n    }\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model!.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): BitmapLayerPickingInfo {\n    const {image} = this.props;\n    const info = params.info as BitmapLayerPickingInfo;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image as Texture;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    info.bitmap = {\n      size: {width, height},\n      uv,\n      pixel: [Math.floor(uv[0] * width), Math.floor(uv[1] * height)]\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  protected _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  protected _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (isRectangularBounds(bounds)) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  protected _getModel(): Model {\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      topology: 'triangle-list',\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {shaderModuleProps} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (shaderModuleProps.picking.isActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      const bitmapProps: BitmapProps = {\n        bitmapTexture: image as Texture,\n        bounds,\n        coordinateConversion,\n        desaturate,\n        tintColor: tintColor.slice(0, 3).map(x => x / 255) as [number, number, number],\n        transparentColor: transparentColor.map(x => x / 255) as [number, number, number, number]\n      };\n      model.shaderInputs.setProps({bitmap: bitmapProps});\n      model.draw(this.context.renderPass);\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!isRectangularBounds(bounds)) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color: Uint8Array): [number, number] {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n\nfunction isRectangularBounds(\n  bounds: [number, number, number, number] | [Position, Position, Position, Position]\n): bounds is [number, number, number, number] {\n  return Number.isFinite(bounds[0]);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\nimport {Texture} from '@luma.gl/core';\n\nconst uniformBlock = `\\\nuniform iconUniforms {\n  float sizeScale;\n  vec2 iconsTextureDim;\n  float sizeMinPixels;\n  float sizeMaxPixels;\n  bool billboard;\n  highp int sizeUnits;\n  float alphaCutoff;\n} icon;\n`;\n\ntype IconBindingProps = {\n  iconsTexture: Texture;\n};\n\ntype IconUniformProps = {\n  sizeScale: number;\n  iconsTextureDim: [number, number];\n  sizeMinPixels: number;\n  sizeMaxPixels: number;\n  billboard: boolean;\n  sizeUnits: number;\n  alphaCutoff: number;\n};\n\nexport type IconProps = IconBindingProps & IconUniformProps;\n\nexport const iconUniforms = {\n  name: 'icon',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    sizeScale: 'f32',\n    iconsTextureDim: 'vec2<f32>',\n    sizeMinPixels: 'f32',\n    sizeMaxPixels: 'f32',\n    billboard: 'f32',\n    sizeUnits: 'i32',\n    alphaCutoff: 'f32'\n  }\n} as const satisfies ShaderModule<IconProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME icon-layer-vertex-shader\n\nin vec2 positions;\n\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin float instanceSizes;\nin float instanceAngles;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin vec4 instanceIconFrames;\nin float instanceColorModes;\nin vec2 instanceOffsets;\nin vec2 instancePixelOffset;\n\nout float vColorMode;\nout vec4 vColor;\nout vec2 vTextureCoords;\nout vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  // convert size in meters to pixels, then scaled and clamp\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * icon.sizeScale, icon.sizeUnits),\n    icon.sizeMinPixels, icon.sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in \"pixel\" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (icon.billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / icon.iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform sampler2D iconsTexture;\n\nin float vColorMode;\nin vec4 vColor;\nin vec2 vTextureCoords;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * layer.opacity * vColor.a;\n\n  if (a < icon.alphaCutoff) {\n    discard;\n  }\n\n  fragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global document */\nimport {Device, Texture, SamplerProps} from '@luma.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_SAMPLER_PARAMETERS: SamplerProps = {\n  minFilter: 'linear',\n  mipmapFilter: 'linear',\n  // LINEAR is the default value but explicitly set it here\n  magFilter: 'linear',\n  // minimize texture boundary artifacts\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nconst MISSING_ICON: PrepackedIcon = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0\n};\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  maxWidth: number,\n  maxHeight: number\n): {\n  image: HTMLImageElement | HTMLCanvasElement | ImageBitmap;\n  width: number;\n  height: number;\n} {\n  const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);\n  const width = Math.floor(imageData.width * resizeRatio);\n  const height = Math.floor(imageData.height * resizeRatio);\n\n  if (resizeRatio === 1) {\n    // No resizing required\n    return {image: imageData, width, height};\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, width, height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return {image: ctx.canvas, width, height};\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture,\n  width: number,\n  height: number,\n  sampler: SamplerProps\n): Texture {\n  const {width: oldWidth, height: oldHeight, device} = texture;\n\n  const newTexture = device.createTexture({\n    format: 'rgba8unorm',\n    width,\n    height,\n    sampler,\n    mipmaps: true\n  });\n  const commandEncoder = device.createCommandEncoder();\n  commandEncoder.copyTextureToTexture({\n    sourceTexture: texture,\n    destinationTexture: newTexture,\n    width: oldWidth,\n    height: oldHeight\n  });\n  commandEncoder.finish();\n\n  texture.destroy();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  device: Device;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture | null = null;\n  private _externalTexture: Texture | null = null;\n  private _mapping: IconMapping = {};\n  private _samplerParameters: SamplerProps | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    device: Device,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.device = device;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || MISSING_ICON;\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: SamplerProps | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._samplerParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = this.device.createTexture({\n          format: 'rgba8unorm',\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          sampler: this._samplerParameters || DEFAULT_SAMPLER_PARAMETERS,\n          mipmaps: true\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._samplerParameters || DEFAULT_SAMPLER_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d', {\n      willReadFrequently: true\n    }) as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n\n          const iconDef = this._mapping[id];\n          const {x, y, width: maxWidth, height: maxHeight} = iconDef;\n\n          const {image, width, height} = resizeImage(\n            ctx,\n            imageData as ImageBitmap,\n            maxWidth,\n            maxHeight\n          );\n\n          this._texture?.copyExternalImage({\n            image,\n            x: x + (maxWidth - width) / 2,\n            y: y + (maxHeight - height) / 2,\n            width,\n            height\n          });\n          iconDef.width = width;\n          iconDef.height = height;\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          // @ts-expect-error TODO v9 API not yet clear\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport {SamplerProps, Texture} from '@luma.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\n\nimport {iconUniforms, IconProps} from './icon-layer-uniforms';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: SamplerProps | null;\n};\n\nexport type IconLayerProps<DataT = unknown> = _IconLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getIcon: {type: 'accessor', value: (x: any) => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, optional: true},\n\n  textureParameters: {type: 'object', ignore: true, value: null}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, iconUniforms]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.device, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 'uint8',\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    if (typeof iconAtlas === 'string') {\n      return;\n    }\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      const model = this.state.model!;\n      const iconProps: IconProps = {\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      };\n\n      model.shaderInputs.setProps({icon: iconProps});\n      model.draw(this.context.renderPass);\n    }\n  }\n\n  protected _getModel(): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: in vec2 positions;\n    const positions = [-1, -1, 1, -1, -1, 1, 1, 1];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlockWGSL = /* wgsl */ `\\\nstruct LineUniforms {\n  widthScale: f32,\n  widthMinPixels: f32,\n  widthMaxPixels: f32,\n  useShortestPath: f32,\n  widthUnits: i32,\n};\n\n@group(0) @binding(1)\nvar<uniform> line: LineUniforms;\n`;\n\nconst uniformBlockGLSL = /* glsl */ `\\\nuniform lineUniforms {\n  float widthScale;\n  float widthMinPixels;\n  float widthMaxPixels;\n  float useShortestPath;\n  highp int widthUnits;\n} line;\n`;\n\nexport type LineProps = {\n  widthScale: number;\n  widthMinPixels: number;\n  widthMaxPixels: number;\n  useShortestPath: number;\n  widthUnits: number;\n};\n\nexport const lineUniforms = {\n  name: 'line',\n  source: uniformBlockWGSL,\n  vs: uniformBlockGLSL,\n  fs: uniformBlockGLSL,\n  uniformTypes: {\n    widthScale: 'f32',\n    widthMinPixels: 'f32',\n    widthMaxPixels: 'f32',\n    useShortestPath: 'f32',\n    widthUnits: 'i32'\n  }\n} as const satisfies ShaderModule<LineProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport const shaderWGSL = /* wgsl */ `\\\n// TODO(ibgreen): Hack for Layer uniforms (move to new \"color\" module?)\nstruct LayerUniforms {\n  opacity: f32,\n};\nvar<private> layer: LayerUniforms = LayerUniforms(1.0);\n// @group(0) @binding(1) var<uniform> layer: LayerUniforms;\n\n// ---------- Helper Structures & Functions ----------\n\n// Placeholder filter functions.\nfn deckgl_filter_size(offset: vec3<f32>, geometry: Geometry) -> vec3<f32> {\n  return offset;\n}\nfn deckgl_filter_gl_position(p: vec4<f32>, geometry: Geometry) -> vec4<f32> {\n  return p;\n}\nfn deckgl_filter_color(color: vec4<f32>, geometry: Geometry) -> vec4<f32> {\n  return color;\n}\n\n// Compute an extrusion offset given a line direction (in clipspace),\n// an offset direction (-1 or 1), and a width in pixels.\n// Assumes a uniform \"project\" with a viewportSize field is available.\nfn getExtrusionOffset(line_clipspace: vec2<f32>, offset_direction: f32, width: f32) -> vec2<f32> {\n  // project.viewportSize should be provided as a uniform (not shown here)\n  let dir_screenspace = normalize(line_clipspace * project.viewportSize);\n  // Rotate by 90°: (x,y) becomes (-y,x)\n  let rotated = vec2<f32>(-dir_screenspace.y, dir_screenspace.x);\n  return rotated * offset_direction * width / 2.0;\n}\n\n// Splits the line between two points at a given x coordinate.\n// Interpolates the y and z components.\nfn splitLine(a: vec3<f32>, b: vec3<f32>, x: f32) -> vec3<f32> {\n  let t: f32 = (x - a.x) / (b.x - a.x);\n  return vec3<f32>(x, a.yz + t * (b.yz - a.yz));\n}\n\n// ---------- Uniforms & Global Structures ----------\n\n// Uniforms for line, layer, and project are assumed to be defined elsewhere.\n// For example:\n//\n// @group(0) @binding(0)\n// var<uniform> line: LineUniform;\n//\n// struct LayerUniform {\n//   opacity: f32,\n// };\n// @group(0) @binding(1)\n// var<uniform> layer: LayerUniform;\n//\n// struct ProjectUniform {\n//   viewportSize: vec2<f32>,\n// };\n// @group(0) @binding(2)\n// var<uniform> project: ProjectUniform;\n\n\n\n// ---------- Vertex Output Structure ----------\n\nstruct Varyings {\n  @builtin(position) gl_Position: vec4<f32>,\n  @location(0) vColor: vec4<f32>,\n  @location(1) uv: vec2<f32>,\n};\n\n// ---------- Vertex Shader Entry Point ----------\n\n@vertex\nfn vertexMain(\n  @location(0) positions: vec3<f32>,\n  @location(1) instanceSourcePositions: vec3<f32>,\n  @location(2) instanceTargetPositions: vec3<f32>,\n  @location(3) instanceSourcePositions64Low: vec3<f32>,\n  @location(4) instanceTargetPositions64Low: vec3<f32>,\n  @location(5) instanceColors: vec4<f32>,\n  @location(6) instancePickingColors: vec3<f32>,\n  @location(7) instanceWidths: f32\n) -> Varyings {\n  var geometry: Geometry;\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  var source_world: vec3<f32> = instanceSourcePositions;\n  var target_world: vec3<f32> = instanceTargetPositions;\n  var source_world_64low: vec3<f32> = instanceSourcePositions64Low;\n  var target_world_64low: vec3<f32> = instanceTargetPositions64Low;\n\n  // Apply shortest-path adjustments if needed.\n  if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {\n    source_world.x = (source_world.x + 180.0 % 360.0) - 180.0;\n    target_world.x = (target_world.x + 180.0 % 360.0) - 180.0;\n    let deltaLng: f32 = target_world.x - source_world.x;\n\n    if (deltaLng * line.useShortestPath > 180.0) {\n      source_world.x = source_world.x + 360.0 * line.useShortestPath;\n      source_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);\n      source_world_64low = vec3<f32>(0.0, 0.0, 0.0);\n    } else if (deltaLng * line.useShortestPath < -180.0) {\n      target_world.x = target_world.x + 360.0 * line.useShortestPath;\n      target_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);\n      target_world_64low = vec3<f32>(0.0, 0.0, 0.0);\n    } else if (line.useShortestPath < 0.0) {\n      var abortOut: Varyings;\n      abortOut.gl_Position = vec4<f32>(0.0);\n      abortOut.vColor = vec4<f32>(0.0);\n      abortOut.uv = vec2<f32>(0.0);\n      return abortOut;\n    }\n  }\n\n  // Project Pos and target positions to clip space.\n  let sourceResult = project_position_to_clipspace_and_commonspace(source_world, source_world_64low, vec3<f32>(0.0));\n  let targetResult = project_position_to_clipspace_and_commonspace(target_world, target_world_64low, vec3<f32>(0.0));\n  let sourcePos: vec4<f32> = sourceResult.clipPosition;\n  let targetPos: vec4<f32> = targetResult.clipPosition;\n  let source_commonspace: vec4<f32> = sourceResult.commonPosition;\n  let target_commonspace: vec4<f32> = targetResult.commonPosition;\n\n  // Interpolate along the line segment.\n  let segmentIndex: f32 = positions.x;\n  let p: vec4<f32> = sourcePos + segmentIndex * (targetPos - sourcePos);\n  geometry.position = source_commonspace + segmentIndex * (target_commonspace - source_commonspace);\n  let uv: vec2<f32> = positions.xy;\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  // Determine width in pixels.\n  let widthPixels: f32 = clamp(\n    project_unit_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),\n    line.widthMinPixels, line.widthMaxPixels\n  );\n\n  // Compute extrusion offset.\n  let extrusion: vec2<f32> = getExtrusionOffset(targetPos.xy - sourcePos.xy, positions.y, widthPixels);\n  let offset: vec3<f32> = vec3<f32>(extrusion, 0.0);\n\n  // Apply deck.gl filter functions.\n  let filteredOffset = deckgl_filter_size(offset, geometry);\n  let filteredP = deckgl_filter_gl_position(p, geometry);\n\n  let clipOffset: vec2<f32> = project_pixel_size_to_clipspace(filteredOffset.xy);\n  let finalPosition: vec4<f32> = filteredP + vec4<f32>(clipOffset, 0.0, 0.0);\n\n  // Compute color.\n  var vColor: vec4<f32> = vec4<f32>(instanceColors.rgb, instanceColors.a * layer.opacity);\n  // vColor = deckgl_filter_color(vColor, geometry);\n\n  var output: Varyings;\n  output.gl_Position = finalPosition;\n  output.vColor = vColor;\n  output.uv = uv;\n  return output;\n}\n\n@fragment\nfn fragmentMain(\n  @location(0) vColor: vec4<f32>,\n  @location(1) uv: vec2<f32>\n) -> @location(0) vec4<f32> {\n  // Create and initialize geometry with the provided uv.\n  var geometry: Geometry;\n  geometry.uv = uv;\n\n  // Start with the input color.\n  var fragColor: vec4<f32> = vColor;\n\n  // Apply the deck.gl filter to the color.\n  fragColor = deckgl_filter_color(fragColor, geometry);\n\n  return fragColor;\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME line-layer-vertex-shader\n\nin vec3 positions;\nin vec3 instanceSourcePositions;\nin vec3 instanceTargetPositions;\nin vec3 instanceSourcePositions64Low;\nin vec3 instanceTargetPositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin float instanceWidths;\n\nout vec4 vColor;\nout vec2 uv;\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nvec3 splitLine(vec3 a, vec3 b, float x) {\n  float t = (x - a.x) / (b.x - a.x);\n  return vec3(x, mix(a.yz, b.yz, t));\n}\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  vec3 source_world = instanceSourcePositions;\n  vec3 target_world = instanceTargetPositions;\n  vec3 source_world_64low = instanceSourcePositions64Low;\n  vec3 target_world_64low = instanceTargetPositions64Low;\n\n  if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {\n    source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n    target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n    float deltaLng = target_world.x - source_world.x;\n\n    if (deltaLng * line.useShortestPath > 180.) {\n      source_world.x += 360. * line.useShortestPath;\n      source_world = splitLine(source_world, target_world, 180. * line.useShortestPath);\n      source_world_64low = vec3(0.0);\n    } else if (deltaLng * line.useShortestPath < -180.) {\n      target_world.x += 360. * line.useShortestPath;\n      target_world = splitLine(source_world, target_world, 180. * line.useShortestPath);\n      target_world_64low = vec3(0.0);\n    } else if (line.useShortestPath < 0.) {\n      // Line is not split, abort\n      gl_Position = vec4(0.);\n      return;\n    }\n  }\n\n  // Position\n  vec4 source_commonspace;\n  vec4 target_commonspace;\n  vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);\n  vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);\n  \n  // linear interpolation of source & target to pick right coord\n  float segmentIndex = positions.x;\n  vec4 p = mix(source, target, segmentIndex);\n  geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);\n  uv = positions.xy;\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  // Multiply out width and clamp to limits\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),\n    line.widthMinPixels, line.widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(p, geometry);\n  gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  // Color\n  vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME line-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  fragColor = vColor;\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  Position,\n  Accessor,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\n\nimport {lineUniforms, LineProps} from './line-layer-uniforms';\nimport {shaderWGSL as source} from './line-layer.wgsl';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<LineLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: (x: any) => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: (x: any) => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by LineLayer. */\nexport type LineLayerProps<DataT = unknown> = _LineLayerProps<DataT> & LayerProps;\n\n/** Properties added by LineLayer. */\ntype _LineLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: Accessor<DataT, Position>;\n\n  /**\n   * Target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Width of each object\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n};\n\n/**\n * A layer that renders straight lines joining pairs of source and target coordinates.\n */\nexport default class LineLayer<DataT = any, ExtraProps extends {} = {}> extends Layer<\n  ExtraProps & Required<_LineLayerProps<DataT>>\n> {\n  static layerName = 'LineLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, source, modules: [project32, picking, lineUniforms]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}): void {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n    const model = this.state.model!;\n    const lineProps: LineProps = {\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude ? 1 : 0\n    };\n    model.shaderInputs.setProps({line: lineProps});\n    model.draw(this.context.renderPass);\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      model.shaderInputs.setProps({line: {...lineProps, useShortestPath: -1}});\n      model.draw(this.context.renderPass);\n    }\n  }\n\n  protected _getModel(): Model {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../../module-injectors';\nimport {assert} from '../utils/assert';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  vertex: MODULE_INJECTORS_VS,\n  fragment: MODULE_INJECTORS_FS\n};\n\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments: string[] = [];\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\n\n/**\n *\n */\nexport type ShaderInjection = {\n  injection: string;\n  order: number;\n};\n\n/**\n *  ShaderInjections, parsed and split per shader\n */\nexport type ShaderInjections = {\n  vertex: Record<string, ShaderInjection>;\n  fragment: Record<string, ShaderInjection>;\n};\n\n/**\n *\n */\nexport function normalizeInjections(\n  injections: Record<string, string | ShaderInjection>\n): ShaderInjections {\n  const result: ShaderInjections = {vertex: {}, fragment: {}};\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = getHookStage(hook);\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n\nfunction getHookStage(hook: string): 'vertex' | 'fragment' {\n  const type = hook.slice(0, 2);\n  switch (type) {\n    case 'vs':\n      return 'vertex';\n    case 'fs':\n      return 'fragment';\n    default:\n      throw new Error(type);\n  }\n}\n\n/**\n// A minimal shader injection/templating system.\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n * @param source \n * @param type \n * @param inject \n * @param injectStandardStubs \n * @returns \n */\n// eslint-disable-next-line complexity\nexport function injectShader(\n  source: string,\n  stage: 'vertex' | 'fragment',\n  inject: Record<string, ShaderInjection[]>,\n  injectStandardStubs = false\n): string {\n  const isVertex = stage === 'vertex';\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a: ShaderInjection, b: ShaderInjection): number => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, (match: string) => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, (match: string) => fragmentString + match);\n        }\n        break;\n      // declarations are injected before the main function\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, (match: string) => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, (match: string) => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, (match: string) => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, (match: string) => match + MODULE_INJECTORS[stage]);\n  }\n\n  return source;\n}\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects: any[]): Record<string, string> {\n  const result: Record<string, string> = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// TRANSPILATION TABLES\n\n/**\n * Transpiles GLSL 3.00 shader source code to target GLSL version (3.00 or 1.00)\n *\n * @note We always run transpiler even if same version e.g. 3.00 => 3.00\n * @note For texture sampling transpilation, apps need to use non-standard texture* calls in GLSL 3.00 source\n * RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\n */\nexport function transpileGLSLShader(source: string, stage: 'vertex' | 'fragment'): string {\n  const sourceGLSLVersion = Number(source.match(/^#version[ \\t]+(\\d+)/m)?.[1] || 100);\n  if (sourceGLSLVersion !== 300) {\n    // TODO - we splurge on a longer error message to help deck.gl custom layer developers\n    throw new Error('luma.gl v9 only supports GLSL 3.00 shader sources');\n  }\n\n  switch (stage) {\n    case 'vertex':\n      source = convertShader(source, ES300_VERTEX_REPLACEMENTS);\n      return source;\n    case 'fragment':\n      source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);\n      return source;\n    default:\n      // Unknown shader stage\n      throw new Error(stage);\n  }\n}\n\ntype GLSLReplacement = [RegExp, string];\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_REPLACEMENTS: GLSLReplacement[] = [\n  // Fix poorly formatted version directive\n  [/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n'],\n  // The individual `texture...()` functions were replaced with `texture()` overloads\n  [/\\btexture(2D|2DProj|Cube)Lod(EXT)?\\(/g, 'textureLod('],\n  [/\\btexture(2D|2DProj|Cube)(EXT)?\\(/g, 'texture(']\n];\n\nconst ES300_VERTEX_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES300_REPLACEMENTS,\n  // `attribute` keyword replaced with `in`\n  [makeVariableTextRegExp('attribute'), 'in $1'],\n  // `varying` keyword replaced with `out`\n  [makeVariableTextRegExp('varying'), 'out $1']\n];\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_FRAGMENT_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES300_REPLACEMENTS,\n  // `varying` keyword replaced with `in`\n  [makeVariableTextRegExp('varying'), 'in $1']\n];\n\nfunction convertShader(source: string, replacements: GLSLReplacement[]) {\n  for (const [pattern, replacement] of replacements) {\n    source = source.replace(pattern, replacement);\n  }\n  return source;\n}\n\n/**\n * Creates a regexp that tests for a specific variable type\n * @example\n *   should match:\n *     in float weight;\n *     out vec4 positions[2];\n *   should not match:\n *     void f(out float a, in float b) {}\n */\nfunction makeVariableTextRegExp(qualifier: 'attribute' | 'varying' | 'in' | 'out'): RegExp {\n  return new RegExp(`\\\\b${qualifier}[ \\\\t]+(\\\\w+[ \\\\t]+\\\\w+(\\\\[\\\\w+\\\\])?;)`, 'g');\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {getShaderModuleDependencies} from '../shader-module/shader-module-dependencies';\nimport {PlatformInfo} from './platform-info';\nimport {getPlatformShaderDefines} from './platform-defines';\nimport {injectShader, DECLARATION_INJECT_MARKER} from './shader-injections';\nimport {transpileGLSLShader} from '../shader-transpiler/transpile-glsl-shader';\nimport {checkShaderModuleDeprecations} from '../shader-module/shader-module';\nimport type {ShaderInjection} from './shader-injections';\nimport type {ShaderModule} from '../shader-module/shader-module';\nimport {ShaderHook, normalizeShaderHooks, getShaderHooks} from './shader-hooks';\nimport {assert} from '../utils/assert';\nimport {getShaderInfo} from '../glsl-utils/get-shader-info';\n\n/** Define map */\nexport type ShaderDefine = string | number | boolean;\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n`;\n\n/**\n * Precision prologue to inject before functions are injected in shader\n * TODO - extract any existing prologue in the fragment source and move it up...\n */\nconst FRAGMENT_SHADER_PROLOGUE = /* glsl */ `\\\nprecision highp float;\n`;\n\n/**\n * Options for `ShaderAssembler.assembleShaders()`\n */\nexport type AssembleShaderProps = AssembleShaderOptions & {\n  platformInfo: PlatformInfo;\n  /** WGSL: single shader source. */\n  source?: string | null;\n  /** GLSL vertex shader source. */\n  vs?: string | null;\n  /** GLSL fragment shader source. */\n  fs?: string | null;\n};\n\nexport type AssembleShaderOptions = {\n  /** information about the platform (which shader language & version, extensions etc.) */\n  platformInfo: PlatformInfo;\n  /** Inject shader id #defines */\n  id?: string;\n  /** Modules to be injected */\n  modules?: ShaderModule[];\n  /** Defines to be injected */\n  defines?: Record<string, ShaderDefine>;\n  /** Hook functions */\n  hookFunctions?: (ShaderHook | string)[];\n  /** Code injections */\n  inject?: Record<string, string | ShaderInjection>;\n  /** Whether to inject prologue */\n  prologue?: boolean;\n  /** logger object */\n  log?: any;\n};\n\ntype AssembleStageOptions = {\n  /** Inject shader id #defines */\n  id?: string;\n  /** Vertex shader */\n  source: string;\n  stage: 'vertex' | 'fragment';\n  /** Modules to be injected */\n  modules: any[];\n  /** Defines to be injected */\n  defines?: Record<string, ShaderDefine>;\n  /** Hook functions */\n  hookFunctions?: (ShaderHook | string)[];\n  /** Code injections */\n  inject?: Record<string, string | ShaderInjection>;\n  /** Whether to inject prologue */\n  prologue?: boolean;\n  /** logger object */\n  log?: any;\n};\n\nexport type HookFunction = {hook: string; header: string; footer: string; signature?: string};\n\n/**\n * getUniforms function returned from the shader module system\n */\nexport type GetUniformsFunc = (opts: Record<string, any>) => Record<string, any>;\n\n/**\n * Inject a list of shader modules into a single shader source for WGSL\n */\nexport function assembleWGSLShader(\n  options: AssembleShaderOptions & {\n    /** Single WGSL shader */\n    source: string;\n  }\n): {\n  source: string;\n  getUniforms: GetUniformsFunc;\n} {\n  const modules = getShaderModuleDependencies(options.modules || []);\n\n  return {\n    source: assembleShaderWGSL(options.platformInfo, {\n      ...options,\n      source: options.source,\n      stage: 'vertex',\n      modules\n    }),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\n/**\n * Injects dependent shader module sources into pair of main vertex/fragment shader sources for GLSL\n */\nexport function assembleGLSLShaderPair(\n  options: AssembleShaderOptions & {\n    /** Vertex shader */\n    vs: string;\n    /** Fragment shader */\n    fs?: string;\n  }\n): {\n  vs: string;\n  fs: string;\n  getUniforms: GetUniformsFunc;\n} {\n  const {vs, fs} = options;\n  const modules = getShaderModuleDependencies(options.modules || []);\n\n  return {\n    vs: assembleShaderGLSL(options.platformInfo, {\n      ...options,\n      source: vs,\n      stage: 'vertex',\n      modules\n    }),\n    fs: assembleShaderGLSL(options.platformInfo, {\n      ...options,\n      // @ts-expect-error\n      source: fs,\n      stage: 'fragment',\n      modules\n    }),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\n/**\n * Pulls together complete source code for either a vertex or a fragment shader\n * adding prologues, requested module chunks, and any final injections.\n * @param gl\n * @param options\n * @returns\n */\nexport function assembleShaderWGSL(platformInfo: PlatformInfo, options: AssembleStageOptions) {\n  const {\n    // id,\n    source,\n    stage,\n    modules,\n    // defines = {},\n    hookFunctions = [],\n    inject = {},\n    log\n  } = options;\n\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  // const isVertex = type === 'vs';\n  // const sourceLines = source.split('\\n');\n\n  const coreSource = source;\n\n  // Combine Module and Application Defines\n  // const allDefines = {};\n  // modules.forEach(module => {\n  //   Object.assign(allDefines, module.getDefines());\n  // });\n  // Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = '';\n  //   prologue\n  //     ? `\\\n  // ${getShaderNameDefine({id, source, type})}\n  // ${getShaderType(type)}\n  // ${getPlatformShaderDefines(platformInfo)}\n  // ${getApplicationDefines(allDefines)}\n  // ${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n  // `\n  // `;\n\n  const hookFunctionMap = normalizeShaderHooks(hookFunctions);\n\n  // Add source of dependent modules in resolved order\n  const hookInjections: Record<string, ShaderInjection[]> = {};\n  const declInjections: Record<string, ShaderInjection[]> = {};\n  const mainInjections: Record<string, ShaderInjection[]> = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    const match = /^(v|f)s:(#)?([\\w-]+)$/.exec(key);\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection as any];\n        } else {\n          mainInjections[key] = [injection as any];\n        }\n      } else {\n        hookInjections[key] = [injection as any];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection as any];\n    }\n  }\n\n  // TODO - hack until shadertool modules support WebGPU\n  const modulesToInject = modules;\n\n  for (const module of modulesToInject) {\n    if (log) {\n      checkShaderModuleDeprecations(module, coreSource, log);\n    }\n    const moduleSource = getShaderModuleSource(module, 'wgsl');\n    // Add the module source, and a #define that declares it presence\n    assembledSource += moduleSource;\n\n    const injections = module.injections?.[stage] || {};\n    for (const key in injections) {\n      const match = /^(v|f)s:#([\\w-]+)$/.exec(key);\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource = injectShader(assembledSource, stage, declInjections);\n\n  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, stage, mainInjections);\n\n  return assembledSource;\n}\n\n/**\n * Pulls together complete source code for either a vertex or a fragment shader\n * adding prologues, requested module chunks, and any final injections.\n * @param gl\n * @param options\n * @returns\n */\nfunction assembleShaderGLSL(\n  platformInfo: PlatformInfo,\n  options: {\n    id?: string;\n    source: string;\n    language?: 'glsl' | 'wgsl';\n    stage: 'vertex' | 'fragment';\n    modules: ShaderModule[];\n    defines?: Record<string, ShaderDefine>;\n    hookFunctions?: any[];\n    inject?: Record<string, string | ShaderInjection>;\n    prologue?: boolean;\n    log?: any;\n  }\n) {\n  const {\n    id,\n    source,\n    stage,\n    language = 'glsl',\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    prologue = true,\n    log\n  } = options;\n\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const sourceVersion = language === 'glsl' ? getShaderInfo(source).version : -1;\n  const targetVersion = platformInfo.shaderLanguageVersion;\n\n  const sourceVersionDirective = sourceVersion === 100 ? '#version 100' : '#version 300 es';\n\n  const sourceLines = source.split('\\n');\n  // TODO : keep all pre-processor statements at the beginning of the shader.\n  const coreSource = sourceLines.slice(1).join('\\n');\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.defines);\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = '';\n  switch (language) {\n    case 'wgsl':\n      break;\n    case 'glsl':\n      assembledSource = prologue\n        ? `\\\n${sourceVersionDirective}\n\n// ----- PROLOGUE -------------------------\n${getShaderNameDefine({id, source, stage})}\n${`#define SHADER_TYPE_${stage.toUpperCase()}`}\n\n${getPlatformShaderDefines(platformInfo)}\n${stage === 'fragment' ? FRAGMENT_SHADER_PROLOGUE : ''}\n\n// ----- APPLICATION DEFINES -------------------------\n\n${getApplicationDefines(allDefines)}\n\n`\n        : `${sourceVersionDirective}\n`;\n      break;\n  }\n\n  const hookFunctionMap = normalizeShaderHooks(hookFunctions);\n\n  // Add source of dependent modules in resolved order\n  const hookInjections: Record<string, ShaderInjection[]> = {};\n  const declInjections: Record<string, ShaderInjection[]> = {};\n  const mainInjections: Record<string, ShaderInjection[]> = {};\n\n  for (const key in inject) {\n    const injection: ShaderInjection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    const match = /^(v|f)s:(#)?([\\w-]+)$/.exec(key);\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    if (log) {\n      checkShaderModuleDeprecations(module, coreSource, log);\n    }\n    const moduleSource = getShaderModuleSource(module, stage);\n    // Add the module source, and a #define that declares it presence\n    assembledSource += moduleSource;\n\n    const injections = module.instance?.normalizedInjections[stage] || {};\n    for (const key in injections) {\n      const match = /^(v|f)s:#([\\w-]+)$/.exec(key);\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  assembledSource += '// ----- MAIN SHADER SOURCE -------------------------';\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource = injectShader(assembledSource, stage, declInjections);\n\n  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, stage, mainInjections);\n\n  if (language === 'glsl' && sourceVersion !== targetVersion) {\n    assembledSource = transpileGLSLShader(assembledSource, stage);\n  }\n\n  return assembledSource.trim();\n}\n\n/**\n * Returns a combined `getUniforms` covering the options for all the modules,\n * the created function will pass on options to the inidividual `getUniforms`\n * function of each shader module and combine the results into one object that\n * can be passed to setUniforms.\n * @param modules\n * @returns\n */\nexport function assembleGetUniforms(modules: ShaderModule[]) {\n  return function getUniforms(opts: Record<string, any>): Record<string, any> {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms?.(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\n/**\n * Generate \"glslify-compatible\" SHADER_NAME defines\n * These are understood by the GLSL error parsing function\n * If id is provided and no SHADER_NAME constant is present in source, create one\n */\nfunction getShaderNameDefine(options: {\n  id?: string;\n  source: string;\n  stage: 'vertex' | 'fragment';\n}): string {\n  const {id, source, stage} = options;\n  const injectShaderName = id && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${stage}`\n    : '';\n}\n\n/** Generates application defines from an object of key value pairs */\nfunction getApplicationDefines(defines: Record<string, ShaderDefine> = {}): string {\n  let sourceText = '';\n  for (const define in defines) {\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  return sourceText;\n}\n\n/** Extracts the source code chunk for the specified shader type from the named shader module */\nexport function getShaderModuleSource(\n  module: ShaderModule,\n  stage: 'vertex' | 'fragment' | 'wgsl'\n): string {\n  let moduleSource;\n  switch (stage) {\n    case 'vertex':\n      moduleSource = module.vs || '';\n      break;\n    case 'fragment':\n      moduleSource = module.fs || '';\n      break;\n    case 'wgsl':\n      moduleSource = module.source || '';\n      break;\n    default:\n      assert(false);\n  }\n\n  if (!module.name) {\n    throw new Error('Shader module must have a name');\n  }\n  const moduleName = module.name.toUpperCase().replace(/[^0-9a-z]/gi, '_');\n  let source = `\\\n// ----- MODULE ${module.name} ---------------\n\n`;\n  if (stage !== 'wgsl') {\n    source += `#define MODULE_${moduleName}\\n`;\n  }\n  source += `${moduleSource}\\n`;\n  return source;\n}\n\n/*\nfunction getHookFunctions(\n  hookFunctions: Record<string, HookFunction>,\n  hookInjections: Record<string, Injection[]>\n): string {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a: {order: number}, b: {order: number}): number => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n\nfunction normalizeHookFunctions(hookFunctions: (string | HookFunction)[]): {\n  vs: Record<string, HookFunction>;\n  fs: Record<string, HookFunction>;\n} {\n  const result: {vs: Record<string, any>; fs: Record<string, any>} = {\n    vs: {},\n    fs: {}\n  };\n\n  hookFunctions.forEach((hookFunction: string | HookFunction) => {\n    let opts: HookFunction;\n    let hook: string;\n    if (typeof hookFunction !== 'string') {\n      opts = hookFunction;\n      hook = opts.hook;\n    } else {\n      opts = {} as HookFunction;\n      hook = hookFunction;\n    }\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    if (stage !== 'vs' && stage !== 'fs') {\n      throw new Error(stage);\n    }\n    result[stage][name] = Object.assign(opts, {signature});\n  });\n\n  return result;\n}\n*/\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst FS_GLES = /* glsl */ `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\ntype QualifierInfo = {\n  qualifier: string;\n  type: string;\n  name: string;\n};\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(\n  line: string,\n  qualifiers: string | string[]\n): QualifierInfo | null {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n/**\n * Given the shader input and output variable names,\n * builds and return a pass through fragment shader.\n */\nexport function getPassthroughFS(options?: {\n  input?: string;\n  inputChannels?: 1 | 2 | 3 | 4;\n  output?: string;\n}): string {\n  const {input, inputChannels, output} = options || {};\n  if (!input) {\n    // Default shader\n    return FS300;\n  }\n  if (!inputChannels) {\n    throw new Error('inputChannels');\n  }\n  const inputType = channelCountToType(inputChannels);\n  const outputValue = convertToVec4(input, inputChannels);\n  return `\\\n#version 300 es\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n}\n\n/** convert glsl type to suffix */\nexport function typeToChannelSuffix(type: string): 'x' | 'xy' | 'xyz' | 'xyzw' {\n  // prettier-ignore\n  switch (type) {\n    case 'float': return 'x';\n    case 'vec2': return 'xy';\n    case 'vec3': return 'xyz';\n    case 'vec4': return 'xyzw';\n    default:\n      throw new Error(type);\n  }\n}\n\n/** convert glsl type to channel count */\nexport function typeToChannelCount(type: string): 1 | 2 | 3 | 4 {\n  // prettier-ignore\n  switch (type) {\n    case 'float': return 1;\n    case 'vec2': return 2;\n    case 'vec3': return 3;\n    case 'vec4': return 4;\n    default:\n      throw new Error(type);\n  }\n}\nfunction channelCountToType(channels: 1 | 2 | 3 | 4): 'float' | 'vec2' | 'vec3' | 'vec4' {\n  // prettier-ignore\n  switch (channels) {\n    case 1: return 'float';\n    case 2: return 'vec2';\n    case 3: return 'vec3';\n    case 4: return 'vec4';\n    default:\n      throw new Error(`invalid channels: ${channels}`);\n  }\n}\n\n/** Returns glsl instruction for converting to vec4 */\nexport function convertToVec4(variable: string, channels: 1 | 2 | 3 | 4): string {\n  // prettier-ignore\n  switch (channels) {\n    case 1: return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 2: return `vec4(${variable}, 0.0, 1.0)`;\n    case 3: return `vec4(${variable}, 1.0)`;\n    case 4: return variable;\n    default:\n      throw new Error(`invalid channels: ${channels}`);\n  }\n}\n", "import { Attribute } from \"../wgsl_ast.js\";\r\n\r\nexport class TypeInfo {\r\n  name: string;\r\n  attributes: Attribute[] | null;\r\n  size: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.attributes = attributes;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nexport class MemberInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n  offset: number;\r\n  size: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.offset = 0;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class StructInfo extends TypeInfo {\r\n  members: MemberInfo[] = [];\r\n  align: number = 0;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class ArrayInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  count: number;\r\n  stride: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.count = 0;\r\n    this.stride = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `array<${this.format.getTypeName()}, ${this.count}>`;\r\n  }\r\n}\r\n\r\nexport class PointerInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  constructor(name: string, format: TypeInfo, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `&${this.format.getTypeName()}`;\r\n  }\r\n}\r\n\r\nexport class TemplateInfo extends TypeInfo {\r\n  format: TypeInfo | null;\r\n  access: string;\r\n  constructor(\r\n    name: string,\r\n    format: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    access: string\r\n  ) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n}\r\n\r\nexport enum ResourceType {\r\n  Uniform,\r\n  Storage,\r\n  Texture,\r\n  Sampler,\r\n  StorageTexture,\r\n}\r\n\r\nexport class VariableInfo {\r\n  attributes: Attribute[] | null;\r\n  name: string;\r\n  type: TypeInfo;\r\n  group: number;\r\n  binding: number;\r\n  resourceType: ResourceType;\r\n  access: string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    group: number,\r\n    binding: number,\r\n    attributes: Attribute[] | null,\r\n    resourceType: ResourceType,\r\n    access: string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.group = group;\r\n    this.binding = binding;\r\n    this.attributes = attributes;\r\n    this.resourceType = resourceType;\r\n    this.access = access;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.type.size;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class AliasInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n\r\n  constructor(name: string, type: TypeInfo) {\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport class InputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n  interpolation: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n    this.interpolation = null;\r\n  }\r\n}\r\n\r\nexport class OutputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n  }\r\n}\r\n\r\nexport class OverrideInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  attributes: Attribute[] | null;\r\n  id: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    id: number\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class ArgumentInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class FunctionInfo {\r\n  name: string;\r\n  stage: string | null = null;\r\n  inputs: InputInfo[] = [];\r\n  outputs: OutputInfo[] = [];\r\n  arguments: ArgumentInfo[] = [];\r\n  returnType: TypeInfo | null = null;\r\n  resources: VariableInfo[] = [];\r\n  overrides: OverrideInfo[] = [];\r\n  attributes: Attribute[] | null;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n  calls: Set<FunctionInfo> = new Set();\r\n\r\n  constructor(name: string, stage: string | null = null, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.stage = stage;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class EntryFunctions {\r\n  vertex: FunctionInfo[] = [];\r\n  fragment: FunctionInfo[] = [];\r\n  compute: FunctionInfo[] = [];\r\n}\r\n", "// From https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\r\nexport function float16ToFloat32(float16: number): number {\r\n    var s = (float16 & 0x8000) >> 15;\r\n    var e = (float16 & 0x7C00) >> 10;\r\n    var f = float16 & 0x03FF;\r\n\r\n    if (e == 0) {\r\n      return (s ? -1:1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n    } else if (e == 0x1F) {\r\n      return f ? NaN : ((s ? -1 : 1) * Infinity);\r\n    }\r\n\r\n    return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + (f / Math.pow(2, 10)));\r\n}\r\n\r\nconst float32View = new Float32Array(1);\r\nconst int32View = new Int32Array(float32View.buffer);\r\nconst float16View = new Uint16Array(1);\r\n\r\nexport function float32ToFloat16(float32: number): number {\r\n  float32View[0] = float32;\r\n\r\n  const f32 = int32View[0];\r\n  const sign = (f32 >> 31) & 1;\r\n  let exponent = (f32 >> 23) & 0xff;\r\n  let fraction = f32 & 0x7fffff;\r\n\r\n  if (exponent === 0xff) { // Infinity or NaN\r\n    float16View[0] = (sign << 15) | 0x7c00 | (fraction !== 0 ? 0x0200 : 0);\r\n    return float16View[0];\r\n  }\r\n\r\n  if (exponent === 0) { // Zero or subnormal\r\n    if (fraction === 0) { // Zero\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    // Subnormal\r\n    fraction |= 0x800000;\r\n    let shift = 113;\r\n    while ((fraction & 0x800000) === 0) {\r\n      fraction <<= 1;\r\n      shift--;\r\n    }\r\n    exponent = 127 - shift;\r\n    fraction &= 0x7fffff;\r\n    if (exponent > 0) {\r\n      fraction = (fraction >> (126 - exponent)) + ((fraction >> (127 - exponent)) & 1);\r\n      float16View[0] = (sign << 15) | (exponent << 10) | (fraction >> 13);\r\n      return float16View[0];\r\n    } else {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n  }\r\n\r\n  // Normalized\r\n  exponent = exponent - 127 + 15;\r\n  if (exponent >= 31) { // Overflow\r\n    float16View[0] = (sign << 15) | 0x7c00;\r\n    return float16View[0];\r\n  }\r\n  if (exponent <= 0) { // Underflow\r\n    if (exponent < -10) {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    fraction = (fraction | 0x800000) >> (1 - exponent);\r\n    float16View[0] = (sign << 15) | (fraction >> 13);\r\n    return float16View[0];\r\n  }\r\n\r\n  fraction = fraction >> 13;\r\n  float16View[0] = (sign << 15) | (exponent << 10) | fraction;\r\n  return float16View[0];\r\n}\r\n\r\nconst uint32 = new Uint32Array(1);\r\nconst uint32ToFloat32 = new Float32Array(uint32.buffer, 0, 1);\r\n\r\nexport function float11ToFloat32(f11: number): number {\r\n  const u32 = (((((f11) >> 6) & 0x1F) + (127 - 15)) << 23) | (((f11) & 0x3F) << 17);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n\r\nexport function float10ToFloat32(f10: number): number {\r\n  const u32 = (((((f10) >> 5) & 0x1F) + (127 - 15)) << 23) | (((f10) & 0x1F) << 18);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n", "import { float16ToFloat32, float32ToFloat16, float10ToFloat32, float11ToFloat32 } from \"./float.js\";\r\n\r\nexport function setTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string, value: number[]): void {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 1, value);\r\n            return;\r\n        }\r\n        case \"rg32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 2, value);\r\n            return;\r\n        }\r\n        case \"rgba32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            console.error(\"TODO: rg11b10ufloat not supported for writing\");\r\n            /*const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];*/\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string): number[] | null {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[2], value[1], value[0], value[3]];\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"rg32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rgba32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction pixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number) {\r\n    const value = [0, 0, 0, 0];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          value[i] = imageData[offset] / 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          value[i] = (imageData[offset] / 255) * 2 - 1;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          value[i] = imageData[offset];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          value[i] = imageData[offset] - 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8);\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8)) - 32768;\r\n          offset += 2;\r\n          break;\r\n        case \"16float\":\r\n          value[i] = float16ToFloat32(imageData[offset] | (imageData[offset + 1] << 8));\r\n          offset += 2;\r\n          break;\r\n        case \"32uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24);\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24)) | 0;\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          value[i] = new Float32Array(imageData.buffer, offset, 1)[0];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction setPixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number, value: number[]) {\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          imageData[offset] = value[i] * 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          imageData[offset] = ((value[i] + 1.0) * 0.5) * 255;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          imageData[offset] = value[i];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          imageData[offset] = value[i] + 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          new Int16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16float\": {\r\n          const f16 = float32ToFloat16(value[i]);\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = f16;\r\n          offset += 2;\r\n          break;\r\n        }\r\n        case \"32uint\":\r\n          new Uint32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          new Int32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          new Float32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n", "\r\nexport const TextureFormatInfo = {\r\n    \"r8unorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8snorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8uint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8sint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"rg8unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8snorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8snorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r16uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16float\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg16uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba16uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r32uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg32uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba32uint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32sint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32float\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rg11b10ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Depth Stencil Formats\r\n    \"stencil8\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": false, \"hasStencil\": true, \"channels\": 1 }, // bytesPerBlock is actually 1-4\r\n    \"depth16unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth24plus\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 },\r\n    \"depth24plus-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 4-8\r\n    \"depth32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth32float-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"stencilOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 5-8\r\n\r\n    // Packed Formats\r\n    \"rgb9e5ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Compressed Formats\r\n    \"bc1-rgba-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc1-rgba-unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n\r\n    \"bc4-r-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n    \"bc4-r-snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"bc5-rg-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n    \"bc5-rg-snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"bc6h-rgb-ufloat\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc6h-rgb-float\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"etc2-rgb8unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"eac-r11unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n    \"eac-r11snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"eac-rg11unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n    \"eac-rg11snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"astc-4x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-4x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n};\r\n", "import { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TypeInfo, PointerInfo, TemplateInfo, ArrayInfo, StructInfo } from \"./reflect/info.js\";\r\nimport { ExecContext } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { setTexturePixel, getTexturePixel } from \"./utils/texture_sample.js\";\r\nimport { TextureFormatInfo } from \"./utils/texture_format_info.js\";\r\n\r\n/**\r\n * @class Node\r\n * @category AST\r\n * Base class for AST nodes parsed from a WGSL shader.\r\n */\r\nexport class Node {\r\n  static _id = 0;\r\n\r\n  id: number;\r\n  line: number;\r\n\r\n  constructor() {\r\n    this.id = Node._id++;\r\n    this.line = 0;\r\n  }\r\n\r\n  get isAstNode(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n  }\r\n\r\n  searchBlock(block: Node[] | null, callback: (node: Node) => void): void {\r\n    if (block) {\r\n      callback(_BlockStart.instance);\r\n      for (const node of block) {\r\n        if (node instanceof Array) {\r\n          this.searchBlock(node as Node[], callback);\r\n        } else {\r\n          node.search(callback);\r\n        }\r\n      }\r\n      callback(_BlockEnd.instance);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    throw new Error(\"Cannot evaluate node\");\r\n  }\r\n\r\n  constEvaluateString(context: WgslExec): string {\r\n    return this.constEvaluate(context).toString();\r\n  } \r\n}\r\n\r\n// For internal use only\r\nexport class _BlockStart extends Node {\r\n  static instance = new _BlockStart();\r\n}\r\n\r\n // For internal use only\r\nexport class _BlockEnd extends Node {\r\n  static instance = new _BlockEnd();\r\n}\r\n\r\nconst BuiltinFunctionNames = new Set([\r\n  \"all\",\r\n  \"all\",\r\n  \"any\",\r\n  \"select\",\r\n  \"arrayLength\",\r\n  \"abs\",\r\n  \"acos\",\r\n  \"acosh\",\r\n  \"asin\",\r\n  \"asinh\",\r\n  \"atan\",\r\n  \"atanh\",\r\n  \"atan2\",\r\n  \"ceil\",\r\n  \"clamp\",\r\n  \"cos\",\r\n  \"cosh\",\r\n  \"countLeadingZeros\",\r\n  \"countOneBits\",\r\n  \"countTrailingZeros\",\r\n  \"cross\",\r\n  \"degrees\",\r\n  \"determinant\",\r\n  \"distance\",\r\n  \"dot\",\r\n  \"dot4U8Packed\",\r\n  \"dot4I8Packed\",\r\n  \"exp\",\r\n  \"exp2\",\r\n  \"extractBits\",\r\n  \"faceForward\",\r\n  \"firstLeadingBit\",\r\n  \"firstTrailingBit\",\r\n  \"floor\",\r\n  \"fma\",\r\n  \"fract\",\r\n  \"frexp\",\r\n  \"insertBits\",\r\n  \"inverseSqrt\",\r\n  \"ldexp\",\r\n  \"length\",\r\n  \"log\",\r\n  \"log2\",\r\n  \"max\",\r\n  \"min\",\r\n  \"mix\",\r\n  \"modf\",\r\n  \"normalize\",\r\n  \"pow\",\r\n  \"quantizeToF16\",\r\n  \"radians\",\r\n  \"reflect\",\r\n  \"refract\",\r\n  \"reverseBits\",\r\n  \"round\",\r\n  \"saturate\",\r\n  \"sign\",\r\n  \"sin\",\r\n  \"sinh\",\r\n  \"smoothStep\",\r\n  \"sqrt\",\r\n  \"step\",\r\n  \"tan\",\r\n  \"tanh\",\r\n  \"transpose\",\r\n  \"trunc\",\r\n  \"dpdx\",\r\n  \"dpdxCoarse\",\r\n  \"dpdxFine\",\r\n  \"dpdy\",\r\n  \"dpdyCoarse\",\r\n  \"dpdyFine\",\r\n  \"fwidth\",\r\n  \"fwidthCoarse\",\r\n  \"fwidthFine\",\r\n  \"textureDimensions\",\r\n  \"textureGather\",\r\n  \"textureGatherCompare\",\r\n  \"textureLoad\",\r\n  \"textureNumLayers\",\r\n  \"textureNumLevels\",\r\n  \"textureNumSamples\",\r\n  \"textureSample\",\r\n  \"textureSampleBias\",\r\n  \"textureSampleCompare\",\r\n  \"textureSampleCompareLevel\",\r\n  \"textureSampleGrad\",\r\n  \"textureSampleLevel\",\r\n  \"textureSampleBaseClampToEdge\",\r\n  \"textureStore\",\r\n  \"atomicLoad\",\r\n  \"atomicStore\",\r\n  \"atomicAdd\",\r\n  \"atomicSub\",\r\n  \"atomicMax\",\r\n  \"atomicMin\",\r\n  \"atomicAnd\",\r\n  \"atomicOr\",\r\n  \"atomicXor\",\r\n  \"atomicExchange\",\r\n  \"atomicCompareExchangeWeak\",\r\n  \"pack4x8snorm\",\r\n  \"pack4x8unorm\",\r\n  \"pack4xI8\",\r\n  \"pack4xU8\",\r\n  \"pack4x8Clamp\",\r\n  \"pack4xU8Clamp\",\r\n  \"pack2x16snorm\",\r\n  \"pack2x16unorm\",\r\n  \"pack2x16float\",\r\n  \"unpack4x8snorm\",\r\n  \"unpack4x8unorm\",\r\n  \"unpack4xI8\",\r\n  \"unpack4xU8\",\r\n  \"unpack2x16snorm\",\r\n  \"unpack2x16unorm\",\r\n  \"unpack2x16float\",\r\n  \"storageBarrier\",\r\n  \"textureBarrier\",\r\n  \"workgroupBarrier\",\r\n  \"workgroupUniformLoad\",\r\n  \"subgroupAdd\",\r\n  \"subgroupExclusiveAdd\",\r\n  \"subgroupInclusiveAdd\",\r\n  \"subgroupAll\",\r\n  \"subgroupAnd\",\r\n  \"subgroupAny\",\r\n  \"subgroupBallot\",\r\n  \"subgroupBroadcast\",\r\n  \"subgroupBroadcastFirst\",\r\n  \"subgroupElect\",\r\n  \"subgroupMax\",\r\n  \"subgroupMin\",\r\n  \"subgroupMul\",\r\n  \"subgroupExclusiveMul\",\r\n  \"subgroupInclusiveMul\",\r\n  \"subgroupOr\",\r\n  \"subgroupShuffle\",\r\n  \"subgroupShuffleDown\",\r\n  \"subgroupShuffleUp\",\r\n  \"subgroupShuffleXor\",\r\n  \"subgroupXor\",\r\n  \"quadBroadcast\",\r\n  \"quadSwapDiagonal\",\r\n  \"quadSwapX\",\r\n  \"quadSwapY\",\r\n]);\r\n\r\n/**\r\n * @class Statement\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Statement extends Node {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class Function\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Function extends Statement {\r\n  name: string;\r\n  args: Argument[];\r\n  returnType: Type | null;\r\n  body: Statement[];\r\n  attributes: Attribute[] | null;\r\n  startLine: number;\r\n  endLine: number;\r\n  calls: Set<Function> = new Set();\r\n\r\n  constructor(\r\n    name: string,\r\n    args: Argument[],\r\n    returnType: Type | null,\r\n    body: Statement[],\r\n    startLine: number,\r\n    endLine: number\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n    this.returnType = returnType;\r\n    this.body = body;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"function\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    if (this.attributes) {\r\n      for (const attr of this.attributes) {\r\n        callback(attr);\r\n      }\r\n    }\r\n    callback(this);\r\n    for (const arg of this.args) {\r\n      callback(arg);\r\n    }\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StaticAssert\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class StaticAssert extends Statement {\r\n  expression: Expression;\r\n\r\n  constructor(expression: Expression) {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"staticAssert\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.expression.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class While\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class While extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"while\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continuing\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continuing extends Statement {\r\n  body: Statement[];\r\n  loopId: number;\r\n\r\n  constructor(body: Statement[], loopId: number) {\r\n    super();\r\n    this.body = body;\r\n    this.loopId = loopId;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continuing\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class For\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class For extends Statement {\r\n  init: Statement | null;\r\n  condition: Expression | null;\r\n  increment: Statement | null;\r\n  body: Statement[];\r\n\r\n  constructor(\r\n    init: Statement | null,\r\n    condition: Expression | null,\r\n    increment: Statement | null,\r\n    body: Statement[]\r\n  ) {\r\n    super();\r\n    this.init = init;\r\n    this.condition = condition;\r\n    this.increment = increment;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"for\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.init?.search(callback);\r\n    this.condition?.search(callback);\r\n    this.increment?.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Var\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Var extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"var\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Override\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Override extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string, type: Type | null, value: Expression | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"override\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Let\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Let extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"let\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Const\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Const extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"const\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return this.value.constEvaluate(context, type);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\nexport enum IncrementOperator {\r\n  increment = \"++\",\r\n  decrement = \"--\",\r\n}\r\n\r\nexport namespace IncrementOperator {\r\n  export function parse(val: string): IncrementOperator {\r\n    const key = val as keyof typeof IncrementOperator;\r\n    if (key == \"parse\") throw new Error(\"Invalid value for IncrementOperator\");\r\n    return IncrementOperator[key];\r\n  }\r\n}\r\n\r\n/**\r\n * @class Increment\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Increment extends Statement {\r\n  operator: IncrementOperator;\r\n  variable: Expression;\r\n\r\n  constructor(operator: IncrementOperator, variable: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"increment\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n  }\r\n}\r\n\r\nexport enum AssignOperator {\r\n  assign = \"=\",\r\n  addAssign = \"+=\",\r\n  subtractAssin = \"-=\",\r\n  multiplyAssign = \"*=\",\r\n  divideAssign = \"/=\",\r\n  moduloAssign = \"%=\",\r\n  andAssign = \"&=\",\r\n  orAssign = \"|=\",\r\n  xorAssign = \"^=\",\r\n  shiftLeftAssign = \"<<=\",\r\n  shiftRightAssign = \">>=\",\r\n}\r\n\r\nexport namespace AssignOperator {\r\n  export function parse(val: string): AssignOperator {\r\n    const key = val as keyof typeof AssignOperator;\r\n    if (key == \"parse\") {\r\n      throw new Error(\"Invalid value for AssignOperator\");\r\n    }\r\n    //return AssignOperator[key];\r\n    return key as AssignOperator;\r\n  }\r\n}\r\n\r\n/**\r\n * @class Assign\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Assign extends Statement {\r\n  operator: AssignOperator;\r\n  variable: Expression;\r\n  value: Expression;\r\n\r\n  constructor(\r\n    operator: AssignOperator,\r\n    variable: Expression,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"assign\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Call\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Call extends Statement {\r\n  name: string;\r\n  args: Expression[];\r\n\r\n  constructor(name: string, args: Expression[]) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"call\";\r\n  }\r\n\r\n  isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Loop\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Loop extends Statement {\r\n  body: Statement[];\r\n  continuing: Continuing | null;\r\n\r\n  constructor(body: Statement[], continuing: Continuing | null) {\r\n    super();\r\n    this.body = body;\r\n    this.continuing = continuing;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"loop\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Switch\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Switch extends Statement {\r\n  condition: Expression;\r\n  cases: SwitchCase[];\r\n\r\n  constructor(condition: Expression, cases: SwitchCase[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.cases = cases;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"switch\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    for (const node of this.cases) {\r\n      node.search(callback);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class If\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class If extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n  elseif: ElseIf[] | null;\r\n  else: Statement[] | null;\r\n\r\n  constructor(\r\n    condition: Expression,\r\n    body: Statement[],\r\n    elseif: ElseIf[] | null,\r\n    _else: Statement[] | null\r\n  ) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.elseif = elseif;\r\n    this.else = _else;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"if\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n    this.searchBlock(this.elseif, callback);\r\n    this.searchBlock(this.else, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Return\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Return extends Statement {\r\n  value: Expression;\r\n\r\n  constructor(value: Expression) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"return\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Enable\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Enable extends Statement {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"enable\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Requires\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Requires extends Statement {\r\n  extensions: string[];\r\n\r\n  constructor(extensions: string[]) {\r\n    super();\r\n    this.extensions = extensions;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"requires\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Diagnostic\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Diagnostic extends Statement {\r\n  severity: string;\r\n  rule: string;\r\n\r\n  constructor(severity: string, rule: string) {\r\n    super();\r\n    this.severity = severity;\r\n    this.rule = rule;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"diagnostic\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Alias\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Alias extends Statement {\r\n  name: string;\r\n  type: Type;\r\n\r\n  constructor(name: string, type: Type) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"alias\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Discard\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Discard extends Statement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"discard\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Break\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Break extends Statement {\r\n  condition: Expression | null = null;\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"break\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continue\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continue extends Statement {\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continue\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Type\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Type extends Statement {\r\n  name: string;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"type\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  static x32 = new Type(\"x32\");\r\n  static f32 = new Type(\"f32\");\r\n  static i32 = new Type(\"i32\");\r\n  static u32 = new Type(\"u32\");\r\n  static f16 = new Type(\"f16\");\r\n  static bool = new Type(\"bool\");\r\n  static void = new Type(\"void\");\r\n\r\n  static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n\r\n  static maxFormatType(x: Type[]): Type {\r\n    let t = x[0];\r\n    if (t.name === \"f32\") {\r\n      return t;\r\n    }\r\n    for (let i = 1; i < x.length; ++i) {\r\n      const tv = Type._priority.get(t.name);\r\n      const xv = Type._priority.get(x[i].name);\r\n      if (xv < tv) {\r\n        t = x[i];\r\n      }\r\n    }\r\n\r\n    if (t.name === \"x32\") {\r\n      return Type.i32;\r\n    }\r\n\r\n    return t;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/**\r\n * @class ForwardType\r\n * @extends Type\r\n * @category AST\r\n * Internal type used as a placeholder for a type being used before it has been defined.\r\n */\r\nexport class ForwardType extends Type {\r\n  constructor(name: string) {\r\n    super(name);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StructType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class Struct extends Type {\r\n  members: Member[];\r\n  startLine: number;\r\n  endLine: number;\r\n\r\n  constructor(name: string, members: Member[], startLine: number, endLine: number) {\r\n    super(name);\r\n    this.members = members;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"struct\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /// Return the index of the member with the given name, or -1 if not found.\r\n  getMemberIndex(name: string): number {\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      if (this.members[i].name == name) return i;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const member of this.members) {\r\n      callback(member);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class TemplateType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class TemplateType extends Type {\r\n  format: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(name: string, format: Type | null, access: string | null) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"template\";\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n\r\n  static vec2f = new TemplateType(\"vec2\", Type.f32, null);\r\n  static vec3f = new TemplateType(\"vec3\", Type.f32, null);\r\n  static vec4f = new TemplateType(\"vec4\", Type.f32, null);\r\n  static vec2i = new TemplateType(\"vec2\", Type.i32, null);\r\n  static vec3i = new TemplateType(\"vec3\", Type.i32, null);\r\n  static vec4i = new TemplateType(\"vec4\", Type.i32, null);\r\n  static vec2u = new TemplateType(\"vec2\", Type.u32, null);\r\n  static vec3u = new TemplateType(\"vec3\", Type.u32, null);\r\n  static vec4u = new TemplateType(\"vec4\", Type.u32, null);\r\n  static vec2h = new TemplateType(\"vec2\", Type.f16, null);\r\n  static vec3h = new TemplateType(\"vec3\", Type.f16, null);\r\n  static vec4h = new TemplateType(\"vec4\", Type.f16, null);\r\n  static vec2b = new TemplateType(\"vec2\", Type.bool, null);\r\n  static vec3b = new TemplateType(\"vec3\", Type.bool, null);\r\n  static vec4b = new TemplateType(\"vec4\", Type.bool, null);\r\n\r\n  static mat2x2f = new TemplateType(\"mat2x2\", Type.f32, null);\r\n  static mat2x3f = new TemplateType(\"mat2x3\", Type.f32, null);\r\n  static mat2x4f = new TemplateType(\"mat2x4\", Type.f32, null);\r\n  static mat3x2f = new TemplateType(\"mat3x2\", Type.f32, null);\r\n  static mat3x3f = new TemplateType(\"mat3x3\", Type.f32, null);\r\n  static mat3x4f = new TemplateType(\"mat3x4\", Type.f32, null);\r\n  static mat4x2f = new TemplateType(\"mat4x2\", Type.f32, null);\r\n  static mat4x3f = new TemplateType(\"mat4x3\", Type.f32, null);\r\n  static mat4x4f = new TemplateType(\"mat4x4\", Type.f32, null);\r\n\r\n  static mat2x2h = new TemplateType(\"mat2x2\", Type.f16, null);\r\n  static mat2x3h = new TemplateType(\"mat2x3\", Type.f16, null);\r\n  static mat2x4h = new TemplateType(\"mat2x4\", Type.f16, null);\r\n  static mat3x2h = new TemplateType(\"mat3x2\", Type.f16, null);\r\n  static mat3x3h = new TemplateType(\"mat3x3\", Type.f16, null);\r\n  static mat3x4h = new TemplateType(\"mat3x4\", Type.f16, null);\r\n  static mat4x2h = new TemplateType(\"mat4x2\", Type.f16, null);\r\n  static mat4x3h = new TemplateType(\"mat4x3\", Type.f16, null);\r\n  static mat4x4h = new TemplateType(\"mat4x4\", Type.f16, null);\r\n\r\n  static mat2x2i = new TemplateType(\"mat2x2\", Type.i32, null);\r\n  static mat2x3i = new TemplateType(\"mat2x3\", Type.i32, null);\r\n  static mat2x4i = new TemplateType(\"mat2x4\", Type.i32, null);\r\n  static mat3x2i = new TemplateType(\"mat3x2\", Type.i32, null);\r\n  static mat3x3i = new TemplateType(\"mat3x3\", Type.i32, null);\r\n  static mat3x4i = new TemplateType(\"mat3x4\", Type.i32, null);\r\n  static mat4x2i = new TemplateType(\"mat4x2\", Type.i32, null);\r\n  static mat4x3i = new TemplateType(\"mat4x3\", Type.i32, null);\r\n  static mat4x4i = new TemplateType(\"mat4x4\", Type.i32, null);\r\n\r\n  static mat2x2u = new TemplateType(\"mat2x2\", Type.u32, null);\r\n  static mat2x3u = new TemplateType(\"mat2x3\", Type.u32, null);\r\n  static mat2x4u = new TemplateType(\"mat2x4\", Type.u32, null);\r\n  static mat3x2u = new TemplateType(\"mat3x2\", Type.u32, null);\r\n  static mat3x3u = new TemplateType(\"mat3x3\", Type.u32, null);\r\n  static mat3x4u = new TemplateType(\"mat3x4\", Type.u32, null);\r\n  static mat4x2u = new TemplateType(\"mat4x2\", Type.u32, null);\r\n  static mat4x3u = new TemplateType(\"mat4x3\", Type.u32, null);\r\n  static mat4x4u = new TemplateType(\"mat4x4\", Type.u32, null);\r\n}\r\n\r\n/**\r\n * @class PointerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class PointerType extends Type {\r\n  storage: string;\r\n  type: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    storage: string,\r\n    type: Type | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.storage = storage;\r\n    this.type = type;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"pointer\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class ArrayType extends Type {\r\n  attributes: Attribute[] | null;\r\n  format: Type | null;\r\n  count: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    attributes: Attribute[] | null,\r\n    format: Type | null,\r\n    count: number\r\n  ) {\r\n    super(name);\r\n    this.attributes = attributes;\r\n    this.format = format;\r\n    this.count = count;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"array\";\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @class SamplerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class SamplerType extends Type {\r\n  format: Type | string | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    format: Type | string | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"sampler\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Expression\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Expression extends Node {\r\n  postfix: Expression | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class StringExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class StringExpr extends Expression {\r\n  value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"stringExpr\";\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  constEvaluateString(): string {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @class CreateExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CreateExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"createExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    if (this.args) {\r\n      for (const node of this.args) {\r\n        node.search(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type) {\r\n      type[0] = this.type;\r\n    }\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class CallExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CallExpr extends Expression {\r\n  name: string;\r\n  args: Expression[] | null;\r\n  cachedReturnValue: any = null;\r\n\r\n  constructor(name: string, args: Expression[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"callExpr\";\r\n  }\r\n\r\n  setCachedReturnValue(value: any): void {\r\n    this.cachedReturnValue = value;\r\n  }\r\n\r\n  get isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class VariableExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class VariableExpr extends Expression {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"varExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    if (this.postfix) {\r\n      this.postfix.search(callback);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ConstExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ConstExpr extends Expression {\r\n  name: string;\r\n  initializer: Expression;\r\n\r\n  constructor(name: string, initializer: Expression) {\r\n    super();\r\n    this.name = name;\r\n    this.initializer = initializer;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"constExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (this.initializer) {\r\n      const data = context.evalExpression(this.initializer, context.context);\r\n      if (data !== null && this.postfix) {\r\n        return data.getSubData(context, this.postfix, context.context);\r\n      }\r\n      return data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.initializer.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class LiteralExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class LiteralExpr extends Expression {\r\n  value: Data\r\n  type: Type;\r\n\r\n  constructor(value: Data, type: Type) {\r\n    super();\r\n    this.value = value;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"literalExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type !== undefined) {\r\n      type[0] = this.type;\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  get isScalar(): boolean {\r\n    return this.value instanceof ScalarData;\r\n  }\r\n\r\n  get isVector(): boolean {\r\n    return this.value instanceof VectorData || this.value instanceof MatrixData;\r\n  }\r\n\r\n  get scalarValue(): number {\r\n    if (this.value instanceof ScalarData) {\r\n      return this.value.value;\r\n    }\r\n    console.error(\"Value is not scalar.\");\r\n    return 0.0;\r\n  }\r\n\r\n  get vectorValue(): Float32Array | Int32Array | Uint32Array {\r\n    if (this.value instanceof VectorData) {\r\n      return this.value.data;\r\n    }\r\n    if (this.value instanceof MatrixData) {\r\n      return this.value.data;\r\n    }\r\n    console.error(\"Value is not a vector or matrix.\");\r\n    return new Float32Array(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BitcastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class BitcastExpr extends Expression {\r\n  type: Type | null;\r\n  value: Expression;\r\n\r\n  constructor(type: Type | null, value: Expression) {\r\n    super();\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"bitcastExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class TypecastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class TypecastExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"typecastExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.args, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayIndex\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ArrayIndex extends Expression {\r\n  index: Expression;\r\n  constructor(index: Expression) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.index.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Operator\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class Operator extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class UnaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, !, ~\r\n */\r\nexport class UnaryOperator extends Operator {\r\n  operator: string;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"unaryOp\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BinaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\r\n */\r\nexport class BinaryOperator extends Operator {\r\n  operator: string;\r\n  left: Expression;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, left: Expression, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"binaryOp\";\r\n  }\r\n\r\n  _getPromotedType(t1: Type, t2: Type): Type {\r\n    if (t1.name === t2.name) {\r\n      return t1;\r\n    }\r\n    if (t1.name === \"f32\" || t2.name === \"f32\") {\r\n      return Type.f32;\r\n    }\r\n    if (t1.name === \"u32\" || t2.name === \"u32\") {\r\n      return Type.u32;\r\n    }\r\n    return Type.i32;\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.left.search(callback);\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class SwitchCase\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class SwitchCase extends Node {\r\n  body: Statement[];\r\n\r\n  constructor(body: Statement[]) {\r\n    super();\r\n    this.body = body;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\nexport class DefaultSelector extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Case\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Case extends SwitchCase {\r\n  selectors: Expression[];\r\n\r\n  constructor(selectors: Expression[], body: Statement[]) {\r\n    super(body);\r\n    this.selectors = selectors;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"case\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Default\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Default extends SwitchCase {\r\n  constructor(body: Statement[]) {\r\n    super(body);\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Argument\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Argument extends Node {\r\n  name: string;\r\n  type: Type;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(name: string, type: Type, attributes: Attribute[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"argument\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ElseIf\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class ElseIf extends Node {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"elseif\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Member\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Member extends Node {\r\n  name: string;\r\n  type: Type | null;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"member\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Attribute\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Attribute extends Node {\r\n  name: string;\r\n  value: string | string[] | null;\r\n\r\n  constructor(name: string, value: string | string[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"attribute\";\r\n  }\r\n}\r\n\r\n\r\n\r\nexport class Data {\r\n  static _id = 0;\r\n\r\n  typeInfo: TypeInfo;\r\n  parent: Data | null = null;\r\n  id: number;\r\n\r\n  constructor(typeInfo: TypeInfo, parent: Data | null) {\r\n      this.typeInfo = typeInfo;\r\n      this.parent = parent;\r\n      this.id = Data._id++;\r\n  }\r\n\r\n  clone(): Data {\r\n    throw `Clone: Not implemented for ${this.constructor.name}`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n      console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n      console.error(`GetDataValue: Not implemented for ${this.constructor.name}`);\r\n      return null;\r\n  }\r\n\r\n  toString(): string {\r\n      return `<${this.typeInfo.getTypeName()}>`;\r\n  }\r\n}\r\n\r\nexport class VoidData extends Data {\r\n  constructor() {\r\n      super(new TypeInfo(\"void\", null), null);\r\n  }\r\n\r\n  static void = new VoidData();\r\n\r\n  toString(): string {\r\n      return \"void\";\r\n  }\r\n}\r\n\r\nexport class PointerData extends Data {\r\n  reference: Data;\r\n\r\n  constructor(reference: Data) {\r\n    super(new PointerInfo(\"pointer\", reference.typeInfo, null), null);\r\n    this.reference = reference;\r\n  }\r\n\r\n  clone(): Data {\r\n    return this;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    this.reference.setDataValue(exec, value, postfix, context);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      return this.reference.getSubData(exec, postfix, context);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return `&${this.reference.toString()}`;\r\n  }\r\n}\r\n\r\nexport class ScalarData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number | Int32Array | Uint32Array | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Int32Array || value instanceof Uint32Array || value instanceof Float32Array) {\r\n        this.data = value;\r\n    } else {\r\n      if (this.typeInfo.name === \"x32\") {\r\n        if (value - Math.floor(value) !== 0) {\r\n          this.data = new Float32Array([value]);\r\n        } else if (value >= 0) {\r\n            this.data = new Uint32Array([value]);\r\n        } else {\r\n            this.data = new Int32Array([value]);\r\n        } \r\n      } else if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"bool\") {\r\n          this.data = new Int32Array([value]);\r\n      } else if (this.typeInfo.name === \"u32\") {\r\n          this.data = new Uint32Array([value]);\r\n      } else if (this.typeInfo.name === \"f32\" || this.typeInfo.name === \"f16\") {\r\n          this.data = new Float32Array([value]);\r\n      } else {\r\n          console.error(`ScalarData2: Invalid type`, typeInfo);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n        return new ScalarData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n        return new ScalarData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n        return new ScalarData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `ScalarData: Invalid data type`;\r\n  }\r\n\r\n  get value(): number {\r\n    return this.data[0];\r\n  }\r\n\r\n  set value(v: number) {\r\n    this.data[0] = v;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix) {\r\n      console.error(`SetDataValue: Scalar data does not support postfix`, postfix);\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof ScalarData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return;\r\n    }\r\n\r\n    let v = value.data[0];\r\n\r\n    if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"u32\") {\r\n      v = Math.floor(v);\r\n    } else if (this.typeInfo.name === \"bool\") {\r\n      v = v ? 1 : 0;\r\n    }\r\n\r\n    this.data[0] = v;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      console.error(`getSubData: Scalar data does not support postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    return `${this.value}`;\r\n  }\r\n}\r\n\r\nfunction _getVectorData(exec: ExecInterface, values: number[], formatName: string): VectorData | null {\r\n  const size = values.length;\r\n  if (size === 2) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec2i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec2u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 3) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec3i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec3u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 4) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec4i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec4u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4h\")!);\r\n      }\r\n      console.error(`getSubData: Unknown format ${formatName}`);\r\n      return null;\r\n  }\r\n\r\n  console.error(`getSubData: Invalid vector size ${values.length}`);\r\n  return null;\r\n}\r\n\r\nexport class VectorData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array | Uint32Array | Int32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array || value instanceof Uint32Array || value instanceof Int32Array) {\r\n      this.data = value;\r\n    } else {\r\n      const typename = this.typeInfo.name;\r\n      if (typename === \"vec2f\" || typename === \"vec3f\" || typename === \"vec4f\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2i\" || typename === \"vec3i\" || typename === \"vec4i\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2u\" || typename === \"vec3u\" || typename === \"vec4u\") {\r\n        this.data = new Uint32Array(value);\r\n      } else if (typename === \"vec2h\" || typename === \"vec3h\" || typename === \"vec4h\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2b\" || typename === \"vec3b\" || typename === \"vec4b\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2\" || typename === \"vec3\" || typename === \"vec4\") {\r\n        this.data = new Float32Array(value);\r\n      } else {\r\n        console.error(`VectorData: Invalid type ${typename}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n      return new VectorData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n      return new VectorData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n      return new VectorData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `VectorData: Invalid data type`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set vector postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof VectorData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n        format = this.typeInfo.format || format;\r\n    } else {\r\n        const typeName = this.typeInfo.name;\r\n        if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\") {\r\n          format = exec.getTypeInfo(\"f32\");\r\n        } else if (typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\") {\r\n          format = exec.getTypeInfo(\"i32\");\r\n        } else if (typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\") {\r\n          format = exec.getTypeInfo(\"bool\");\r\n        } else if (typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n          format = exec.getTypeInfo(\"u32\");\r\n        } else if ( typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\") {\r\n          format = exec.getTypeInfo(\"f16\");\r\n        } else {\r\n          console.error(`GetSubData: Unknown type ${typeName}`);\r\n        }\r\n    }\r\n\r\n    let self: VectorData | null = this;\r\n    while (postfix !== null && self !== null) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        let i = -1;\r\n        if (idx instanceof LiteralExpr) {\r\n          if (idx.value instanceof ScalarData) {\r\n            i = idx.value.value;\r\n          } else {\r\n            console.error(`GetSubData: Invalid array index ${idx.value}`);\r\n            return null;\r\n          }\r\n        } else {\r\n          const d = exec.evalExpression(idx, context);\r\n          if (d instanceof ScalarData) {\r\n            i = d.value;\r\n          } else {\r\n            console.error(`GetSubData: Unknown index type`, idx);\r\n            return null;\r\n          }\r\n        }\r\n        if (i < 0 || i >= self.data.length) {\r\n          console.error(`GetSubData: Index out of range`, i);\r\n          return null;\r\n        }\r\n\r\n        if (self.data instanceof Float32Array) {\r\n          const d = new Float32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Int32Array) {\r\n          const d = new Int32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Uint32Array) {\r\n          const d = new Uint32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        }\r\n\r\n        throw `GetSubData: Invalid data type`;\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value.toLowerCase();\r\n        if (member.length === 1) {\r\n          let i = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            i = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            i = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            i = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            i = 3;\r\n          } else {\r\n            console.error(`GetSubData: Unknown member ${member}`);\r\n            return null;\r\n          }\r\n\r\n          if (this.data instanceof Float32Array) {\r\n            let d = new Float32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Int32Array) {\r\n            let d = new Int32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Uint32Array) {\r\n            let d = new Uint32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          }\r\n        }\r\n\r\n        const values: number[] = [];\r\n        for (const m of member) {\r\n          if (m === \"x\" || m === \"r\") {\r\n            values.push(this.data[0]);\r\n          } else if (m === \"y\" || m === \"g\") {\r\n            values.push(this.data[1]);\r\n          } else if (m === \"z\" || m === \"b\") {\r\n            values.push(this.data[2]);\r\n          } else if (m === \"w\" || m === \"a\") {\r\n            values.push(this.data[3]);\r\n          } else {\r\n            console.error(`GetDataValue: Unknown member ${m}`);\r\n          }\r\n        }\r\n\r\n        self = _getVectorData(exec, values, format.name);\r\n      } else {\r\n        console.error(`GetSubData: Unknown postfix`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class MatrixData extends Data {\r\n  data: Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array) {\r\n      this.data = value;\r\n    } else {\r\n      this.data = new Float32Array(value);\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    return new MatrixData(new Float32Array(this.data), this.typeInfo, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set matrix postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof MatrixData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    const typeName = this.typeInfo.name;\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n      format = this.typeInfo.format;\r\n    } else {\r\n      if (typeName.endsWith(\"f\")) {\r\n        format = exec.getTypeInfo(\"f32\");\r\n      } else if (typeName.endsWith(\"i\")) {\r\n        format = exec.getTypeInfo(\"i32\");\r\n      } else if (typeName.endsWith(\"u\")) {\r\n        format = exec.getTypeInfo(\"u32\");\r\n      } else if ( typeName.endsWith(\"h\")) {\r\n        format = exec.getTypeInfo(\"f16\");\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (postfix instanceof ArrayIndex) {\r\n      const idx = postfix.index;\r\n      let i = -1;\r\n      if (idx instanceof LiteralExpr) {\r\n        if (idx.value instanceof ScalarData) {\r\n          i = idx.value.value;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid array index ${idx.value}`);\r\n          return null;\r\n        }\r\n      } else {\r\n        const d = exec.evalExpression(idx, context);\r\n        if (d instanceof ScalarData) {\r\n          i = d.value;\r\n        } else {\r\n          console.error(`GetDataValue: Unknown index type`, idx);\r\n          return null;\r\n        }\r\n      }\r\n      if (i < 0 || i >= this.data.length) {\r\n        console.error(`GetDataValue: Index out of range`, i);\r\n        return null;\r\n      }\r\n\r\n      const formatSuffix = typeName.endsWith(\"h\") ? \"h\" : \"f\";\r\n\r\n      let vectorData: VectorData;\r\n      if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\" ||\r\n          typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\" ||\r\n          typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 2 * 4, 2), exec.getTypeInfo(`vec2${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\" ||\r\n                typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\" ||\r\n                typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 3 * 4, 3), exec.getTypeInfo(`vec3${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 4 * 4, 4), exec.getTypeInfo(`vec4${formatSuffix}`)!);\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n\r\n      if (postfix.postfix) {\r\n        return vectorData.getSubData(exec, postfix.postfix, context);\r\n      }\r\n\r\n      return vectorData;\r\n    } else {\r\n      console.error(`GetDataValue: Invalid postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\n// Used to store array and struct data\r\nexport class TypedData extends Data {\r\n  buffer: ArrayBuffer;\r\n  offset: number;\r\n\r\n  constructor(data: ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array,\r\n      typeInfo: TypeInfo, offset: number = 0, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    this.buffer = data instanceof ArrayBuffer ? data : data.buffer;\r\n    this.offset = offset;\r\n  }\r\n\r\n  clone(): Data {\r\n    const cloned = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));\r\n    return new TypedData(cloned.buffer, this.typeInfo, 0, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (value === null) {\r\n      console.log(`setDataValue: NULL data.`);\r\n      return;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          const idx = postfix.index;\r\n          if (idx instanceof LiteralExpr) {\r\n            if (idx.value instanceof ScalarData) {\r\n              offset += idx.value.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Invalid index type ${idx.value}`);\r\n              return;\r\n            }\r\n          } else {\r\n            const i = exec.evalExpression(idx, context);\r\n            if (i instanceof ScalarData) {\r\n              offset += i.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Unknown index type`, idx);\r\n              return;\r\n            }\r\n          }\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          console.error(`SetDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`SetDataValue: Member ${member} not found`);\r\n            return;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          let element = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            element = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            element = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            element = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            element = 3;\r\n          } else {\r\n            console.error(`SetDataValue: Unknown member ${member}`);\r\n            return;\r\n          }\r\n          if (!(value instanceof ScalarData)) {\r\n            console.error(`SetDataValue: Invalid value`, value);\r\n            return;\r\n          }\r\n          const v = value.value;\r\n          if (typeName === \"vec2f\") {\r\n            new Float32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3f\") {\r\n            new Float32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4f\") {\r\n            new Float32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2i\") {\r\n            new Int32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3i\") {\r\n            new Int32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4i\") {\r\n            new Int32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2u\") {\r\n            new Uint32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3u\") {\r\n            new Uint32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4u\") {\r\n            new Uint32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          }\r\n          console.error(`SetDataValue: Type ${typeName} is not a struct`);\r\n          return;\r\n        }\r\n      } else {\r\n        console.error(`SetDataValue: Unknown postfix type`, postfix);\r\n        return;\r\n      }\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    this.setData(exec, value, typeInfo, offset, context);\r\n  }\r\n\r\n  setData(exec: ExecInterface, value: Data, typeInfo: TypeInfo, offset: number, context: ExecContext): void {\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\" || typeName === \"f16\") {\r\n      if (value instanceof ScalarData) {\r\n        new Float32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"i32\" || typeName === \"atomic<i32>\" || typeName === \"x32\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"u32\" || typeName === \"atomic<u32>\") {\r\n      if (value instanceof ScalarData) {\r\n        new Uint32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"bool\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2f\" || typeName === \"vec2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3f\" || typeName === \"vec3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4f\" || typeName === \"vec4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2i\") {\r\n      const x = new Int32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3i\") {\r\n      const x = new Int32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4i\") {\r\n      const x = new Int32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 9);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 16);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n        x[12] = value.data[12];\r\n        x[13] = value.data[13];\r\n        x[14] = value.data[14];\r\n        x[15] = value.data[15];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n        x[12] = value[12];\r\n        x[13] = value[13];\r\n        x[14] = value[14];\r\n        x[15] = value[15];\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (value instanceof TypedData) {\r\n      if (typeInfo === value.typeInfo) {\r\n        const x = new Uint8Array(this.buffer, offset, value.buffer.byteLength);\r\n        x.set(new Uint8Array(value.buffer));\r\n        return;\r\n      } else {\r\n        console.error(`SetDataValue: Type mismatch`, typeName, value.typeInfo.getTypeName());\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.error(`SetData: Unknown type ${typeName}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        const _i = idx instanceof Expression ? exec.evalExpression(idx, context) : idx;\r\n        let i = 0;\r\n        if (_i instanceof ScalarData) {\r\n          i = _i.value;\r\n        } else if (typeof _i === \"number\") {\r\n          i = _i;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid index type`, idx);\r\n        }\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          offset += i * typeInfo.stride;\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n            offset += i * 16;\r\n            typeInfo = exec.getTypeInfo(\"vec4f\")!;\r\n          } else {\r\n            console.error(`getDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n          }\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`GetDataValue: Member ${member} not found`);\r\n            return null;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n              typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n              typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n              typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n              typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n              typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\") {\r\n\r\n            if (member.length > 0 && member.length < 5) {\r\n              let formatName = \"f32\";\r\n              let formatSuffix = \"f\";\r\n              const value: number[] = [];\r\n              for (let i = 0; i < member.length; ++i) {\r\n                const m = member[i].toLowerCase();\r\n                let element = 0;\r\n                if (m === \"x\" || m === \"r\") {\r\n                  element = 0;\r\n                } else if (m === \"y\" || m === \"g\") {\r\n                  element = 1;\r\n                } else if (m === \"z\" || m === \"b\") {\r\n                  element = 2;\r\n                } else if (m === \"w\" || m === \"a\") {\r\n                  element = 3;\r\n                } else {\r\n                  console.error(`Unknown member ${member}`);\r\n                  return null;\r\n                }\r\n\r\n                if (member.length === 1) {\r\n                  if (typeName.endsWith(\"f\")) {\r\n                    if (this.buffer.byteLength < (offset + element * 4 + 4)) {\r\n                      console.log(\"Insufficient buffer data\");\r\n                      return null;\r\n                    }\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f32\")!, this);\r\n                  } else if (typeName.endsWith(\"h\")) {\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f16\")!, this);\r\n                  } else if (typeName.endsWith(\"i\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  } else if (typeName.endsWith(\"b\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"bool\")!, this);\r\n                  } else if (typeName.endsWith(\"u\")) {\r\n                    return new ScalarData(new Uint32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  }\r\n                }\r\n\r\n                if (typeName === \"vec2f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3f\") {\r\n                  if ((offset + 12) >= this.buffer.byteLength) {\r\n                    console.log(\"Insufficient buffer data\");\r\n                    return null;\r\n                  }\r\n                  const fa = new Float32Array(this.buffer, offset, 3);\r\n                  value.push(fa[element]);\r\n                } else if (typeName === \"vec4f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  const ua = new Uint32Array(this.buffer, offset, 2);\r\n                  value.push(ua[element]);\r\n                } else if (typeName === \"vec3u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 4)[element]);\r\n                }\r\n              }\r\n\r\n              if (value.length === 2) {\r\n                typeInfo = exec.getTypeInfo(`vec2${formatSuffix}`)!;\r\n              } else if (value.length === 3) {\r\n                typeInfo = exec.getTypeInfo(`vec3${formatSuffix}`)!;\r\n              } else if (value.length === 4) {\r\n                typeInfo = exec.getTypeInfo(`vec4${formatSuffix}`)!;\r\n              } else {\r\n                console.error(`GetDataValue: Invalid vector length ${value.length}`);\r\n              }\r\n\r\n              return new VectorData(value, typeInfo, null);\r\n            } else {\r\n              console.error(`GetDataValue: Unknown member ${member}`);\r\n              return null;\r\n            }\r\n          }\r\n\r\n          console.error(`GetDataValue: Type ${typeName} is not a struct`);\r\n          return null;\r\n        }\r\n      } else {\r\n        console.error(`GetDataValue: Unknown postfix type`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\") {\r\n      return new ScalarData(new Float32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"i32\") {\r\n      return new ScalarData(new Int32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"u32\") {\r\n      return new ScalarData(new Uint32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"vec2f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 4), typeInfo, this);\r\n    }\r\n\r\n    if (typeInfo instanceof TemplateInfo && typeInfo.name === \"atomic\") {\r\n      if (typeInfo.format?.name === \"u32\") {\r\n        return new ScalarData(new Uint32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else if (typeInfo.format?.name === \"i32\") {\r\n        return new ScalarData(new Int32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else {\r\n        console.error(`GetDataValue: Invalid atomic format ${typeInfo.format?.name}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return new TypedData(this.buffer, typeInfo, offset, this);\r\n  }\r\n\r\n  toString(): string {\r\n    let s = \"\";\r\n    if (this.typeInfo instanceof ArrayInfo) {\r\n      if (this.typeInfo.format.name === \"f32\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"i32\") {\r\n        const fa = new Int32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"u32\") {\r\n        const fa = new Uint32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec2f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}]`;\r\n        for (let i = 1; i < fa.length / 2; ++i) {\r\n          s += `, [${fa[i * 2]}, ${fa[i * 2 + 1]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec3f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec4f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}, ${fa[3]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}, ${fa[i + 3]}]`;\r\n        }\r\n      } else {\r\n        s = `[...]`;\r\n      }\r\n    } else if (this.typeInfo instanceof StructInfo) {\r\n      s += `{...}`;\r\n    } else {\r\n      s = `[...]`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class TextureData extends Data {\r\n  data: Array<ArrayBuffer>;\r\n  descriptor: Object;\r\n  view: Object | null;\r\n\r\n  constructor(data: Array<ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array>,\r\n      typeInfo: TypeInfo, descriptor: Object, view: Object | null) {\r\n      super(typeInfo, null);\r\n      this.data = data;\r\n      this.descriptor = descriptor;\r\n      this.view = view;\r\n  }\r\n\r\n  clone(): Data {\r\n    return new TextureData(this.data, this.typeInfo, this.descriptor, this.view);\r\n  }\r\n\r\n  get width(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 0) {\r\n      return size[0] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"width\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get height(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 1) {\r\n      return size[1] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"height\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get depthOrArrayLayers(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 2) {\r\n      return size[2] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"depthOrArrayLayers\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get format(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"format\"] ?? \"rgba8unorm\";\r\n    }\r\n    return \"rgba8unorm\";\r\n  }\r\n\r\n  get sampleCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"sampleCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get mipLevelCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"mipLevelCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get dimension(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"dimension\"] ?? \"2d\";\r\n    }\r\n    return \"2d\";\r\n  }\r\n\r\n  getMipLevelSize(level: number): number[] {\r\n    if (level >= this.mipLevelCount) {\r\n      return [0, 0, 0];\r\n    }\r\n\r\n    const size = [this.width, this.height, this.depthOrArrayLayers];\r\n    for (let i = 0; i < size.length; ++i) {\r\n      size[i] = Math.max(1, size[i] >> level);\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  get texelByteSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return 0;\r\n    }\r\n    if (formatInfo.isDepthStencil) {\r\n      return 4; // depth textures have r32float imageData\r\n    }\r\n    return formatInfo.bytesPerBlock;\r\n  }\r\n\r\n  get bytesPerRow(): number {\r\n    const width = this.width;\r\n    const texelByteSize = this.texelByteSize;\r\n    //return (width * texelByteSize + 255) & ~0xff; // bytesPerRow is aligned to a multiple of 256 bytes\r\n    return width * texelByteSize;\r\n  }\r\n\r\n  get isDepthStencil(): boolean {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return false;\r\n    }\r\n    return formatInfo.isDepthStencil;\r\n  }\r\n\r\n  getGpuSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    const width = this.width;\r\n    if (!format || width <= 0 || !formatInfo) {\r\n      return -1;\r\n    }\r\n\r\n    const height = this.height;\r\n    const depthOrArrayLayers = this.depthOrArrayLayers;\r\n    const dimension = this.dimension;\r\n    const blockWidth = width / formatInfo.blockWidth;\r\n    const blockHeight = dimension === \"1d\" ? 1 : height / formatInfo.blockHeight;\r\n    const bytesPerBlock = formatInfo.bytesPerBlock;\r\n\r\n    return blockWidth * blockHeight * bytesPerBlock * depthOrArrayLayers;\r\n  }\r\n\r\n  getPixel(x: number, y: number, z: number = 0, mipLevel: number = 0): number[] | null {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    return getTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format);\r\n  }\r\n\r\n  setPixel(x: number, y: number, z: number, mipLevel: number, value: number[]): void {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    setTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format, value);\r\n  }\r\n}\r\n", "export enum TokenClass {\r\n  token,\r\n  keyword,\r\n  reserved,\r\n}\r\n\r\nexport class TokenType {\r\n  name: string;\r\n  type: TokenClass;\r\n  rule: RegExp | string;\r\n\r\n  constructor(name: string, type: TokenClass, rule: RegExp | string) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.rule = rule;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/// Catalog of defined token types, keywords, and reserved words.\r\nexport class TokenTypes {\r\n  static readonly none = new TokenType(\"\", TokenClass.reserved, \"\");\r\n  static readonly eof = new TokenType(\"EOF\", TokenClass.token, \"\");\r\n\r\n  static readonly reserved = {\r\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\r\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\r\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\r\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\r\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\r\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\r\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\r\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\r\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\r\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\r\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\r\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\r\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\r\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\r\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\r\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\r\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\r\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\r\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\r\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\r\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\r\n  };\r\n\r\n  static readonly keywords = {\r\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\r\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\r\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\r\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\r\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\r\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\r\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\r\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\r\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\r\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\r\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\r\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\r\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\r\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\r\n    sampler_comparison: new TokenType(\r\n      \"sampler_comparison\",\r\n      TokenClass.keyword,\r\n      \"sampler_comparison\"\r\n    ),\r\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\r\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\r\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\r\n    texture_2d_array: new TokenType(\r\n      \"texture_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_2d_array\"\r\n    ),\r\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\r\n    texture_cube: new TokenType(\r\n      \"texture_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_cube\"\r\n    ),\r\n    texture_cube_array: new TokenType(\r\n      \"texture_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_cube_array\"\r\n    ),\r\n    texture_multisampled_2d: new TokenType(\r\n      \"texture_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_multisampled_2d\"\r\n    ),\r\n    texture_storage_1d: new TokenType(\r\n      \"texture_storage_1d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_1d\"\r\n    ),\r\n    texture_storage_2d: new TokenType(\r\n      \"texture_storage_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d\"\r\n    ),\r\n    texture_storage_2d_array: new TokenType(\r\n      \"texture_storage_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d_array\"\r\n    ),\r\n    texture_storage_3d: new TokenType(\r\n      \"texture_storage_3d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_3d\"\r\n    ),\r\n    texture_depth_2d: new TokenType(\r\n      \"texture_depth_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d\"\r\n    ),\r\n    texture_depth_2d_array: new TokenType(\r\n      \"texture_depth_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d_array\"\r\n    ),\r\n    texture_depth_cube: new TokenType(\r\n      \"texture_depth_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube\"\r\n    ),\r\n    texture_depth_cube_array: new TokenType(\r\n      \"texture_depth_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube_array\"\r\n    ),\r\n    texture_depth_multisampled_2d: new TokenType(\r\n      \"texture_depth_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_multisampled_2d\"\r\n    ),\r\n    texture_external: new TokenType(\r\n      \"texture_external\",\r\n      TokenClass.keyword,\r\n      \"texture_external\"\r\n    ),\r\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\r\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\r\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\r\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\r\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\r\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\r\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\r\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\r\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\r\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\r\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\r\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\r\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\r\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\r\n    fallthrough: new TokenType(\r\n      \"fallthrough\",\r\n      TokenClass.keyword,\r\n      \"fallthrough\"\r\n    ),\r\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\r\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\r\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\r\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\r\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\r\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\r\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\r\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\r\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\r\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\r\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\r\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\r\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\r\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\r\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\r\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\r\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\r\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\r\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\r\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\r\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\r\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\r\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\r\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\r\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\r\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\r\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\r\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\r\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\r\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\r\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\r\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\r\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\r\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\r\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\r\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\r\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\r\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\r\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\r\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\r\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\r\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\r\n    rgba8unorm_srgb: new TokenType(\r\n      \"rgba8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"rgba8unorm_srgb\"\r\n    ),\r\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\r\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\r\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\r\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\r\n    bgra8unorm_srgb: new TokenType(\r\n      \"bgra8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"bgra8unorm_srgb\"\r\n    ),\r\n    rgb10a2unorm: new TokenType(\r\n      \"rgb10a2unorm\",\r\n      TokenClass.keyword,\r\n      \"rgb10a2unorm\"\r\n    ),\r\n    rg11b10float: new TokenType(\r\n      \"rg11b10float\",\r\n      TokenClass.keyword,\r\n      \"rg11b10float\"\r\n    ),\r\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\r\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\r\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\r\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\r\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\r\n    rgba16float: new TokenType(\r\n      \"rgba16float\",\r\n      TokenClass.keyword,\r\n      \"rgba16float\"\r\n    ),\r\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\r\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\r\n    rgba32float: new TokenType(\r\n      \"rgba32float\",\r\n      TokenClass.keyword,\r\n      \"rgba32float\"\r\n    ),\r\n    static_assert: new TokenType(\r\n      \"static_assert\",\r\n      TokenClass.keyword,\r\n      \"static_assert\"\r\n    ),\r\n\r\n    // WGSL grammar has a few keywords that have different token names than the strings they\r\n    // represent. Aliasing them here.\r\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\r\n  };\r\n\r\n  static readonly tokens = {\r\n    decimal_float_literal: new TokenType(\r\n      \"decimal_float_literal\",\r\n      TokenClass.token,\r\n      /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/\r\n    ),\r\n    hex_float_literal: new TokenType(\r\n      \"hex_float_literal\",\r\n      TokenClass.token,\r\n      /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+[fh]?))/\r\n    ),\r\n    int_literal: new TokenType(\r\n      \"int_literal\",\r\n      TokenClass.token,\r\n      /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/\r\n    ),\r\n    uint_literal: new TokenType(\r\n      \"uint_literal\",\r\n      TokenClass.token,\r\n      /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/\r\n    ),\r\n    name: new TokenType(\"name\", TokenClass.token,  /([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/u),\r\n    //name: new TokenType(\"name\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\r\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\r\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\r\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\r\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\r\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\r\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\r\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\r\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\r\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\r\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\r\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\r\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\r\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\r\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\r\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\r\n    greater_than_equal: new TokenType(\r\n      \"greater_than_equal\",\r\n      TokenClass.token,\r\n      \">=\"\r\n    ),\r\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\r\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\r\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\r\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\r\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\r\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\r\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\r\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\r\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\r\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\r\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\r\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\r\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\r\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\r\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\r\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\r\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\r\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\r\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\r\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\r\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\r\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\r\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\r\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\r\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\r\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\r\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\r\n    shift_right_equal: new TokenType(\r\n      \"shift_right_equal\",\r\n      TokenClass.token,\r\n      \">>=\"\r\n    ),\r\n    shift_left_equal: new TokenType(\r\n      \"shift_left_equal\",\r\n      TokenClass.token,\r\n      \"<<=\"\r\n    ),\r\n  };\r\n\r\n  static readonly simpleTokens = {\r\n    \"@\": this.tokens.attr,\r\n    \"{\": this.tokens.brace_left,\r\n    \"}\": this.tokens.brace_right,\r\n    \":\": this.tokens.colon,\r\n    \",\": this.tokens.comma,\r\n    \"(\": this.tokens.paren_left,\r\n    \")\": this.tokens.paren_right,\r\n    \";\": this.tokens.semicolon,\r\n  };\r\n\r\n  static readonly literalTokens = {\r\n    \"&\": this.tokens.and,\r\n    \"&&\": this.tokens.and_and,\r\n    \"->\": this.tokens.arrow ,\r\n    \"/\": this.tokens.forward_slash,\r\n    \"!\": this.tokens.bang,\r\n    \"[\": this.tokens.bracket_left,\r\n    \"]\": this.tokens.bracket_right,\r\n    \"=\": this.tokens.equal,\r\n    \"==\": this.tokens.equal_equal,\r\n    \"!=\": this.tokens.not_equal,\r\n    \">\": this.tokens.greater_than,\r\n    \">=\": this.tokens.greater_than_equal,\r\n    \">>\": this.tokens.shift_right,\r\n    \"<\": this.tokens.less_than,\r\n    \"<=\": this.tokens.less_than_equal,\r\n    \"<<\": this.tokens.shift_left,\r\n    \"%\": this.tokens.modulo,\r\n    \"-\": this.tokens.minus,\r\n    \"--\": this.tokens.minus_minus,\r\n    \".\": this.tokens.period,\r\n    \"+\": this.tokens.plus,\r\n    \"++\": this.tokens.plus_plus,\r\n    \"|\": this.tokens.or,\r\n    \"||\": this.tokens.or_or,\r\n    \"*\": this.tokens.star,\r\n    \"~\": this.tokens.tilde,\r\n    \"_\": this.tokens.underscore,\r\n    \"^\": this.tokens.xor,\r\n    \"+=\": this.tokens.plus_equal,\r\n    \"-=\": this.tokens.minus_equal,\r\n    \"*=\": this.tokens.times_equal,\r\n    \"/=\": this.tokens.division_equal,\r\n    \"%=\": this.tokens.modulo_equal,\r\n    \"&=\": this.tokens.and_equal,\r\n    \"|=\": this.tokens.or_equal,\r\n    \"^=\": this.tokens.xor_equal,\r\n    \">>=\": this.tokens.shift_right_equal,\r\n    \"<<=\": this.tokens.shift_left_equal,\r\n  };\r\n\r\n  static readonly regexTokens = {\r\n    decimal_float_literal: this.tokens.decimal_float_literal,\r\n    hex_float_literal: this.tokens.hex_float_literal,\r\n    int_literal: this.tokens.int_literal,\r\n    uint_literal: this.tokens.uint_literal,\r\n    ident: this.tokens.ident,\r\n  };\r\n\r\n  static readonly storage_class = [\r\n    this.keywords.function,\r\n    this.keywords.private,\r\n    this.keywords.workgroup,\r\n    this.keywords.uniform,\r\n    this.keywords.storage,\r\n  ];\r\n\r\n  static readonly access_mode = [\r\n    this.keywords.read,\r\n    this.keywords.write,\r\n    this.keywords.read_write,\r\n  ];\r\n\r\n  static readonly sampler_type = [\r\n    this.keywords.sampler,\r\n    this.keywords.sampler_comparison,\r\n  ];\r\n\r\n  static readonly sampled_texture_type = [\r\n    this.keywords.texture_1d,\r\n    this.keywords.texture_2d,\r\n    this.keywords.texture_2d_array,\r\n    this.keywords.texture_3d,\r\n    this.keywords.texture_cube,\r\n    this.keywords.texture_cube_array,\r\n  ];\r\n\r\n  static readonly multisampled_texture_type = [\r\n    this.keywords.texture_multisampled_2d,\r\n  ];\r\n\r\n  static readonly storage_texture_type = [\r\n    this.keywords.texture_storage_1d,\r\n    this.keywords.texture_storage_2d,\r\n    this.keywords.texture_storage_2d_array,\r\n    this.keywords.texture_storage_3d,\r\n  ];\r\n\r\n  static readonly depth_texture_type = [\r\n    this.keywords.texture_depth_2d,\r\n    this.keywords.texture_depth_2d_array,\r\n    this.keywords.texture_depth_cube,\r\n    this.keywords.texture_depth_cube_array,\r\n    this.keywords.texture_depth_multisampled_2d,\r\n  ];\r\n\r\n  static readonly texture_external_type = [this.keywords.texture_external];\r\n\r\n  static readonly any_texture_type = [\r\n    ...this.sampled_texture_type,\r\n    ...this.multisampled_texture_type,\r\n    ...this.storage_texture_type,\r\n    ...this.depth_texture_type,\r\n    ...this.texture_external_type,\r\n  ];\r\n\r\n  static readonly texel_format = [\r\n    this.keywords.r8unorm,\r\n    this.keywords.r8snorm,\r\n    this.keywords.r8uint,\r\n    this.keywords.r8sint,\r\n    this.keywords.r16uint,\r\n    this.keywords.r16sint,\r\n    this.keywords.r16float,\r\n    this.keywords.rg8unorm,\r\n    this.keywords.rg8snorm,\r\n    this.keywords.rg8uint,\r\n    this.keywords.rg8sint,\r\n    this.keywords.r32uint,\r\n    this.keywords.r32sint,\r\n    this.keywords.r32float,\r\n    this.keywords.rg16uint,\r\n    this.keywords.rg16sint,\r\n    this.keywords.rg16float,\r\n    this.keywords.rgba8unorm,\r\n    this.keywords.rgba8unorm_srgb,\r\n    this.keywords.rgba8snorm,\r\n    this.keywords.rgba8uint,\r\n    this.keywords.rgba8sint,\r\n    this.keywords.bgra8unorm,\r\n    this.keywords.bgra8unorm_srgb,\r\n    this.keywords.rgb10a2unorm,\r\n    this.keywords.rg11b10float,\r\n    this.keywords.rg32uint,\r\n    this.keywords.rg32sint,\r\n    this.keywords.rg32float,\r\n    this.keywords.rgba16uint,\r\n    this.keywords.rgba16sint,\r\n    this.keywords.rgba16float,\r\n    this.keywords.rgba32uint,\r\n    this.keywords.rgba32sint,\r\n    this.keywords.rgba32float,\r\n  ];\r\n\r\n  static readonly const_literal = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.keywords.true,\r\n    this.keywords.false,\r\n  ];\r\n\r\n  static readonly literal_or_ident = [\r\n    this.tokens.ident,\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.tokens.name\r\n  ];\r\n\r\n  static readonly element_count_expression = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.ident,\r\n  ];\r\n\r\n  static readonly template_types = [\r\n    this.keywords.vec2,\r\n    this.keywords.vec3,\r\n    this.keywords.vec4,\r\n    this.keywords.mat2x2,\r\n    this.keywords.mat2x3,\r\n    this.keywords.mat2x4,\r\n    this.keywords.mat3x2,\r\n    this.keywords.mat3x3,\r\n    this.keywords.mat3x4,\r\n    this.keywords.mat4x2,\r\n    this.keywords.mat4x3,\r\n    this.keywords.mat4x4,\r\n    this.keywords.atomic,\r\n    this.keywords.bitcast,\r\n    ...this.any_texture_type,\r\n  ];\r\n\r\n  // The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n  // The attribute grammar should be ident | block.\r\n  static readonly attribute_name = [this.tokens.ident, this.keywords.block, this.keywords.diagnostic];\r\n\r\n  static readonly assignment_operators = [\r\n    this.tokens.equal,\r\n    this.tokens.plus_equal,\r\n    this.tokens.minus_equal,\r\n    this.tokens.times_equal,\r\n    this.tokens.division_equal,\r\n    this.tokens.modulo_equal,\r\n    this.tokens.and_equal,\r\n    this.tokens.or_equal,\r\n    this.tokens.xor_equal,\r\n    this.tokens.shift_right_equal,\r\n    this.tokens.shift_left_equal,\r\n  ];\r\n\r\n  static readonly increment_operators = [\r\n    this.tokens.plus_plus,\r\n    this.tokens.minus_minus,\r\n  ];\r\n}\r\n\r\n/// A token parsed by the WgslScanner.\r\nexport class Token {\r\n  readonly type: TokenType; // The type of the token.\r\n  readonly lexeme: string; // The string of the token, as parsed from the source text.\r\n  readonly line: number; // The line number of the token in the source text.\r\n  readonly start: number; // The start position of the token in the source text.\r\n  readonly end: number; // The end position of the token in the source text.\r\n\r\n  constructor(type: TokenType, lexeme: string, line: number, start: number, end: number) {\r\n    this.type = type;\r\n    this.lexeme = lexeme;\r\n    this.line = line;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lexeme;\r\n  }\r\n\r\n  isTemplateType(): boolean {\r\n    return TokenTypes.template_types.indexOf(this.type) != -1;\r\n  }\r\n\r\n  isArrayType(): boolean {\r\n    return this.type == TokenTypes.keywords.array;\r\n  }\r\n\r\n  isArrayOrTemplateType(): boolean {\r\n    return this.isArrayType() || this.isTemplateType();\r\n  }\r\n}\r\n\r\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\r\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\r\nexport class WgslScanner {\r\n  private _source: string;\r\n  private _tokens: Token[] = [];\r\n  private _start = 0;\r\n  private _current = 0;\r\n  private _line = 1;\r\n\r\n  constructor(source?: string) {\r\n    this._source = source ?? \"\";\r\n  }\r\n\r\n  /// Scan all tokens from the source.\r\n  scanTokens(): Token[] {\r\n    while (!this._isAtEnd()) {\r\n      this._start = this._current;\r\n      if (!this.scanToken()) {\r\n        throw `Invalid syntax at line ${this._line}`;\r\n      }\r\n    }\r\n\r\n    this._tokens.push(new Token(TokenTypes.eof, \"\", this._line, this._current, this._current));\r\n\r\n    return this._tokens;\r\n  }\r\n\r\n  /// Scan a single token from the source.\r\n  scanToken(): boolean {\r\n    // Find the longest consecutive set of characters that match a rule.\r\n    let lexeme = this._advance();\r\n\r\n    // Skip line-feed, adding to the line counter.\r\n    if (lexeme == \"\\n\") {\r\n      this._line++;\r\n      return true;\r\n    }\r\n\r\n    // Skip whitespace\r\n    if (this._isWhitespace(lexeme)) {\r\n      return true;\r\n    }\r\n\r\n    if (lexeme == \"/\") {\r\n      // If it's a // comment, skip everything until the next line-feed.\r\n      if (this._peekAhead() == \"/\") {\r\n        while (lexeme != \"\\n\") {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n        }\r\n        // skip the linefeed\r\n        this._line++;\r\n        return true;\r\n      } else if (this._peekAhead() == \"*\") {\r\n        // If it's a / * block comment, skip everything until the matching * /,\r\n        // allowing for nested block comments.\r\n        this._advance();\r\n        let commentLevel = 1;\r\n        while (commentLevel > 0) {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n          if (lexeme == \"\\n\") {\r\n            this._line++;\r\n          } else if (lexeme == \"*\") {\r\n            if (this._peekAhead() == \"/\") {\r\n              this._advance();\r\n              commentLevel--;\r\n              if (commentLevel == 0) {\r\n                return true;\r\n              }\r\n            }\r\n          } else if (lexeme == \"/\") {\r\n            if (this._peekAhead() == \"*\") {\r\n              this._advance();\r\n              commentLevel++;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Shortcut single character tokens\r\n    const simpleToken = TokenTypes.simpleTokens[lexeme];\r\n    if (simpleToken) {\r\n      this._addToken(simpleToken);\r\n      return true;\r\n    }\r\n\r\n    // Shortcut keywords and identifiers\r\n    let matchType = TokenTypes.none;\r\n    const isAlpha = this._isAlpha(lexeme);\r\n    const isUnderscore = lexeme === \"_\";\r\n\r\n    if (this._isAlphaNumeric(lexeme)) {\r\n      let nextChar = this._peekAhead();\r\n      while (this._isAlphaNumeric(nextChar)) {\r\n        lexeme += this._advance();\r\n        nextChar = this._peekAhead();\r\n      }\r\n    }\r\n\r\n    if (isAlpha) {\r\n      const matchedType = TokenTypes.keywords[lexeme];\r\n      if (matchedType) {\r\n        this._addToken(matchedType);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (isAlpha || isUnderscore) {\r\n      this._addToken(TokenTypes.tokens.ident);\r\n      return true;\r\n    }\r\n\r\n    // Scan for the next valid token type\r\n    for (;;) {\r\n      let matchedType = this._findType(lexeme);\r\n\r\n      // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\r\n      // shift_right.\r\n      // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n      // and one to close the array).\r\n      // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\r\n      // it's a greather_than and an equal, not a greater_than_equal.\r\n      // Another ambiguity is '-'. In the case of a-2, it's a minus; in the case of a*-2, it's a -2;\r\n      // in the case of foo()->int, it's a ->; in the case of foo-- or --foo, it's a -- decrement.\r\n\r\n      // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\r\n      // are predicated on it the > either closing a template, or being part of an operator.\r\n      // The solution here is to check if there was a less_than up to some number of tokens\r\n      // previously, and the token prior to that is a keyword that requires a '<', then it will be\r\n      // split into two operators; otherwise it's a single operator.\r\n      const nextLexeme = this._peekAhead();\r\n      if (lexeme == \"-\" && this._tokens.length > 0) {\r\n        if (nextLexeme == \"=\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_equal);\r\n          return true;\r\n        }\r\n        if (nextLexeme == \"-\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_minus);\r\n          return true;\r\n        }\r\n        const ti = this._tokens.length - 1;\r\n        const isIdentOrLiteral = TokenTypes.literal_or_ident.indexOf(this._tokens[ti].type) != -1;\r\n        if ((isIdentOrLiteral || this._tokens[ti].type == TokenTypes.tokens.paren_right) && nextLexeme != \">\") {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n      if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\r\n        let foundLessThan = false;\r\n        let ti = this._tokens.length - 1;\r\n        for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\r\n          if (TokenTypes.assignment_operators.indexOf(this._tokens[ti].type) !== -1) {\r\n            break;\r\n          }\r\n          if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\r\n            if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\r\n              foundLessThan = true;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        // If there was a less_than in the recent token history, then this is probably a\r\n        // greater_than.\r\n        if (foundLessThan) {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // The current lexeme may not match any rule, but some token types may be invalid for\r\n      // part of the string but valid after a few more characters.\r\n      // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n      // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n      // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n      // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n      // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n      // ahead up to two characters to see if the string starts matching a valid rule again.\r\n      if (matchedType === TokenTypes.none) {\r\n        let lookAheadLexeme = lexeme;\r\n        let lookAhead = 0;\r\n        const maxLookAhead = 2;\r\n        for (let li = 0; li < maxLookAhead; ++li) {\r\n          lookAheadLexeme += this._peekAhead(li);\r\n          matchedType = this._findType(lookAheadLexeme);\r\n          if (matchedType !== TokenTypes.none) {\r\n            lookAhead = li;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchedType === TokenTypes.none) {\r\n          if (matchType === TokenTypes.none) {\r\n            return false;\r\n          }\r\n          this._current--;\r\n          this._addToken(matchType);\r\n          return true;\r\n        }\r\n\r\n        lexeme = lookAheadLexeme;\r\n        this._current += lookAhead + 1;\r\n      }\r\n\r\n      matchType = matchedType;\r\n\r\n      if (this._isAtEnd()) {\r\n        break;\r\n      }\r\n\r\n      lexeme += this._advance();\r\n    }\r\n\r\n    // We got to the end of the input stream. Then the token we've ready so far is it.\r\n    if (matchType === TokenTypes.none) {\r\n      return false;\r\n    }\r\n\r\n    this._addToken(matchType);\r\n    return true;\r\n  }\r\n\r\n  _findType(lexeme: string): TokenType {\r\n    for (const name in TokenTypes.regexTokens) {\r\n      const type = TokenTypes.regexTokens[name];\r\n      if (this._match(lexeme, type.rule)) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    const type = TokenTypes.literalTokens[lexeme];\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    return TokenTypes.none;\r\n  }\r\n\r\n  _match(lexeme: string, rule: RegExp): boolean {\r\n    const match = rule.exec(lexeme);\r\n    return match && match.index == 0 && match[0] == lexeme;\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return this._current >= this._source.length;\r\n  }\r\n\r\n  _isAlpha(c: string): boolean {\r\n    // To support UTF-8 characters, allow anything other than whitespace, numbers, or operators\r\n    return !this._isNumeric(c) && !this._isWhitespace(c) && c !== \"_\" && c !== \".\" && c !== \"(\" && c !== \")\" &&\r\n      c !== \"[\" && c !== \"]\" && c !== \"{\" && c !== \"}\" && c !== \",\" && c !== \";\" && c !== \":\" && c !== \"=\" &&\r\n      c !== \"!\" && c !== \"<\" && c !== \">\" && c !== \"+\" && c !== \"-\" && c !== \"*\" && c !== \"/\" && c !== \"%\" &&\r\n      c !== \"&\" && c !== \"|\" && c !== \"^\" && c !== \"~\" && c !== \"@\" && c !== \"#\" && c !== \"?\" && c !== \"'\" &&\r\n      c !== \"`\" && c !== \"\\\"\" && c !== \"\\\\\" && c !== \"\\n\" && c !== \"\\r\" && c !== \"\\t\" && c !== \"\\0\";\r\n  }\r\n\r\n  _isNumeric(c: string): boolean {\r\n    return c >= \"0\" && c <= \"9\";\r\n  }\r\n\r\n  _isAlphaNumeric(c: string): boolean {\r\n    return this._isAlpha(c) || this._isNumeric(c) || c === \"_\";\r\n  }\r\n\r\n  _isWhitespace(c: string): boolean {\r\n    return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n  }\r\n\r\n  _advance(amount: number = 0): string {\r\n    let c = this._source[this._current];\r\n    amount = amount || 0;\r\n    amount++;\r\n    this._current += amount;\r\n    return c;\r\n  }\r\n\r\n  _peekAhead(offset: number = 0): string {\r\n    offset = offset || 0;\r\n    if (this._current + offset >= this._source.length) {\r\n      return \"\\0\";\r\n    }\r\n    return this._source[this._current + offset];\r\n  }\r\n\r\n  _addToken(type: TokenType) {\r\n    const text = this._source.substring(this._start, this._current);\r\n    this._tokens.push(new Token(type, text, this._line, this._start, this._current));\r\n  }\r\n}\r\n", "export function isArray(value: any): boolean {\r\n    return Array.isArray(value) || value?.buffer instanceof ArrayBuffer;\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\";\r\n}\r\n\r\nconst _f32 = new Float32Array(1);\r\nconst _f32_i32 = new Uint32Array(_f32.buffer);\r\nconst _f32_u32 = new Uint32Array(_f32.buffer);\r\nconst _i32 = new Int32Array(1);\r\nconst _i32_f32 = new Float32Array(_i32.buffer);\r\nconst _i32_u32 = new Uint32Array(_i32.buffer);\r\nconst _u32 = new Uint32Array(1);\r\nconst _u32_f32 = new Float32Array(_u32.buffer);\r\nconst _u32_i32 = new Int32Array(_u32.buffer);\r\n\r\nexport function castScalar(v: number, from: string, to: string): number {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    if (from === \"f32\") {\r\n        if (to === \"i32\" || to === \"x32\") {\r\n            _f32[0] = v;\r\n            return _f32_i32[0];\r\n        } else if (to === \"u32\") {\r\n            _f32[0] = v;\r\n            return _f32_u32[0];\r\n        }\r\n    } else if (from === \"i32\" || from === \"x32\") {\r\n        if (to === \"f32\") {\r\n            _i32[0] = v;\r\n            return _i32_f32[0];\r\n        } else if (to === \"u32\") {\r\n            _i32[0] = v;\r\n            return _i32_u32[0];\r\n        }\r\n    } else if (from === \"u32\") {\r\n        if (to === \"f32\") {\r\n            _u32[0] = v;\r\n            return _u32_f32[0];\r\n        } else if (to === \"i32\" || to === \"x32\") {\r\n            _u32[0] = v;\r\n            return _u32_i32[0];\r\n        }\r\n    }\r\n\r\n    console.error(`Unsupported cast from ${from} to ${to}`);\r\n    return v;\r\n}\r\n\r\nexport function castVector(v: number[], from: string, to: string): number[] {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    const cast = new Array<number>(v.length);\r\n    for (let i = 0; i < v.length; i++) {\r\n        cast[i] = castScalar(v[i], from, to);\r\n    }\r\n\r\n    return cast;\r\n}\r\n", "/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nimport { TokenTypes } from \"../wgsl_scanner.js\";\r\nimport { Type, Struct, Alias, Override, Var, Node, Function, VariableExpr, CreateExpr,\r\n    Let, CallExpr, Call, Argument, Member, Attribute, ArrayType, SamplerType, TemplateType, \r\n    PointerType } from \"../wgsl_ast.js\";\r\nimport { _BlockStart, _BlockEnd } from \"../wgsl_ast.js\";\r\nimport { FunctionInfo, VariableInfo, AliasInfo, OverrideInfo, PointerInfo,\r\n  StructInfo, TypeInfo, MemberInfo, ArrayInfo, TemplateInfo, OutputInfo,\r\n  InputInfo, ArgumentInfo, ResourceType, EntryFunctions } from \"./info.js\";\r\nimport { isArray } from \"../utils/cast.js\";\r\n \r\nclass _FunctionResources {\r\n  node: Function;\r\n  resources: VariableInfo[] | null = null;\r\n  inUse: boolean = false;\r\n  info: FunctionInfo | null = null;\r\n  constructor(node: Function) {\r\n    this.node = node;\r\n  }\r\n}\r\n\r\nclass _TypeSize {\r\n  align: number;\r\n  size: number;\r\n\r\n  constructor(align: number, size: number) {\r\n    this.align = align;\r\n    this.size = size;\r\n  }\r\n}\r\n\r\nexport class Reflect {\r\n  /// All top-level uniform vars in the shader.\r\n  uniforms: VariableInfo[] = [];\r\n  /// All top-level storage vars in the shader.\r\n  storage: VariableInfo[] = [];\r\n  /// All top-level texture vars in the shader;\r\n  textures: VariableInfo[] = [];\r\n  // All top-level sampler vars in the shader.\r\n  samplers: VariableInfo[] = [];\r\n  /// All top-level type aliases in the shader.\r\n  aliases: AliasInfo[] = [];\r\n  /// All top-level overrides in the shader.\r\n  overrides: OverrideInfo[] = [];\r\n  /// All top-level structs in the shader.\r\n  structs: StructInfo[] = [];\r\n  /// All entry functions in the shader: vertex, fragment, and/or compute.\r\n  entry: EntryFunctions = new EntryFunctions();\r\n  /// All functions in the shader, including entry functions.\r\n  functions: FunctionInfo[] = [];\r\n\r\n  _types: Map<Type, TypeInfo> = new Map();\r\n  _functions: Map<string, _FunctionResources> = new Map();\r\n\r\n  _isStorageTexture(type: TypeInfo): boolean {\r\n    return (\r\n      type.name == \"texture_storage_1d\" ||\r\n      type.name == \"texture_storage_2d\" ||\r\n      type.name == \"texture_storage_2d_array\" ||\r\n      type.name == \"texture_storage_3d\"\r\n    );\r\n  }\r\n\r\n  updateAST(ast: Node[]): void {\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        this._functions.set(node.name, new _FunctionResources(node as Function));\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Struct) {\r\n        const info = this.getTypeInfo(node as Struct, null);\r\n        if (info instanceof StructInfo) {\r\n          this.structs.push(info as StructInfo);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Alias) {\r\n        this.aliases.push(this._getAliasInfo(node as Alias));\r\n        continue;\r\n      }\r\n\r\n      if (node instanceof Override) {\r\n        const v = node as Override;\r\n        const id = this._getAttributeNum(v.attributes, \"id\", 0);\r\n        const type = v.type != null ? this.getTypeInfo(v.type, v.attributes) : null;\r\n        this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\r\n        continue;\r\n      }\r\n\r\n      if (this._isUniformVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.uniforms.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isStorageVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.storage.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isTextureVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, \r\n            isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        if (isStorageTexture) {\r\n          this.storage.push(varInfo);\r\n        } else {\r\n          this.textures.push(varInfo);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (this._isSamplerVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\r\n        this.samplers.push(varInfo);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        const vertexStage = this._getAttribute(node, \"vertex\");\r\n        const fragmentStage = this._getAttribute(node, \"fragment\");\r\n        const computeStage = this._getAttribute(node, \"compute\");\r\n        const stage = vertexStage || fragmentStage || computeStage;\r\n\r\n        const fn = new FunctionInfo(node.name, stage?.name, node.attributes);\r\n        fn.attributes = node.attributes;\r\n        fn.startLine = node.startLine;\r\n        fn.endLine = node.endLine;\r\n        this.functions.push(fn);\r\n        this._functions.get(node.name)!.info = fn;\r\n\r\n        if (stage) {\r\n          this._functions.get(node.name)!.inUse = true;\r\n          fn.inUse = true;\r\n          fn.resources = this._findResources(node, !!stage);\r\n          fn.inputs = this._getInputs(node.args);\r\n          fn.outputs = this._getOutputs(node.returnType);\r\n          this.entry[stage.name].push(fn);\r\n        }\r\n\r\n        fn.arguments = node.args.map(\r\n          (arg) => new ArgumentInfo(arg.name, this.getTypeInfo(arg.type, arg.attributes), arg.attributes)\r\n        );\r\n\r\n        fn.returnType = node.returnType ? this.getTypeInfo(node.returnType, node.attributes) : null;\r\n\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      if (fn.info) {\r\n        fn.info.inUse = fn.inUse;\r\n        this._addCalls(fn.node, fn.info.calls);\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      fn.node.search((node) => {\r\n        if (node instanceof Attribute) {\r\n          if (node.value) {\r\n            if (isArray(node.value)) {\r\n              for (const value of node.value) {\r\n                for (const override of this.overrides) {\r\n                  if (value === override.name) {\r\n                    fn.info?.overrides.push(override);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              for (const override of this.overrides) {\r\n                if (node.value === override.name) {\r\n                  fn.info?.overrides.push(override);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (node instanceof VariableExpr) {\r\n          for (const override of this.overrides) {\r\n            if (node.name === override.name) {\r\n              fn.info?.overrides.push(override);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      this._markStructsInUse(u.type);\r\n    }\r\n    for (const s of this.storage) {\r\n      this._markStructsInUse(s.type);\r\n    }\r\n  }\r\n\r\n  getStructInfo(name: string): StructInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getOverrideInfo(name: string): OverrideInfo | null {\r\n    for (const o of this.overrides) {\r\n      if (o.name == name) {\r\n        return o;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _markStructsInUse(type: TypeInfo) {\r\n    if (!type) {\r\n      return;\r\n    }\r\n    if (type.isStruct) {\r\n      (type as StructInfo).inUse = true;\r\n      if ((type as StructInfo).members) {\r\n        for (const m of (type as StructInfo).members) {\r\n          this._markStructsInUse(m.type);\r\n        }\r\n      }\r\n    } else if (type.isArray) {\r\n      this._markStructsInUse((type as ArrayInfo).format);\r\n    } else if (type.isTemplate) {\r\n      if ((type as TemplateInfo).format) {\r\n        this._markStructsInUse((type as TemplateInfo).format!);\r\n      }\r\n    } else {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias) {\r\n        this._markStructsInUse(alias);\r\n      }\r\n    }\r\n  }\r\n\r\n  _addCalls(fn: Function, calls: Set<FunctionInfo>, ) {\r\n    for (const call of fn.calls) {\r\n      const info = this._functions.get(call.name)?.info;\r\n      if (info) {\r\n        calls.add(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Find a resource by its group and binding.\r\n  findResource(group: number, binding: number, entry?: string) {\r\n    if (entry) {\r\n      for (const fn of this.entry.compute) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.vertex) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.fragment) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      if (u.group == group && u.binding == binding) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.group == group && t.binding == binding) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findResource(name: string): VariableInfo | null {\r\n    for (const u of this.uniforms) {\r\n      if (u.name == name) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.name == name) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  _markStructsFromAST(type: Type) {\r\n    const info = this.getTypeInfo(type, null);\r\n    this._markStructsInUse(info);\r\n  }\r\n\r\n  _findResources(fn: Node, isEntry: boolean): VariableInfo[] {\r\n    const resources: any[] = [];\r\n    const self = this;\r\n    const varStack: any[] = [];\r\n    fn.search((node) => {\r\n      if (node instanceof _BlockStart) {\r\n        varStack.push({});\r\n      } else if (node instanceof _BlockEnd) {\r\n        varStack.pop();\r\n      } else if (node instanceof Var) {\r\n        const v = node as Var;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof CreateExpr) {\r\n        const c = node as CreateExpr;\r\n        if (isEntry && c.type !== null) {\r\n          this._markStructsFromAST(c.type);\r\n        }\r\n      } else if (node instanceof Let) {\r\n        const v = node as Let;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof VariableExpr) {\r\n        const v = node as VariableExpr;\r\n        // Check to see if the variable is a local variable before checking to see if it's\r\n        // a resource.\r\n        if (varStack.length > 0) {\r\n          const varInfo = varStack[varStack.length - 1][v.name];\r\n          if (varInfo) {\r\n            return;\r\n          }\r\n        }\r\n        const varInfo = self._findResource(v.name);\r\n        if (varInfo) {\r\n          resources.push(varInfo);\r\n        }\r\n      } else if (node instanceof CallExpr) {\r\n        const c = node as CallExpr;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      } else if (node instanceof Call) {\r\n        const c = node as Call;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      }\r\n    });\r\n    return [...new Map(resources.map(r => [r.name, r])).values()];\r\n  }\r\n\r\n  getBindGroups(): Array<VariableInfo[]> {\r\n    const groups: Array<VariableInfo[]> = [];\r\n\r\n    function _makeRoom(group: number, binding: number) {\r\n      if (group >= groups.length) {\r\n        groups.length = group + 1;\r\n      }\r\n\r\n      if (groups[group] === undefined) {\r\n        groups[group] = [];\r\n      }\r\n\r\n      if (binding >= groups[group].length) {\r\n        groups[group].length = binding + 1;\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const u of this.storage) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const t of this.textures) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    for (const t of this.samplers) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  _getOutputs(\r\n    type: Type,\r\n    outputs: OutputInfo[] | undefined = undefined\r\n  ): OutputInfo[] {\r\n    if (outputs === undefined) {\r\n      outputs = [];\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      this._getStructOutputs(type, outputs);\r\n    } else {\r\n      const output = this._getOutputInfo(type);\r\n      if (output !== null) {\r\n        outputs.push(output);\r\n      }\r\n    }\r\n\r\n    return outputs;\r\n  }\r\n\r\n  _getStructOutputs(struct: Struct, outputs: OutputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructOutputs(m.type, outputs);\r\n      } else {\r\n        const location =\r\n          this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\r\n        if (location !== null) {\r\n          const typeInfo = this.getTypeInfo(m.type, m.type.attributes);\r\n          const locationValue = this._parseInt(location.value);\r\n          const info = new OutputInfo(\r\n            m.name,\r\n            typeInfo,\r\n            location.name,\r\n            locationValue\r\n          );\r\n          outputs.push(info);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getOutputInfo(type: Type): OutputInfo | null {\r\n    const location =\r\n      this._getAttribute(type, \"location\") ||\r\n      this._getAttribute(type, \"builtin\");\r\n    if (location !== null) {\r\n      const typeInfo = this.getTypeInfo(type, type.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getInputs(\r\n    args: Argument[],\r\n    inputs: InputInfo[] | undefined = undefined\r\n  ): InputInfo[] {\r\n    if (inputs === undefined) {\r\n      inputs = [];\r\n    }\r\n\r\n    for (const arg of args) {\r\n      if (arg.type instanceof Struct) {\r\n        this._getStructInputs(arg.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(arg);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n\r\n    return inputs;\r\n  }\r\n\r\n  _getStructInputs(struct: Struct, inputs: InputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructInputs(m.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(m);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getInputInfo(node: Member | Argument): InputInfo | null {\r\n    const location =\r\n      this._getAttribute(node, \"location\") ||\r\n      this._getAttribute(node, \"builtin\");\r\n    if (location !== null) {\r\n      const interpolation = this._getAttribute(node, \"interpolation\");\r\n      const type = this.getTypeInfo(node.type, node.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new InputInfo(node.name, type, location.name, locationValue);\r\n      if (interpolation !== null) {\r\n        info.interpolation = this._parseString(interpolation.value);\r\n      }\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _parseString(s: string | string[]): string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    return s;\r\n  }\r\n\r\n  _parseInt(s: string | string[]): number | string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    const n = parseInt(s);\r\n    return isNaN(n) ? s : n;\r\n  }\r\n\r\n  _getAlias(name: string): TypeInfo | null {\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAliasInfo(node: Alias): AliasInfo {\r\n    return new AliasInfo(node.name, this.getTypeInfo(node.type!, null));\r\n  }\r\n\r\n  getTypeInfoByName(name: string): TypeInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTypeInfo(type: Type, attributes: Attribute[] | null = null): TypeInfo {\r\n    if (this._types.has(type)) {\r\n      return this._types.get(type)!;\r\n    }\r\n\r\n    if (type instanceof PointerType) {\r\n      const t = type.type ? this.getTypeInfo(type.type!, type.attributes) : null;\r\n      const info = new PointerInfo(type.name, t, attributes);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof ArrayType) {\r\n      const a = type as ArrayType;\r\n      const t = a.format ? this.getTypeInfo(a.format!, a.attributes) : null;\r\n      const info = new ArrayInfo(a.name, attributes);\r\n      info.format = t;\r\n      info.count = a.count;\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      const s = type as Struct;\r\n      const info = new StructInfo(s.name, attributes);\r\n      info.startLine = s.startLine;\r\n      info.endLine = s.endLine;\r\n      for (const m of s.members) {\r\n        const t = this.getTypeInfo(m.type!, m.attributes);\r\n        info.members.push(new MemberInfo(m.name, t, m.attributes));\r\n      }\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof SamplerType) {\r\n      const s = type as SamplerType;\r\n      const formatIsType = s.format instanceof Type;\r\n      const format = s.format\r\n        ? formatIsType\r\n          ? this.getTypeInfo(s.format! as Type, null)\r\n          : new TypeInfo(s.format! as string, null)\r\n        : null;\r\n      const info = new TemplateInfo(s.name, format, attributes, s.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof TemplateType) {\r\n      const t = type as TemplateType;\r\n      const format = t.format ? this.getTypeInfo(t.format!, null) : null;\r\n      const info = new TemplateInfo(t.name, format, attributes, t.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    const info = new TypeInfo(type.name, attributes);\r\n    this._types.set(type, info);\r\n    this._updateTypeInfo(info);\r\n    return info;\r\n  }\r\n\r\n  _updateTypeInfo(type: TypeInfo) {\r\n    const typeSize = this._getTypeSize(type);\r\n    type.size = typeSize?.size ?? 0;\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      if (type[\"format\"]) {\r\n        const formatInfo = this._getTypeSize(type[\"format\"]);\r\n        // Array stride is the maximum of the format size and alignment.\r\n        // In the case of a vec3f, the size is 12 bytes, but the alignment is 16 bytes.\r\n        // Buffer alignment is therefore 16 bytes.\r\n        type.stride = Math.max(formatInfo?.size ?? 0, formatInfo?.align ?? 0);\r\n        this._updateTypeInfo(type[\"format\"]);\r\n      }\r\n    }\r\n\r\n    if (type instanceof PointerInfo) {\r\n      this._updateTypeInfo(type[\"format\"]);\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      this._updateStructInfo(type);\r\n    }\r\n  }\r\n\r\n  _updateStructInfo(struct: StructInfo) {\r\n    let offset = 0;\r\n    let lastSize = 0;\r\n    let lastOffset = 0;\r\n    let structAlign = 0;\r\n\r\n    for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n      const member = struct.members[mi];\r\n\r\n      const sizeInfo = this._getTypeSize(member);\r\n      if (!sizeInfo) {\r\n        continue;\r\n      }\r\n\r\n      const type = this._getAlias(member.type.name) ?? member.type;\r\n      const align = sizeInfo.align;\r\n      const size = sizeInfo.size;\r\n      offset = this._roundUp(align, offset + lastSize);\r\n      lastSize = size;\r\n      lastOffset = offset;\r\n      structAlign = Math.max(structAlign, align);\r\n\r\n      member.offset = offset;\r\n      member.size = size;\r\n\r\n      this._updateTypeInfo(member.type);\r\n    }\r\n\r\n    struct.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n    struct.align = structAlign;\r\n  }\r\n\r\n  _getTypeSize(\r\n    type: TypeInfo | MemberInfo | null | undefined\r\n  ): _TypeSize | null {\r\n    if (type === null || type === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\r\n    const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\r\n\r\n    if (type instanceof MemberInfo) {\r\n      type = type.type;\r\n    }\r\n\r\n    if (type instanceof TypeInfo) {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias !== null) {\r\n        type = alias;\r\n      }\r\n    }\r\n\r\n    {\r\n      const info = Reflect._typeInfo[type.name];\r\n      if (info !== undefined) {\r\n        const divisor = type[\"format\"]?.name === \"f16\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const info =\r\n        Reflect._typeInfo[type.name.substring(0, type.name.length - 1)];\r\n      if (info) {\r\n        const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      let arrayType = type as ArrayInfo;\r\n      let align = 8;\r\n      let size = 8;\r\n      // Type                 AlignOf(T)          Sizeof(T)\r\n      // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n      // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n      //\r\n      // @stride(Q)\r\n      // array<E, N>          AlignOf(E)          N * Q\r\n      //\r\n      // @stride(Q)\r\n      // array<E>             AlignOf(E)          Nruntime * Q\r\n      //const E = type.format.name;\r\n      const E = this._getTypeSize(arrayType.format);\r\n      if (E !== null) {\r\n        size = E.size;\r\n        align = E.align;\r\n      }\r\n\r\n      const N = arrayType.count;\r\n\r\n      const stride = this._getAttributeNum(\r\n        type?.attributes ?? null,\r\n        \"stride\",\r\n        this._roundUp(align, size)\r\n      );\r\n      size = N * stride;\r\n\r\n      if (explicitSize) {\r\n        size = explicitSize;\r\n      }\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      let align = 0;\r\n      let size = 0;\r\n      // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n      //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n      //                          Where L is the last member of the structure\r\n      let offset = 0;\r\n      let lastSize = 0;\r\n      let lastOffset = 0;\r\n      for (const m of type.members) {\r\n        const mi = this._getTypeSize(m.type);\r\n        if (mi !== null) {\r\n          align = Math.max(mi.align, align);\r\n          offset = this._roundUp(mi.align, offset + lastSize);\r\n          lastSize = mi.size;\r\n          lastOffset = offset;\r\n        }\r\n      }\r\n      size = this._roundUp(align, lastOffset + lastSize);\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _isUniformVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"uniform\";\r\n  }\r\n\r\n  _isStorageVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"storage\";\r\n  }\r\n\r\n  _isTextureVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._textureTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _isSamplerVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._samplerTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _getAttribute(node: Node, name: string): Attribute | null {\r\n    const obj = node as Object;\r\n    if (!obj || !obj[\"attributes\"]) {\r\n      return null;\r\n    }\r\n    const attrs = obj[\"attributes\"];\r\n    for (let a of attrs) {\r\n      if (a.name == name) {\r\n        return a;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAttributeNum(\r\n    attributes: Attribute[] | null,\r\n    name: string,\r\n    defaultValue: number\r\n  ): number {\r\n    if (attributes === null) {\r\n      return defaultValue;\r\n    }\r\n    for (let a of attributes) {\r\n      if (a.name == name) {\r\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\r\n        if (v instanceof Array) {\r\n          v = v[0];\r\n        }\r\n        if (typeof v === \"number\") {\r\n          return v;\r\n        }\r\n        if (typeof v === \"string\") {\r\n          return parseInt(v);\r\n        }\r\n        return defaultValue;\r\n      }\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  _roundUp(k: number, n: number): number {\r\n    return Math.ceil(n / k) * k;\r\n  }\r\n\r\n  // Type                 AlignOf(T)          Sizeof(T)\r\n  // i32, u32, or f32     4                   4\r\n  // atomic<T>            4                   4\r\n  // vec2<T>              8                   8\r\n  // vec3<T>              16                  12\r\n  // vec4<T>              16                  16\r\n  // mat2x2<f32>          8                   16\r\n  // mat3x2<f32>          8                   24\r\n  // mat4x2<f32>          8                   32\r\n  // mat2x3<f32>          16                  32\r\n  // mat3x3<f32>          16                  48\r\n  // mat4x3<f32>          16                  64\r\n  // mat2x4<f32>          16                  32\r\n  // mat3x4<f32>          16                  48\r\n  // mat4x4<f32>          16                  64\r\n  static readonly _typeInfo = {\r\n    f16: { align: 2, size: 2 },\r\n    i32: { align: 4, size: 4 },\r\n    u32: { align: 4, size: 4 },\r\n    f32: { align: 4, size: 4 },\r\n    atomic: { align: 4, size: 4 },\r\n    vec2: { align: 8, size: 8 },\r\n    vec3: { align: 16, size: 12 },\r\n    vec4: { align: 16, size: 16 },\r\n    mat2x2: { align: 8, size: 16 },\r\n    mat3x2: { align: 8, size: 24 },\r\n    mat4x2: { align: 8, size: 32 },\r\n    mat2x3: { align: 16, size: 32 },\r\n    mat3x3: { align: 16, size: 48 },\r\n    mat4x3: { align: 16, size: 64 },\r\n    mat2x4: { align: 16, size: 32 },\r\n    mat3x4: { align: 16, size: 48 },\r\n    mat4x4: { align: 16, size: 64 },\r\n  };\r\n\r\n  static readonly _textureTypes = TokenTypes.any_texture_type.map((t) => {\r\n    return t.name;\r\n  });\r\n\r\n  static readonly _samplerTypes = TokenTypes.sampler_type.map((t) => {\r\n    return t.name;\r\n  });\r\n}\r\n", "import { Let, Var, Argument, Function } from \"../wgsl_ast.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\ntype ASTVarNode = Let | Var | Argument;\r\n\r\nlet _id = 0;\r\n\r\nexport class VarRef {\r\n    name: string;\r\n    value: Data;\r\n    node: ASTVarNode | null;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(n: string, v: Data, node: ASTVarNode | null) {\r\n        this.name = n;\r\n        this.value = v;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): VarRef {\r\n        return new VarRef(this.name, this.value, this.node);\r\n    }\r\n};\r\n\r\nexport class FunctionRef {\r\n    name: string;\r\n    node: Function;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(node: Function) {\r\n        this.name = node.name;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): FunctionRef {\r\n        return new FunctionRef(this.node);\r\n    }\r\n};\r\n\r\nexport class ExecContext {\r\n    parent: ExecContext | null = null;\r\n    variables = new Map<string, VarRef>();\r\n    functions = new Map<string, FunctionRef>();\r\n    currentFunctionName = \"\";\r\n    readonly id: number = _id++;\r\n\r\n    constructor(parent?: ExecContext) {\r\n        if (parent) {\r\n            this.parent = parent;\r\n            this.currentFunctionName = parent.currentFunctionName;\r\n        }\r\n    }\r\n\r\n    getVariable(name: string): VarRef | null {\r\n        if (this.variables.has(name)) {\r\n            return this.variables.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getVariable(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getFunction(name: string): FunctionRef | null {\r\n        if (this.functions.has(name)) {\r\n            return this.functions.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getFunction(name);\r\n        }\r\n        return null\r\n    }\r\n\r\n    createVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        this.variables.set(name, new VarRef(name, value, node ?? null));\r\n    }\r\n\r\n    setVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        const v = this.getVariable(name);\r\n        if (v !== null) {\r\n            v.value = value;\r\n        } else {\r\n            this.createVariable(name, value, node);\r\n        }\r\n    }\r\n\r\n    getVariableValue(name: string): Data | null {\r\n        const v = this.getVariable(name);\r\n        return v?.value ?? null;\r\n    }\r\n\r\n    clone(): ExecContext {\r\n        return new ExecContext(this);\r\n    }\r\n};\r\n", "import { Node, Type } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { TypeInfo } from \"../wgsl_reflect.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\nexport class ExecInterface {\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        return null; \r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        return \"\";\r\n    }\r\n}\r\n", "import { CallExpr, Call, UnaryOperator, VariableExpr } from \"../wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { ExecInterface } from \"./exec_interface.js\";\r\nimport { ArrayInfo, TypeInfo } from \"../reflect/info.js\";\r\n\r\nexport class BuiltinFunctions {\r\n    exec: ExecInterface;\r\n\r\n    constructor(exec: ExecInterface) {\r\n        this.exec = exec;\r\n    }\r\n\r\n    getTypeInfo(type: string): TypeInfo | null {\r\n        return this.exec.getTypeInfo(type);\r\n    }\r\n\r\n    // Logical Built-in Functions\r\n    All(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        let isTrue = true;\r\n        if (value instanceof VectorData) {\r\n            value.data.forEach((x: any) => { if (!x) isTrue = false; });\r\n            return new ScalarData(isTrue ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`All() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Any(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const res = value.data.some((v: any) => v);\r\n            return new ScalarData(res ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`Any() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Select(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // select(false, true, condition)\r\n        const condition = this.exec.evalExpression(node.args[2], context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            throw new Error(`Select() expects a bool condition. Line ${node.line}`);\r\n        }\r\n        if (!condition.value) {\r\n            return this.exec.evalExpression(node.args[0], context);\r\n        } else {\r\n            return this.exec.evalExpression(node.args[1], context);\r\n        }\r\n    }\r\n\r\n    // Array Built-in Functions\r\n    ArrayLength(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let arrayArg = node.args[0];\r\n        // TODO: handle \"&\" operator\r\n        if (arrayArg instanceof UnaryOperator) {\r\n            arrayArg = (arrayArg as UnaryOperator).right;\r\n        }\r\n        const arrayData = this.exec.evalExpression(arrayArg, context);\r\n        if (arrayData instanceof TypedData && arrayData.typeInfo.size === 0) {\r\n            const ta = arrayData.typeInfo as ArrayInfo;\r\n            const count = arrayData.buffer.byteLength / ta.stride;\r\n            return new ScalarData(count, this.getTypeInfo(\"u32\"));\r\n        }\r\n        return new ScalarData(arrayData.typeInfo.size, this.getTypeInfo(\"u32\"));\r\n    }\r\n\r\n    // Numeric Built-in Functions\r\n    Abs(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.abs(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), s.typeInfo);\r\n    }\r\n\r\n    Acos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Acosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acosh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const y = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (y instanceof VectorData && x instanceof VectorData) {\r\n            return new VectorData(y.data.map((v: number, i: number) => Math.atan2(v, x.data[i])), y.typeInfo);\r\n        }\r\n        const ys = y as ScalarData;\r\n        const xs = x as ScalarData;\r\n        return new ScalarData(Math.atan2(ys.value, xs.value), y.typeInfo);\r\n    }\r\n\r\n    Ceil(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.ceil(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.ceil(s.value), value.typeInfo);\r\n    }\r\n\r\n    _clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const min = this.exec.evalExpression(node.args[1], context);\r\n        const max = this.exec.evalExpression(node.args[2], context);\r\n        if (value instanceof VectorData && min instanceof VectorData && max instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => this._clamp(v, min.data[i], max.data[i])), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        const minS = min as ScalarData;\r\n        const maxS = max as ScalarData\r\n        return new ScalarData(this._clamp(s.value, minS.value, maxS.value), value.typeInfo);\r\n    }\r\n\r\n    Cos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    CountLeadingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.clz32(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.clz32(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countOneBits(value: number): number {\r\n        let count = 0;\r\n        while (value !== 0) {\r\n            if (value & 1) {\r\n                count++;\r\n            }\r\n            value >>= 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountOneBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countOneBits(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countOneBits(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countTrailingZeros(value: number): number {\r\n        if (value === 0) {\r\n            return 32; // Special case for 0\r\n        }\r\n        let count = 0;\r\n        while ((value & 1) === 0) {\r\n            value >>= 1;\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountTrailingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countTrailingZeros(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countTrailingZeros(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cross(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            if (l.data.length !== 3 || r.data.length !== 3) {\r\n                console.error(`Cross() expects 3D vectors. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            const lv = l.data;\r\n            const rv = r.data;\r\n            return new VectorData([\r\n                lv[1] * rv[2] - rv[1] * lv[2],\r\n                lv[2] * rv[0] - rv[2] * lv[0],\r\n                lv[0] * rv[1] - rv[0] * lv[1],\r\n            ], l.typeInfo);\r\n        }\r\n        console.error(`Cross() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Degrees(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const radToDeg = 180.0 / Math.PI;\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * radToDeg), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * radToDeg, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Determinant(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (m instanceof MatrixData) {\r\n            const mv = m.data;\r\n            const mt = m.typeInfo.getTypeName();\r\n            const isHalf = mt.endsWith(\"h\");\r\n            const formatType = isHalf ? this.getTypeInfo(\"f16\") : this.getTypeInfo(\"f32\");\r\n            if (mt === \"mat2x2\" || mt === \"mat2x2f\" || mt === \"mat2x2h\") {\r\n                return new ScalarData(mv[0] * mv[3] - mv[1] * mv[2], formatType);\r\n            } else if (mt === \"mat2x3\" || mt === \"mat2x3f\" || mt === \"mat2x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat2x4\" || mt === \"mat2x4f\" || mt === \"mat2x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x2\" || mt === \"mat3x2f\" || mt === \"mat3x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x3\" || mt === \"mat3x3f\" || mt === \"mat3x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat3x4\" || mt === \"mat3x4f\" || mt === \"mat3x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x2\" || mt === \"mat4x2f\" || mt === \"mat4x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x3\" || mt === \"mat4x3f\" || mt === \"mat4x3h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x4\" || mt === \"mat4x4f\" || mt === \"mat4x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            }\r\n        }\r\n        console.error(`Determinant expects a matrix argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Distance(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            let sum = 0;\r\n            for (let i = 0; i < l.data.length; ++i) {\r\n                sum += (l.data[i] - r.data[i]) * (l.data[i] - r.data[i]);\r\n            }\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.abs(ls.value - rs.value), l.typeInfo);\r\n    }\r\n\r\n    _dot(e1: Int32Array | Uint32Array | Float32Array, e2: Int32Array | Uint32Array | Float32Array) {\r\n        let dot = 0;\r\n        for (let i = 0; i < e1.length; ++i) {\r\n            dot += e2[i] * e1[i];\r\n        }\r\n        return dot;\r\n    }\r\n\r\n    Dot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new ScalarData(this._dot(l.data, r.data), this.getTypeInfo(\"f32\"));\r\n        }\r\n        console.error(`Dot() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4U8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4U8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4I8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4I8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Exp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.exp(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.exp(s.value), value.typeInfo);\r\n    }\r\n\r\n    Exp2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.pow(2, v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.pow(2, s.value), value.typeInfo);\r\n    }\r\n\r\n    ExtractBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const offset = this.exec.evalExpression(node.args[1], context);\r\n        const count = this.exec.evalExpression(node.args[2], context);\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        if (count.typeInfo.name !== \"u32\" && count.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 count argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => (v >> o) & ((1 << c) - 1)), value.typeInfo);\r\n        }\r\n\r\n        if (value.typeInfo.name !== \"i32\" && value.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        return new ScalarData((v >> o) & ((1 << c) - 1), this.getTypeInfo(\"i32\"));\r\n    }\r\n\r\n    FaceForward(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const e1 = this.exec.evalExpression(node.args[0], context);\r\n        const e2 = this.exec.evalExpression(node.args[1], context);\r\n        const n = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && n instanceof VectorData) {\r\n            const dot = this._dot(e2.data, n.data);\r\n            if (dot < 0) {\r\n                return new VectorData(Array.from(e1.data), e1.typeInfo);\r\n            }\r\n            return new VectorData(e1.data.map((v: number) => -v), e1.typeInfo);\r\n        }\r\n        console.error(`FaceForward() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _firstLeadingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return 31 - Math.clz32(s);  // clz32: count leading zeros\r\n    }\r\n\r\n    FirstLeadingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstLeadingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstLeadingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    _firstTrailingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return Math.log2(s & -s); // n & -n isolates the lowest set bit.  Math.log2 gives its position.\r\n    }\r\n\r\n    FirstTrailingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstTrailingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstTrailingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    Floor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Fma(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const a = this.exec.evalExpression(node.args[0], context);\r\n        const b = this.exec.evalExpression(node.args[1], context);\r\n        const c = this.exec.evalExpression(node.args[2], context);\r\n        if (a instanceof VectorData && b instanceof VectorData && c instanceof VectorData) {\r\n            if (a.data.length !== b.data.length || a.data.length !== c.data.length) {\r\n                console.error(`Fma() expects vectors of the same length. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return new VectorData(a.data.map((v: number, i: number) => v * b.data[i] + c.data[i]), a.typeInfo);\r\n        }\r\n        const av = a as ScalarData;\r\n        const bv = b as ScalarData;\r\n        const cv = c as ScalarData;\r\n        return new ScalarData(av.value * bv.value + cv.value, av.typeInfo);\r\n    }\r\n\r\n    Fract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v - Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value - Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Frexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: frexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    InsertBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const insert = this.exec.evalExpression(node.args[1], context);\r\n        const offset = this.exec.evalExpression(node.args[2], context);\r\n        const count = this.exec.evalExpression(node.args[3], context);\r\n\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`InsertBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n        const mask = ((1 << c) - 1) << o;\r\n        const invMask = ~mask;\r\n\r\n        if (value instanceof VectorData && insert instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => {\r\n                return (v & invMask) | ((insert.data[i] << o) & mask);\r\n            }), value.typeInfo);\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        const i = (insert as ScalarData).value;\r\n        return new ScalarData((v & invMask) | ((i << o) & mask), value.typeInfo);\r\n    }\r\n\r\n    InverseSqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => 1 / Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(1 / Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Ldexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: ldexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Length(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            let sum = 0;\r\n            value.data.forEach((v: number) => { sum += v * v; });\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.log(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log2(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.log2(s.value), value.typeInfo);\r\n    }\r\n\r\n    Max(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.max(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.max(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Min(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.min(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.min(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Mix(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        const a = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && y instanceof VectorData && a instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => x.data[i] * (1 - a.data[i]) + y.data[i] * a.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        const as = a as ScalarData;\r\n        return new ScalarData(xs.value * (1 - as.value) + ys.value * as.value, x.typeInfo);\r\n    }\r\n\r\n    Modf(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v % y.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(xs.value % ys.value, x.typeInfo);\r\n    }\r\n\r\n    Normalize(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const length = (this.Length(node, context) as ScalarData).value;\r\n            return new VectorData(value.data.map((v: number) => v / length), value.typeInfo);\r\n        }\r\n        console.error(`Normalize() expects a vector argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Pow(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => Math.pow(v, y.data[i])), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(Math.pow(xs.value, ys.value), x.typeInfo);\r\n    }\r\n\r\n    QuantizeToF16(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // TODO: actually quantize the f32 to f16\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value, value.typeInfo);\r\n    }\r\n\r\n    Radians(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * Math.PI / 180), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * Math.PI / 180, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Reflect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // e1 - 2 * dot(e2, e1) * e2\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData) {\r\n            const dot = this._dot(e1.data, e2.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => v - 2 * dot * e2.data[i]), e1.typeInfo);\r\n        }\r\n        console.error(`Reflect() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Refract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        let e3 = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && e3 instanceof ScalarData) {\r\n            const dot = this._dot(e2.data, e1.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => {\r\n                const k = 1.0 - e3.value * e3.value * (1.0 - dot * dot);\r\n                if (k < 0) {\r\n                    return 0;\r\n                }\r\n                const sqrtK = Math.sqrt(k);\r\n                return e3.value * v - (e3.value * dot + sqrtK) * e2.data[i];\r\n            }), e1.typeInfo);\r\n        }\r\n\r\n        console.error(`Refract() expects vector arguments and a scalar argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    ReverseBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: reverseBits. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Round(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.round(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.round(s.value), value.typeInfo);\r\n    }\r\n\r\n    Saturate(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.min(Math.max(v, 0), 1)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.min(Math.max(s.value, 0), 1), value.typeInfo);\r\n    }\r\n\r\n    Sign(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sign(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sign(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _smoothstep(edge0: number, edge1: number, x: number): number {\r\n        const t = Math.min(Math.max((x - edge0) / (edge1 - edge0), 0), 1);\r\n        return t * t * (3 - 2 * t);\r\n    }\r\n\r\n    SmoothStep(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge0 = this.exec.evalExpression(node.args[0], context);\r\n        const edge1 = this.exec.evalExpression(node.args[1], context);\r\n        const x = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && edge0 instanceof VectorData && edge1 instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => this._smoothstep(edge0.data[i], edge1.data[i], v)), x.typeInfo);\r\n        }\r\n        const e0 = edge0 as ScalarData;\r\n        const e1 = edge1 as ScalarData;\r\n        const xS = x as ScalarData;\r\n        return new ScalarData(this._smoothstep(e0.value, e1.value, xS.value), x.typeInfo);\r\n    }\r\n\r\n    Sqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Step(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && edge instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v < edge.data[i] ? 0 : 1), x.typeInfo);\r\n        }\r\n        const e = edge as ScalarData;\r\n        const s = x as ScalarData;\r\n        return new ScalarData(s.value < e.value ? 0 : 1, e.typeInfo);\r\n    }\r\n\r\n    Tan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Tanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _getTransposeType(t: TypeInfo): TypeInfo {\r\n        const tname = t.getTypeName();\r\n        if (tname === \"mat2x2f\" || tname === \"mat2x2h\") {\r\n            return t;\r\n        } else if (tname === \"mat2x3f\") {\r\n            return this.getTypeInfo(\"mat3x2f\");\r\n        } else if (tname === \"mat2x3h\") {\r\n            return this.getTypeInfo(\"mat3x2h\");\r\n        } else if (tname === \"mat2x4f\") {\r\n            return this.getTypeInfo(\"mat4x2f\");\r\n        } else if (tname === \"mat2x4h\") {\r\n            return this.getTypeInfo(\"mat4x2h\");\r\n        } else if (tname === \"mat3x2f\") {\r\n            return this.getTypeInfo(\"mat2x3f\");\r\n        } else if (tname === \"mat3x2h\") {\r\n            return this.getTypeInfo(\"mat2x3h\");\r\n        } else if (tname === \"mat3x3f\" || tname === \"mat3x3h\") {\r\n            return t;\r\n        } else if (tname === \"mat3x4f\") {\r\n            return this.getTypeInfo(\"mat4x3f\");\r\n        } else if (tname === \"mat3x4h\") {\r\n            return this.getTypeInfo(\"mat4x3h\");\r\n        } else if (tname === \"mat4x2f\") {\r\n            return this.getTypeInfo(\"mat2x4f\");\r\n        } else if (tname === \"mat4x2h\") {\r\n            return this.getTypeInfo(\"mat2x4h\");\r\n        } else if (tname === \"mat4x3f\") {\r\n            return this.getTypeInfo(\"mat3x4f\");\r\n        } else if (tname === \"mat4x3h\") {\r\n            return this.getTypeInfo(\"mat3x4h\");\r\n        } else if (tname === \"mat4x4f\" || tname === \"mat4x4h\") {\r\n            return t;\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${tname}`);\r\n        return t;\r\n    }\r\n\r\n    Transpose(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (!(m instanceof MatrixData)) {\r\n            console.error(`Transpose() expects a matrix argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const ttype = this._getTransposeType(m.typeInfo);\r\n\r\n        if (m.typeInfo.name === \"mat2x2\" || m.typeInfo.name === \"mat2x2f\" || m.typeInfo.name === \"mat2x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[2], mv[1], mv[3]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x3\" || m.typeInfo.name === \"mat2x3f\" || m.typeInfo.name === \"mat2x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x4\" || m.typeInfo.name === \"mat2x4f\" || m.typeInfo.name === \"mat2x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x2\" || m.typeInfo.name === \"mat3x2f\" || m.typeInfo.name === \"mat3x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[1], mv[4], mv[2], mv[5]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x3\" || m.typeInfo.name === \"mat3x3f\" || m.typeInfo.name === \"mat3x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7], mv[2], mv[5], mv[8]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x4\" || m.typeInfo.name === \"mat3x4f\" || m.typeInfo.name === \"mat3x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13], mv[2], mv[6], mv[10], mv[14]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x2\" || m.typeInfo.name === \"mat4x2f\" || m.typeInfo.name === \"mat4x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[1], mv[5], mv[2], mv[6]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x3\" || m.typeInfo.name === \"mat4x3f\" || m.typeInfo.name === \"mat4x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[1], mv[5], mv[9], mv[2], mv[6], mv[10]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x4\" || m.typeInfo.name === \"mat4x4f\" || m.typeInfo.name === \"mat4x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12],\r\n                                   mv[1], mv[5], mv[9], mv[13],\r\n                                   mv[2], mv[6], mv[10], mv[14],\r\n                                   mv[3], mv[7], mv[11], mv[15]], ttype);\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${m.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    Trunc(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.trunc(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.trunc(s.value), value.typeInfo);\r\n    }\r\n\r\n    // Derivative Built-in Functions\r\n    Dpdx(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdx. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdxCoarse. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdxFine\");\r\n        return null;\r\n    }\r\n\r\n    Dpdy(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdy\");\r\n        return null;\r\n    }\r\n\r\n    DpdyCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyCoarse\");\r\n        return null;\r\n    }\r\n\r\n    DpdyFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyFine\");\r\n        return null;\r\n    }\r\n\r\n    Fwidth(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidth\");\r\n        return null;\r\n    }\r\n\r\n    FwidthCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthCoarse\");\r\n        return null;\r\n    }\r\n\r\n    FwidthFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthFine\");\r\n        return null;\r\n    }\r\n\r\n    // Texture Built-in Functions\r\n    TextureDimensions(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const level = node.args.length > 1 ? (this.exec.evalExpression(node.args[1], context) as ScalarData).value : 0;\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                if (level < 0 || level >= texture.mipLevelCount) {\r\n                    console.error(`Invalid mip level for textureDimensions. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const textureSize = texture.getMipLevelSize(level);\r\n\r\n                const dimension = texture.dimension;\r\n\r\n                if (dimension === \"1d\") {\r\n                    return new ScalarData(textureSize[0], this.getTypeInfo(\"u32\"));\r\n                } else if (dimension === \"3d\") {\r\n                    return new VectorData(textureSize, this.getTypeInfo(\"vec3u\"));\r\n                } else if (dimension === \"2d\") {\r\n                    return new VectorData(textureSize.slice(0, 2), this.getTypeInfo(\"vec2u\"));\r\n                } else {\r\n                    console.error(`Invalid texture dimension ${dimension} not found. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureDimensions. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureGather(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGather\");\r\n        return null;\r\n    }\r\n\r\n    TextureGatherCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGatherCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const level = node.args.length > 2 ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureLoad. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= texture.width || y < 0 || y >= texture.height) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const texel = texture.getPixel(x, y, 0, level);\r\n                if (texel === null) {\r\n                    console.error(`Invalid texture format for textureLoad. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return new VectorData(texel, this.getTypeInfo(\"vec4f\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureLoad. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLayers(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.depthOrArrayLayers, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLayers. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLevels(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.mipLevelCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLevels. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumSamples(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.sampleCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumSamples. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureSample(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSample\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBias(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBias\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompareLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompareLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleGrad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleGrad\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBaseClampToEdge(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBaseClampToEdge\");\r\n        return null;\r\n    }\r\n\r\n    TextureStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const index = (node.args.length === 4) ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n        const value = (node.args.length === 4) ? (this.exec.evalExpression(node.args[3], context) as VectorData).data :\r\n            (this.exec.evalExpression(node.args[2], context) as VectorData).data;\r\n\r\n        if (value.length !== 4) {\r\n            console.error(`Invalid value argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const textureSize = texture.getMipLevelSize(0);\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= textureSize[0] || y < 0 || y >= textureSize[1]) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                texture.setPixel(x, y, 0, index, Array.from(value));\r\n\r\n                return null;\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureStore. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    // Atomic Built-in Functions\r\n    AtomicLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        return currentValue;\r\n    }\r\n\r\n    AtomicStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    AtomicAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value += value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicSub(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value -= value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.max(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.min(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value & value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value | value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value ^ value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicExchange(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicCompareExchangeWeak(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: atomicCompareExchangeWeak\");\r\n        return null;\r\n    }\r\n\r\n    // Data Packing Built-in Functions\r\n    Pack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Data Unpacking Built-in Functions\r\n    Unpack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Synchronization Functions\r\n    StorageBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    TextureBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupUniformLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    // Subgroup Functions\r\n    SubgroupAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAll(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAll\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAnd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAny(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAny\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBallot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBallot\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcastFirst(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcastFirst\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupElect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupElect\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMax\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMin\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupOr\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffle(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffle\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleDown(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleDown\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleUp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleUp\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleXor\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupXor\");\r\n        return null;\r\n    }\r\n\r\n    // Quad Functions\r\n    QuadBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapDiagonal(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapDiagonal\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapX(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapX\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapY(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapY\");\r\n        return null;\r\n    }\r\n}\r\n", "import { TypeInfo } from '../reflect/info';\r\n\r\nexport const VectorTypeSize = {\r\n    \"vec2\": 2, \"vec2f\": 2, \"vec2i\": 2, \"vec2u\": 2, \"vec2b\": 2, \"vec2h\": 2,\r\n    \"vec3\": 3, \"vec3f\": 3, \"vec3i\": 3, \"vec3u\": 3, \"vec3b\": 3, \"vec3h\": 3,\r\n    \"vec4\": 4, \"vec4f\": 4, \"vec4i\": 4, \"vec4u\": 4, \"vec4b\": 4, \"vec4h\": 4\r\n};\r\n\r\nexport const MatrixTypeSize = {\r\n    \"mat2x2\": [2, 2, 4], \"mat2x2f\": [2, 2, 4], \"mat2x2h\": [2, 2, 4],\r\n    \"mat2x3\": [2, 3, 6], \"mat2x3f\": [2, 3, 6], \"mat2x3h\": [2, 3, 6],\r\n    \"mat2x4\": [2, 4, 8], \"mat2x4f\": [2, 4, 8], \"mat2x4h\": [2, 4, 8],\r\n    \"mat3x2\": [3, 2, 6], \"mat3x2f\": [3, 2, 6], \"mat3x2h\": [3, 2, 6],\r\n    \"mat3x3\": [3, 3, 9], \"mat3x3f\": [3, 3, 9], \"mat3x3h\": [3, 3, 9],\r\n    \"mat3x4\": [3, 4, 12], \"mat3x4f\": [3, 4, 12], \"mat3x4h\": [3, 4, 12],\r\n    \"mat4x2\": [4, 2, 8], \"mat4x2f\": [4, 2, 8], \"mat4x2h\": [4, 2, 8],\r\n    \"mat4x3\": [4, 3, 12], \"mat4x3f\": [4, 3, 12], \"mat4x3h\": [4, 3, 12],\r\n    \"mat4x4\": [4, 4, 16], \"mat4x4f\": [4, 4, 16], \"mat4x4h\": [4, 4, 16]\r\n};\r\n\r\nexport const MatrixTransposeType = {\r\n    \"mat2x2\": \"mat2x2\", \"mat2x2f\": \"mat2x2f\", \"mat2x2h\": \"mat2x2h\",\r\n    \"mat2x3\": \"mat3x2\", \"mat2x3f\": \"mat3x2f\", \"mat2x3h\": \"mat3x2h\",\r\n    \"mat2x4\": \"mat4x2\", \"mat2x4f\": \"mat4x2f\", \"mat2x4h\": \"mat4x2h\",\r\n    \"mat3x2\": \"mat2x3\", \"mat3x2f\": \"mat2x3f\", \"mat3x2h\": \"mat2x3h\",\r\n    \"mat3x3\": \"mat3x3\", \"mat3x3f\": \"mat3x3f\", \"mat3x3h\": \"mat3x3h\",\r\n    \"mat3x4\": \"mat4x3\", \"mat3x4f\": \"mat4x3f\", \"mat3x4h\": \"mat4x3h\",\r\n    \"mat4x2\": \"mat2x4\", \"mat4x2f\": \"mat2x4f\", \"mat4x2h\": \"mat2x4h\",\r\n    \"mat4x3\": \"mat4x3\", \"mat4x3f\": \"mat4x3f\", \"mat4x3h\": \"mat4x3h\",\r\n    \"mat4x4\": \"mat4x4\", \"mat4x4f\": \"mat4x4f\", \"mat4x4h\": \"mat4x4h\"\r\n};\r\n\r\nexport function matrixTranspose(matrix: number[], t: TypeInfo) {\r\n    if (MatrixTypeSize[t.name] === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const cols = MatrixTypeSize[t.name][0];\r\n    const rows = MatrixTypeSize[t.name][1];\r\n    const result: number[] = [];\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            result[i * rows + j] = matrix[j * cols + i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function matrixMultiply(matrixA: number[], t1: TypeInfo, matrixB: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const k = MatrixTypeSize[t1.name][0];\r\n  const r = MatrixTypeSize[t1.name][1];\r\n  const c = MatrixTypeSize[t2.name][0];\r\n  const k2 = MatrixTypeSize[t2.name][1];\r\n\r\n  if (k !== k2) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = new Array(c * r);\r\n\r\n  for (let j = 0; j < r; j++) { // Iterate through columns of result\r\n    for (let i = 0; i < c; i++) { // Iterate through rows of result\r\n      let sum = 0;\r\n      for (let l = 0; l < k; l++) {\r\n        sum += matrixA[l * r + j] * matrixB[i * k + l]; // Access column-major elements\r\n      }\r\n      result[j * c + i] = sum; // Store in column-major order\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function matrixVectorMultiply(matrix: number[], t1: TypeInfo, vector: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || VectorTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t1.name][0];\r\n  const rows = MatrixTypeSize[t1.name][1];\r\n  \r\n  if (cols !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const resultVec = new Array(rows);\r\n  // Perform matrix-vector multiplication (column-major)\r\n  for (let i = 0; i < rows; i++) {\r\n    let sum = 0;\r\n    for (let j = 0; j < cols; j++) {\r\n      sum += matrix[j * rows + i] * vector[j]; // Access column-major element\r\n    }\r\n    resultVec[i] = sum;\r\n  }\r\n\r\n  return resultVec;\r\n}\r\n\r\nexport function vectorMatrixMultiply(vector: number[], t1: TypeInfo, matrix: number[], t2: TypeInfo): number[] | null {\r\n  if (VectorTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t2.name][0];\r\n  const rows = MatrixTypeSize[t2.name][1];\r\n\r\n  if (rows !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = [];\r\n  for (let j = 0; j < cols; j++) {\r\n    let sum = 0;\r\n    for (let i = 0; i < rows; i++) {\r\n      sum += vector[i] * matrix[i * cols + j];\r\n    }\r\n    result[j] = sum;\r\n  }\r\n\r\n  return result;\r\n}\r\n", "import { Node, Type, TemplateType, Return, Break, Continue, Let, Var, Const,\r\n    If, For, While, Loop, Continuing, Assign, Increment, Struct, Override, ArrayType,\r\n    Call, Diagnostic, Alias, BinaryOperator, LiteralExpr, Expression,\r\n    VariableExpr, CallExpr, CreateExpr, ConstExpr, BitcastExpr, UnaryOperator,\r\n    ArrayIndex, StringExpr, Function, Switch, SwitchCase, Case, Default, DefaultSelector } from \"./wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData, PointerData, VoidData } from \"./wgsl_ast.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\nimport { TypeInfo, StructInfo, ArrayInfo, TemplateInfo } from \"./reflect/info.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { BuiltinFunctions } from \"./exec/builtin_functions.js\";\r\nimport { isArray, castScalar, castVector } from \"./utils/cast.js\";\r\nimport { matrixMultiply, matrixVectorMultiply, vectorMatrixMultiply, MatrixTypeSize, VectorTypeSize } from \"./utils/matrix.js\";\r\n\r\nexport class WgslExec extends ExecInterface {\r\n    ast: Node[];\r\n    context: ExecContext;\r\n    reflection: Reflect;\r\n    builtins: BuiltinFunctions;\r\n    typeInfo: Object;\r\n\r\n    constructor(ast?: Node[], context?: ExecContext) {\r\n        super();\r\n        this.ast = ast ?? [];\r\n        this.reflection = new Reflect();\r\n        this.reflection.updateAST(this.ast);\r\n\r\n        this.context = context?.clone() ?? new ExecContext();\r\n        this.builtins = new BuiltinFunctions(this);\r\n\r\n        this.typeInfo = {\r\n            \"bool\": this.getTypeInfo(Type.bool),\r\n            \"i32\": this.getTypeInfo(Type.i32),\r\n            \"u32\": this.getTypeInfo(Type.u32),\r\n            \"f32\": this.getTypeInfo(Type.f32),\r\n            \"f16\": this.getTypeInfo(Type.f16),\r\n            \"vec2f\": this.getTypeInfo(TemplateType.vec2f),\r\n            \"vec2u\": this.getTypeInfo(TemplateType.vec2u),\r\n            \"vec2i\": this.getTypeInfo(TemplateType.vec2i),\r\n            \"vec2h\": this.getTypeInfo(TemplateType.vec2h),\r\n            \"vec3f\": this.getTypeInfo(TemplateType.vec3f),\r\n            \"vec3u\": this.getTypeInfo(TemplateType.vec3u),\r\n            \"vec3i\": this.getTypeInfo(TemplateType.vec3i),\r\n            \"vec3h\": this.getTypeInfo(TemplateType.vec3h),\r\n            \"vec4f\": this.getTypeInfo(TemplateType.vec4f),\r\n            \"vec4u\": this.getTypeInfo(TemplateType.vec4u),\r\n            \"vec4i\": this.getTypeInfo(TemplateType.vec4i),\r\n            \"vec4h\": this.getTypeInfo(TemplateType.vec4h),\r\n            \"mat2x2f\": this.getTypeInfo(TemplateType.mat2x2f),\r\n            \"mat2x3f\": this.getTypeInfo(TemplateType.mat2x3f),\r\n            \"mat2x4f\": this.getTypeInfo(TemplateType.mat2x4f),\r\n            \"mat3x2f\": this.getTypeInfo(TemplateType.mat3x2f),\r\n            \"mat3x3f\": this.getTypeInfo(TemplateType.mat3x3f),\r\n            \"mat3x4f\": this.getTypeInfo(TemplateType.mat3x4f),\r\n            \"mat4x2f\": this.getTypeInfo(TemplateType.mat4x2f),\r\n            \"mat4x3f\": this.getTypeInfo(TemplateType.mat4x3f),\r\n            \"mat4x4f\": this.getTypeInfo(TemplateType.mat4x4f),\r\n        };\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const v = this.context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof TypedData) {\r\n            if (v.typeInfo instanceof ArrayInfo) {\r\n                if (v.typeInfo.format.name === \"u32\") {\r\n                    return Array.from(new Uint32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"i32\") {\r\n                    return Array.from(new Int32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"f32\") {\r\n                    return Array.from(new Float32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                }\r\n            }\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    execute(config?: Object): void {\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], this.context);\r\n        }\r\n\r\n        this._execStatements(this.ast, this.context);\r\n    }\r\n\r\n    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object): void {\r\n        const context = this.context.clone();\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        this._execStatements(this.ast, context);\r\n\r\n        const f = context.getFunction(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const width = dispatchCount[0];\r\n        const height = dispatchCount[1];\r\n        const depth = dispatchCount[2];\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                // Texture\r\n                                const textureData = new TextureData(entry.texture, this.getTypeInfo(node.type), entry.descriptor,\r\n                                        entry.texture.view ?? null);\r\n                                v.value = textureData;\r\n                            } else if (entry.uniform !== undefined) {\r\n                                // Uniform buffer\r\n                                v.value = new TypedData(entry.uniform, this.getTypeInfo(node.type));\r\n                            } else {\r\n                                // Storage buffer\r\n                                v.value = new TypedData(entry, this.getTypeInfo(node.type));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let z = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], this.getTypeInfo(\"vec3u\")));\r\n                    this._dispatchWorkgroup(f, [x, y, z], context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static _breakObj = new Data(new TypeInfo(\"BREAK\", null), null);\r\n    static _continueObj = new Data(new TypeInfo(\"CONTINUE\", null), null);\r\n\r\n    execStatement(stmt: Node, context: ExecContext): Data | null {\r\n        if (stmt instanceof Return) {\r\n            return this.evalExpression(stmt.value, context);\r\n        } else if (stmt instanceof Break) {\r\n            if (stmt.condition) {\r\n                const c = this.evalExpression(stmt.condition, context);\r\n                if (!(c instanceof ScalarData)) {\r\n                    throw new Error(`Invalid break-if condition`);\r\n                }\r\n                if (!c.value) {\r\n                    return null;\r\n                }\r\n            }\r\n            return WgslExec._breakObj;\r\n        } else if (stmt instanceof Continue) {\r\n            return WgslExec._continueObj;\r\n        } else if (stmt instanceof Let) {\r\n            this._let(stmt, context);\r\n        } else if (stmt instanceof Var) {\r\n            this._var(stmt, context);\r\n        } else if (stmt instanceof Const) {\r\n            this._const(stmt, context);\r\n        } else if (stmt instanceof Function) {\r\n            this._function(stmt, context);\r\n        } else if (stmt instanceof If) {\r\n            return this._if(stmt, context);\r\n        } else if (stmt instanceof Switch) {\r\n            return this._switch(stmt, context);\r\n        } else if (stmt instanceof For) {\r\n            return this._for(stmt, context);\r\n        } else if (stmt instanceof While) {\r\n            return this._while(stmt, context);\r\n        } else if (stmt instanceof Loop) {\r\n            return this._loop(stmt, context);\r\n        } else if (stmt instanceof Continuing) {\r\n            const subContext = context.clone();\r\n            subContext.currentFunctionName = context.currentFunctionName;\r\n            return this._execStatements(stmt.body, subContext);\r\n        } else if (stmt instanceof Assign) {\r\n            this._assign(stmt, context);\r\n        } else if (stmt instanceof Increment) {\r\n            this._increment(stmt, context);\r\n        } else if (stmt instanceof Struct) {\r\n            return null;\r\n        } else if (stmt instanceof Override) {\r\n            const name = stmt.name;\r\n            if (context.getVariable(name) === null) {\r\n                context.setVariable(name, new ScalarData(0, this.getTypeInfo(\"u32\")));\r\n                //console.error(`Override constant ${name} not found. Line ${stmt.line}`);\r\n            }\r\n        } else if (stmt instanceof Call) {\r\n            this._call(stmt, context);\r\n        } else if (stmt instanceof Diagnostic) {\r\n            return null; // Nothing to do here.\r\n        } else if (stmt instanceof Alias) {\r\n            return null; // Nothing to do here.\r\n        } else {\r\n            console.error(`Invalid statement type.`, stmt, `Line ${stmt.line}`);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof BinaryOperator) {\r\n            return this._evalBinaryOp(node, context);\r\n        } else if (node instanceof LiteralExpr) {\r\n            return this._evalLiteral(node, context);\r\n        } else if (node instanceof VariableExpr) {\r\n            return this._evalVariable(node, context);\r\n        } else if (node instanceof CallExpr) {\r\n            return this._evalCall(node, context);\r\n        } else if (node instanceof CreateExpr) {\r\n            return this._evalCreate(node, context);\r\n        } else if (node instanceof ConstExpr) {\r\n            return this._evalConst(node, context);\r\n        } else if (node instanceof BitcastExpr) {\r\n            return this._evalBitcast(node, context);\r\n        } else if (node instanceof UnaryOperator) {\r\n            return this._evalUnaryOp(node, context);\r\n        }\r\n        console.error(`Invalid expression type`, node, `Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        if (type instanceof Type) {\r\n            const t = this.reflection.getTypeInfo(type as Type);\r\n            if (t !== null) {\r\n                return t;\r\n            }\r\n        }\r\n\r\n        let t = this.typeInfo[type as string] ?? null;\r\n        if (t !== null) {\r\n            return t;\r\n        }\r\n\r\n        t = this.reflection.getTypeInfoByName(type as string);\r\n        return t;\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): void {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (attr.value.length > 0) {\r\n                    // The value could be an override constant\r\n                    const v = context.getVariableValue(attr.value[0]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value[0]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 1) {\r\n                    const v = context.getVariableValue(attr.value[1]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[1] = v.value;\r\n                    } else {\r\n                        workgroupSize[1] = parseInt(attr.value[1]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 2) {\r\n                    const v = context.getVariableValue(attr.value[2]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[2] = v.value;\r\n                    } else {\r\n                        workgroupSize[2] = parseInt(attr.value[2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        const u32 = this.getTypeInfo(\"u32\");\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        for (let z = 0, li = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    this._dispatchExec(f, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext): void {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== undefined) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._execStatements(f.node.body, context);\r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        while (node instanceof UnaryOperator) {\r\n            node = node.right;\r\n        }\r\n\r\n        if (node instanceof VariableExpr) {\r\n            return (node as VariableExpr).name;\r\n        } else {\r\n            console.error(`Unknown variable type`, node, 'Line', node.line);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _execStatements(statements: Node[], context: ExecContext): Data | null {\r\n        for (const stmt of statements) {\r\n            // Block statements are declared as arrays of statements.\r\n            if (stmt instanceof Array) {\r\n                const subContext = context.clone();\r\n                const res = this._execStatements(stmt, subContext);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            const res = this.execStatement(stmt, context);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _call(node: Call, context: ExecContext): void {\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                this._callBuiltinFunction(node, subContext);\r\n            } else {\r\n                const typeInfo = this.getTypeInfo(node.name);\r\n                if (typeInfo) {\r\n                    this._evalCreate(node, context);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.setVariable(arg.name, value, arg);\r\n        }\r\n\r\n        this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _increment(node: Increment, context: ExecContext): void {\r\n        const name = this.getVariableName(node.variable, context);\r\n        const v = context.getVariable(name);\r\n        if (!v) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n        if (node.operator === \"++\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value++;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else if (node.operator === \"--\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value--;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else {\r\n            console.error(`Unknown increment operator ${node.operator}. Line ${node.line}`);\r\n        }\r\n    }\r\n\r\n    _getVariableData(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof VariableExpr) {\r\n            const name = this.getVariableName(node, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return _var.value.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (node instanceof UnaryOperator) {\r\n            if (node.operator === \"*\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                if (!(refData instanceof PointerData)) {\r\n                    console.error(`Variable ${node.right} is not a pointer. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return refData.reference.getSubData(this, node.postfix, context);\r\n            } else if (node.operator === \"&\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                return new PointerData(refData);\r\n            } \r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _assign(node: Assign, context: ExecContext): void {\r\n        let v: Data | null = null;\r\n        let name: string = \"<var>\";\r\n\r\n        let postfix: Expression | null = null;\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            const varData = this._getVariableData(node.variable, context);\r\n            const assignValue = this.evalExpression(node.value, context);\r\n            const op = node.operator;\r\n\r\n            if (op === \"=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData &&\r\n                        varData.data.length === assignValue.data.length) {\r\n                        varData.data.set(assignValue.data);\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                    }\r\n                } else if (varData instanceof TypedData && assignValue instanceof TypedData) {\r\n                    if ((varData.buffer.byteLength - varData.offset) >= (assignValue.buffer.byteLength - assignValue.offset)) {\r\n                        if (varData.buffer.byteLength % 4 === 0) {\r\n                            new Uint32Array(varData.buffer, varData.offset, varData.typeInfo.size / 4).set(new Uint32Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size / 4));\r\n                        } else {\r\n                            new Uint8Array(varData.buffer, varData.offset, varData.typeInfo.size).set(new Uint8Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size));\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                console.error(`Invalid assignment. Line ${node.line}`);\r\n                return null;\r\n            } else if (op === \"+=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] + v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment . Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (op === \"-=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] - v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            if (node.variable.operator === \"*\") {\r\n                name = this.getVariableName(node.variable.right, context);\r\n                const _var = context.getVariable(name);\r\n                if (_var && _var.value instanceof PointerData) {\r\n                    v = _var.value.reference;\r\n                } else {\r\n                    console.error(`Variable ${name} is not a pointer. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                let postfix = node.variable.postfix;\r\n                if (!postfix) {\r\n                    let rNode = node.variable.right;\r\n                    while (rNode instanceof UnaryOperator) {\r\n                        if (rNode.postfix) {\r\n                            postfix = rNode.postfix;\r\n                            break;\r\n                        }\r\n                        rNode = rNode.right;\r\n                    }\r\n                }\r\n                if (postfix) {\r\n                    v = v.getSubData(this, postfix, context);\r\n                }\r\n            }\r\n        } else {\r\n            postfix = node.variable.postfix;\r\n            name = this.getVariableName(node.variable, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return;\r\n            }\r\n            v = _var.value;\r\n        }\r\n\r\n        if (v instanceof PointerData) {\r\n            v = v.reference;\r\n        }\r\n\r\n        if (v === null) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n\r\n        const value = this.evalExpression(node.value, context);\r\n\r\n        const op = node.operator;\r\n        if (op !== \"=\") {\r\n            const currentValue = v.getSubData(this, postfix, context);\r\n\r\n            if (currentValue instanceof VectorData && value instanceof ScalarData) {\r\n                const cv = currentValue.data;\r\n                const v = value.value;\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v;\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v;\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v;\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v;\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v;\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v;\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v;\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v;\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v;\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof VectorData && value instanceof VectorData) {\r\n                const cv = currentValue.data;\r\n                const v = value.data;\r\n                if (cv.length !== v.length) {\r\n                    console.error(`Vector length mismatch. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v[i];\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v[i];\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v[i];\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v[i];\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v[i];\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v[i];\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v[i];\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v[i];\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v[i];\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v[i];\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n                if (op === \"+=\") {\r\n                    currentValue.value += value.value;\r\n                } else if (op === \"-=\") {\r\n                    currentValue.value -= value.value;\r\n                } else if (op === \"*=\") {\r\n                    currentValue.value *= value.value;\r\n                } else if (op === \"/=\") {\r\n                    currentValue.value /= value.value;\r\n                } else if (op === \"%=\") {\r\n                    currentValue.value %= value.value;\r\n                } else if (op === \"&=\") {\r\n                    currentValue.value &= value.value;\r\n                } else if (op === \"|=\") {\r\n                    currentValue.value |= value.value;\r\n                } else if (op === \"^=\") {\r\n                    currentValue.value ^= value.value;\r\n                } else if (op === \"<<=\") {\r\n                    currentValue.value <<= value.value;\r\n                } else if (op === \">>=\") {\r\n                    currentValue.value >>= value.value;\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else {\r\n                console.error(`Invalid type for ${node.operator} operator. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            // If the variable is a TypedData, as in a struct or array, and we're assigning a\r\n            // sub portion of it, set the data in the original buffer.\r\n            if (v instanceof TypedData) {\r\n                v.setDataValue(this, currentValue, postfix, context);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (v instanceof TypedData) {\r\n            v.setDataValue(this, value, postfix, context);\r\n        } else if (postfix) {\r\n            if (!(v instanceof VectorData) && !(v instanceof MatrixData)) {\r\n                console.error(`Variable ${name} is not a vector or matrix. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            if (postfix instanceof ArrayIndex) {\r\n                const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n\r\n                if (v instanceof VectorData) {\r\n                    if (value instanceof ScalarData) {\r\n                        v.data[idx] = value.value;\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else if (v instanceof MatrixData) {\r\n                    const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n                    if (idx < 0) {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (value instanceof VectorData) {\r\n                        const typeName = v.typeInfo.getTypeName();\r\n                        if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n                            if (idx < 2 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n                            if (idx < 2 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n                            if (idx < 2 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n                            if (idx < 3 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n                            if (idx < 3 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n                            if (idx < 3 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n                            if (idx < 4 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n                            if (idx < 4 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n                            if (idx < 4 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (postfix instanceof StringExpr) {\r\n                const member = postfix.value;\r\n                if (!(v instanceof VectorData)) {\r\n                    console.error(`Invalid assignment to ${member}. Variable ${name} is not a vector. Line ${node.line}`);\r\n                    return;\r\n                }\r\n                if (value instanceof ScalarData) {\r\n                    if (member.length > 1) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (member === \"x\") {\r\n                        v.data[0] = value.value;\r\n                    } else if (member === \"y\") {\r\n                        if (v.data.length < 2) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[1] = value.value;\r\n                    } else if (member === \"z\") {\r\n                        if (v.data.length < 3) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[2] = value.value;\r\n                    } else if (member === \"w\") {\r\n                        if (v.data.length < 4) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[3] = value.value;\r\n                    }\r\n                } else if (value instanceof VectorData) {\r\n                    if (member.length !== value.data.length) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    for (let i = 0; i < member.length; ++i) {\r\n                        const m = member[i];\r\n                        if (m === \"x\" || m === \"r\") {\r\n                            v.data[0] = value.data[i];\r\n                        } else if (m === \"y\" || m === \"g\") {\r\n                            if (value.data.length < 2) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[1] = value.data[i];\r\n                        } else if (m === \"z\" || m === \"b\") {\r\n                            if (value.data.length < 3) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[2] = value.data[i];\r\n                        } else if (m === \"w\" || m === \"a\") {\r\n                            if (value.data.length < 4) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[3] = value.data[i];\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (v instanceof ScalarData && value instanceof ScalarData) {\r\n                v.value = value.value;\r\n            } else if (v instanceof VectorData && value instanceof VectorData) {\r\n                v.data.set(value.data);\r\n            } else if (v instanceof MatrixData && value instanceof MatrixData) {\r\n                v.data.set(value.data);\r\n            } else {\r\n                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n            }\r\n            //v.value = value;\r\n        }\r\n        return;\r\n    }\r\n\r\n    _function(node: Function, context: ExecContext): void {\r\n        const f = new FunctionRef(node);\r\n        context.functions.set(node.name, f);\r\n    }\r\n\r\n    _const(node: Const, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _let(node: Let, context: ExecContext): void {\r\n        let value: Data | null = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                typeName === \"array\") {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _var(node: Var, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            if (node.type === null) {\r\n                console.error(`Variable ${node.name} has no type. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                node.type instanceof ArrayType || node.type instanceof Struct || node.type instanceof TemplateType) {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _switch(node: Switch, context: ExecContext) : Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        let defaultCase: SwitchCase | null = null;\r\n\r\n        for (const c of node.cases) {\r\n            if (c instanceof Case) {\r\n                for (const selector of c.selectors) {\r\n                    if (selector instanceof DefaultSelector) {\r\n                        defaultCase = c;\r\n                        continue;\r\n                    }\r\n\r\n                    const selectorValue = this.evalExpression(selector, context);\r\n                    if (!(selectorValue instanceof ScalarData)) {\r\n                        console.error(`Invalid case selector. Line ${node.line}`);\r\n                        return null;\r\n                    }\r\n\r\n                    if (selectorValue.value === condition.value) {\r\n                        return this._execStatements(c.body, context);\r\n                    }\r\n                }\r\n            } else if (c instanceof Default) {\r\n                defaultCase = c;\r\n            }\r\n        }\r\n\r\n        if (defaultCase) {\r\n            return this._execStatements(defaultCase.body, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _if(node: If, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (condition.value) {\r\n            return this._execStatements(node.body, context);\r\n        }\r\n\r\n        for (const e of node.elseif) {\r\n            const condition = this.evalExpression(e.condition, context);\r\n            if (!(condition instanceof ScalarData)) {\r\n                console.error(`Invalid if condition. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            if (condition.value) {\r\n                return this._execStatements(e.body, context);\r\n            }\r\n        }\r\n\r\n        if (node.else) {\r\n            return this._execStatements(node.else, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _getScalarValue(v: Data | null): number {\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        console.error(`Expected scalar value.`, v);\r\n        return 0;\r\n    }\r\n\r\n    _for(node: For, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        this.execStatement(node.init, context);\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            }\r\n            if (res !== null && res !== WgslExec._continueObj) {\r\n                return res;\r\n            }\r\n            this.execStatement(node.increment, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _loop(node: Loop, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n\r\n        while (true) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                if (node.continuing) {\r\n                    const cres = this._execStatements(node.continuing.body, context);\r\n                    if (cres === WgslExec._breakObj) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _while(node: While, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                continue;\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _evalBitcast(node: BitcastExpr, context: ExecContext): Data | null {\r\n        const value = this.evalExpression(node.value, context);\r\n        const type = node.type;\r\n\r\n        if (value instanceof ScalarData) {\r\n            const v = castScalar(value.value, value.typeInfo.name, type.name);\r\n            return new ScalarData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        if (value instanceof VectorData) {\r\n            const fromType = value.typeInfo.getTypeName();\r\n            let fromCast = \"\";\r\n            if (fromType.endsWith(\"f\")) {\r\n                fromCast = \"f32\";\r\n            } else if (fromType.endsWith(\"i\")) {\r\n                fromCast = \"i32\";\r\n            } else if (fromType.endsWith(\"u\")) {\r\n                fromCast = \"u32\";\r\n            } else if (fromType.endsWith(\"b\")) {\r\n                fromCast = \"bool\";\r\n            } else if (fromType.endsWith(\"h\")) {\r\n                fromCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${fromType}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const toType = type.getTypeName();\r\n            let toCast = \"\";\r\n            if (toType.endsWith(\"f\")) {\r\n                toCast = \"f32\";\r\n            } else if (toType.endsWith(\"i\")) {\r\n                toCast = \"i32\";\r\n            } else if (toType.endsWith(\"u\")) {\r\n                toCast = \"u32\";\r\n            } else if (toType.endsWith(\"b\")) {\r\n                toCast = \"bool\";\r\n            } else if (toType.endsWith(\"h\")) {\r\n                toCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${toCast}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const v = castVector(Array.from(value.data), fromCast, toCast);\r\n            return new VectorData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        console.error(`TODO: bitcast for ${value.typeInfo.name}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalConst(node: ConstExpr, context: ExecContext): Data | null {\r\n        const data = context.getVariableValue(node.name).clone();\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _evalCreate(node: CreateExpr | CallExpr | Call, context: ExecContext): Data | null {\r\n        if (node instanceof CreateExpr) {\r\n            if (node.type === null) {\r\n                return VoidData.void;\r\n            }\r\n\r\n            const typeName = node.type.getTypeName();\r\n\r\n            switch (typeName) {\r\n                // Constructor Built-in Functions\r\n                // Value Constructor Built-in Functions\r\n                case \"bool\":\r\n                case \"i32\":\r\n                case \"u32\":\r\n                case \"f32\":\r\n                case \"f16\":\r\n                    return this._callConstructorValue(node, context);\r\n                case \"vec2\":\r\n                case \"vec3\":\r\n                case \"vec4\":\r\n                case \"vec2f\":\r\n                case \"vec3f\":\r\n                case \"vec4f\":\r\n                case \"vec2h\":\r\n                case \"vec3h\":\r\n                case \"vec4h\":\r\n                case \"vec2i\":\r\n                case \"vec3i\":\r\n                case \"vec4i\":\r\n                case \"vec2u\":\r\n                case \"vec3u\":\r\n                case \"vec4u\":\r\n                case \"vec2b\":\r\n                case \"vec3b\":\r\n                case \"vec4b\":\r\n                    return this._callConstructorVec(node, context);\r\n                case \"mat2x2\":\r\n                case \"mat2x2f\":\r\n                case \"mat2x2h\":\r\n                case \"mat2x3\":\r\n                case \"mat2x3f\":\r\n                case \"mat2x3h\":\r\n                case \"mat2x4\":\r\n                case \"mat2x4f\":\r\n                case \"mat2x4h\":\r\n                case \"mat3x2\":\r\n                case \"mat3x2f\":\r\n                case \"mat3x2h\":\r\n                case \"mat3x3\":\r\n                case \"mat3x3f\":\r\n                case \"mat3x3h\":\r\n                case \"mat3x4\":\r\n                case \"mat3x4f\":\r\n                case \"mat3x4h\":\r\n                case \"mat4x2\":\r\n                case \"mat4x2f\":\r\n                case \"mat4x2h\":\r\n                case \"mat4x3\":\r\n                case \"mat4x3f\":\r\n                case \"mat4x3h\":\r\n                case \"mat4x4\":\r\n                case \"mat4x4f\":\r\n                case \"mat4x4h\":\r\n                    return this._callConstructorMatrix(node, context);\r\n            }\r\n        }\r\n\r\n        const typeName = (node instanceof CreateExpr) ? node.type.name : node.name;\r\n        const typeInfo = (node instanceof CreateExpr) ? this.getTypeInfo(node.type) : this.getTypeInfo(node.name);\r\n        if (typeInfo === null) {\r\n            console.error(`Unknown type ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (typeInfo.size === 0) {\r\n            return null;\r\n        }\r\n\r\n        const data = new TypedData(new ArrayBuffer(typeInfo.size), typeInfo, 0);\r\n\r\n        // Assign the values in node.args to the data.\r\n        if (typeInfo instanceof StructInfo) {\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const memberInfo = typeInfo.members[i];\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    data.setData(this, value, memberInfo.type, memberInfo.offset, context);\r\n                }\r\n            }\r\n        } else if (typeInfo instanceof ArrayInfo) {\r\n            let offset = 0;\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    if (typeInfo.format === null) {\r\n                        if (value.typeInfo?.name === \"x32\") {\r\n                            typeInfo.format = this.getTypeInfo(\"i32\");\r\n                        } else {\r\n                            typeInfo.format = value.typeInfo;\r\n                        }\r\n                    }\r\n                    data.setData(this, value, typeInfo.format, offset, context);\r\n                    offset += typeInfo.stride;\r\n                }\r\n            }\r\n        } else {\r\n            console.error(`Unknown type \"${typeName}\". Line ${node.line}`);\r\n        }\r\n\r\n        if (node instanceof CreateExpr) {\r\n            return data.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    _evalLiteral(node: LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = typeInfo.name;\r\n        if (typeName === \"x32\" || typeName === \"u32\" || typeName === \"f32\" || typeName === \"f16\" ||\r\n            typeName === \"i32\" || typeName === \"bool\") {\r\n            const data = new ScalarData(node.scalarValue, typeInfo);\r\n            return data;\r\n        }\r\n        if (typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n            typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n            typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n            typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n            typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n            return this._callConstructorVec(node, context);\r\n        }\r\n        if (typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n            typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n            typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n            typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n            typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n            typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n            typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n            typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n            typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\") {\r\n            return this._callConstructorMatrix(node, context);\r\n        }\r\n        return node.value;\r\n    }\r\n\r\n    _evalVariable(node: VariableExpr, context: ExecContext): Data | null {\r\n        const value = context.getVariableValue(node.name);\r\n        if (value === null) {\r\n            return value;\r\n        }\r\n        return value.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n    _maxFormatTypeInfo(x: TypeInfo[]): TypeInfo | null {\r\n        let t = x[0];\r\n        if (t.name === \"f32\") {\r\n            return t;\r\n        }\r\n        for (let i = 1; i < x.length; ++i) {\r\n            const tv = WgslExec._priority.get(t.name);\r\n            const xv = WgslExec._priority.get(x[i].name);\r\n            if (xv < tv) {\r\n                t = x[i];\r\n            }\r\n        }\r\n\r\n        if (t.name === \"x32\") {\r\n            return this.getTypeInfo(\"i32\");\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    _evalUnaryOp(node: UnaryOperator, context: ExecContext): Data | null {\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        if (node.operator === \"&\") { \r\n            return new PointerData(_r);\r\n        } else if (node.operator === \"*\") {\r\n            if (_r instanceof PointerData) {\r\n                return _r.reference.getSubData(this, node.postfix, context);\r\n            }\r\n            console.error(`Invalid dereference. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => +x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(+rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => -x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(-rn, t);\r\n            }\r\n            case \"!\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => !x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(!rn ? 1 : 0, t);\r\n            }\r\n            case \"~\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ~x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(~rn, t);\r\n            }\r\n        }\r\n        console.error(`Invalid unary operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalBinaryOp(node: BinaryOperator, context: ExecContext): Data | null {\r\n        const _l = this.evalExpression(node.left, context);\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        const l = _l instanceof ScalarData ? _l.value : \r\n            _l instanceof VectorData ? Array.from(_l.data) :\r\n            _l instanceof MatrixData ? Array.from(_l.data) : null;\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : \r\n            _r instanceof MatrixData ? Array.from(_r.data) :\r\n            null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x + ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x + rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln + x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln + rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x - ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x - rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln - x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln - rn, t);\r\n            }\r\n            case \"*\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n\r\n                    if (_l instanceof MatrixData && _r instanceof MatrixData) {\r\n                        const result = matrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const colsB = MatrixTypeSize[_r.typeInfo.name][0];\r\n                        const rowsA = MatrixTypeSize[_l.typeInfo.name][1];\r\n                        const type = this.getTypeInfo(`mat${colsB}x${rowsA}f`);\r\n                        return new MatrixData(result, type);\r\n                    } else if (_l instanceof MatrixData && _r instanceof VectorData) {\r\n                        const result = matrixVectorMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _r.typeInfo);\r\n                    } else if (_l instanceof VectorData && _r instanceof MatrixData) {\r\n                        const result = vectorMatrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    } else {\r\n                        if (la.length !== ra.length) {\r\n                            console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const result = la.map((x: number, i: number) => x * ra[i]);\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    }\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x * rn);\r\n                    if (_l instanceof MatrixData) {\r\n                        return new MatrixData(result, _l.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln * x);\r\n                    if (_r instanceof MatrixData) {\r\n                        return new MatrixData(result, _r.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln * rn, t);\r\n            }\r\n            case \"%\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x % ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x % rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln % x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln % rn, t);\r\n            }\r\n            case \"/\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x / ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x / rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln / x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln / rn, t);\r\n            }\r\n            case \"&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x & ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x & rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln & x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln & rn, t);\r\n            }\r\n            case \"|\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x | ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x | rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln | x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln | rn, t);\r\n            }\r\n            case \"^\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x ^ ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x ^ rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln ^ x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln ^ rn, t);\r\n            }\r\n            case \"<<\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x << ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x << rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln << x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln << rn, t);\r\n            }\r\n            case \">>\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >> ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >> rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >> x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln >> rn, t);\r\n            }\r\n            case \">\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x > ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x > rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln > x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln > rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<\":\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x < ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x < rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln < x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln < rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            case \"==\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x === ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x == rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln == x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln === rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"!=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x !== ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x !== rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln !== x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln !== rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \">=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln >= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x <= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x <= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln <= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln <= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"&&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x && ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x && rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln && x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln && rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"||\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x || ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x || rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln || x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln || rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n        }\r\n        console.error(`Unknown operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalCall(node: CallExpr, context: ExecContext): Data | null {\r\n        if (node.cachedReturnValue !== null) {\r\n            return node.cachedReturnValue;\r\n        }\r\n\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                return this._callBuiltinFunction(node, subContext);\r\n            }\r\n\r\n            const typeInfo = this.getTypeInfo(node.name);\r\n            if (typeInfo) {\r\n                return this._evalCreate(node, context);\r\n            }\r\n\r\n            console.error(`Unknown function \"${node.name}\". Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.createVariable(arg.name, value, arg);\r\n        }\r\n\r\n        return this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _callBuiltinFunction(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        switch (node.name) {\r\n            // Logical Built-in Functions\r\n            case \"all\":\r\n                return this.builtins.All(node, context);\r\n            case \"any\":\r\n                return this.builtins.Any(node, context);\r\n            case \"select\":\r\n                return this.builtins.Select(node, context);\r\n\r\n            // Array Built-in Functions\r\n            case \"arrayLength\":\r\n                return this.builtins.ArrayLength(node, context);\r\n\r\n            // Numeric Built-in Functions\r\n            case \"abs\":\r\n                return this.builtins.Abs(node, context);\r\n            case \"acos\":\r\n                return this.builtins.Acos(node, context);\r\n            case \"acosh\":\r\n                return this.builtins.Acosh(node, context);\r\n            case \"asin\":\r\n                return this.builtins.Asin(node, context);\r\n            case \"asinh\":\r\n                return this.builtins.Asinh(node, context);\r\n            case \"atan\":\r\n                return this.builtins.Atan(node, context);\r\n            case \"atanh\":\r\n                return this.builtins.Atanh(node, context);\r\n            case \"atan2\":\r\n                return this.builtins.Atan2(node, context);\r\n            case \"ceil\":\r\n                return this.builtins.Ceil(node, context);\r\n            case \"clamp\":\r\n                return this.builtins.Clamp(node, context);\r\n            case \"cos\":\r\n                return this.builtins.Cos(node, context);\r\n            case \"cosh\":\r\n                return this.builtins.Cosh(node, context);\r\n            case \"countLeadingZeros\":\r\n                return this.builtins.CountLeadingZeros(node, context);\r\n            case \"countOneBits\":\r\n                return this.builtins.CountOneBits(node, context);\r\n            case \"countTrailingZeros\":\r\n                return this.builtins.CountTrailingZeros(node, context);\r\n            case \"cross\":\r\n                return this.builtins.Cross(node, context);\r\n            case \"degrees\":\r\n                return this.builtins.Degrees(node, context);\r\n            case \"determinant\":\r\n                return this.builtins.Determinant(node, context);\r\n            case \"distance\":\r\n                return this.builtins.Distance(node, context);\r\n            case \"dot\":\r\n                return this.builtins.Dot(node, context);\r\n            case \"dot4U8Packed\":\r\n                return this.builtins.Dot4U8Packed(node, context);\r\n            case \"dot4I8Packed\":\r\n                return this.builtins.Dot4I8Packed(node, context);\r\n            case \"exp\":\r\n                return this.builtins.Exp(node, context);\r\n            case \"exp2\":\r\n                return this.builtins.Exp2(node, context);\r\n            case \"extractBits\":\r\n                return this.builtins.ExtractBits(node, context);\r\n            case \"faceForward\":\r\n                return this.builtins.FaceForward(node, context);\r\n            case \"firstLeadingBit\":\r\n                return this.builtins.FirstLeadingBit(node, context);\r\n            case \"firstTrailingBit\":\r\n                return this.builtins.FirstTrailingBit(node, context);\r\n            case \"floor\":\r\n                return this.builtins.Floor(node, context);\r\n            case \"fma\":\r\n                return this.builtins.Fma(node, context);\r\n            case \"fract\":\r\n                return this.builtins.Fract(node, context);\r\n            case \"frexp\":\r\n                return this.builtins.Frexp(node, context);\r\n            case \"insertBits\":\r\n                return this.builtins.InsertBits(node, context);\r\n            case \"inverseSqrt\":\r\n                return this.builtins.InverseSqrt(node, context);\r\n            case \"ldexp\":\r\n                return this.builtins.Ldexp(node, context);\r\n            case \"length\":\r\n                return this.builtins.Length(node, context);\r\n            case \"log\":\r\n                return this.builtins.Log(node, context);\r\n            case \"log2\":\r\n                return this.builtins.Log2(node, context);\r\n            case \"max\":\r\n                return this.builtins.Max(node, context);\r\n            case \"min\":\r\n                return this.builtins.Min(node, context);\r\n            case \"mix\":\r\n                return this.builtins.Mix(node, context);\r\n            case \"modf\":\r\n                return this.builtins.Modf(node, context);\r\n            case \"normalize\":\r\n                return this.builtins.Normalize(node, context);\r\n            case \"pow\":\r\n                return this.builtins.Pow(node, context);\r\n            case \"quantizeToF16\":\r\n                return this.builtins.QuantizeToF16(node, context);\r\n            case \"radians\":\r\n                return this.builtins.Radians(node, context);\r\n            case \"reflect\":\r\n                return this.builtins.Reflect(node, context);\r\n            case \"refract\":\r\n                return this.builtins.Refract(node, context);\r\n            case \"reverseBits\":\r\n                return this.builtins.ReverseBits(node, context);\r\n            case \"round\":\r\n                return this.builtins.Round(node, context);\r\n            case \"saturate\":\r\n                return this.builtins.Saturate(node, context);\r\n            case \"sign\":\r\n                return this.builtins.Sign(node, context);\r\n            case \"sin\":\r\n                return this.builtins.Sin(node, context);\r\n            case \"sinh\":\r\n                return this.builtins.Sinh(node, context);\r\n            case \"smoothStep\":\r\n                return this.builtins.SmoothStep(node, context);\r\n            case \"sqrt\":\r\n                return this.builtins.Sqrt(node, context);\r\n            case \"step\":\r\n                return this.builtins.Step(node, context);\r\n            case \"tan\":\r\n                return this.builtins.Tan(node, context);\r\n            case \"tanh\":\r\n                return this.builtins.Tanh(node, context);\r\n            case \"transpose\":\r\n                return this.builtins.Transpose(node, context);\r\n            case \"trunc\":\r\n                return this.builtins.Trunc(node, context);\r\n\r\n            // Derivative Built-in Functions\r\n            case \"dpdx\":\r\n                return this.builtins.Dpdx(node, context);\r\n            case \"dpdxCoarse\":\r\n                return this.builtins.DpdxCoarse(node, context);\r\n            case \"dpdxFine\":\r\n                return this.builtins.DpdxFine(node, context);\r\n            case \"dpdy\":\r\n                return this.builtins.Dpdy(node, context);\r\n            case \"dpdyCoarse\":\r\n                return this.builtins.DpdyCoarse(node, context);\r\n            case \"dpdyFine\":\r\n                return this.builtins.DpdyFine(node, context);\r\n            case \"fwidth\":\r\n                return this.builtins.Fwidth(node, context);\r\n            case \"fwidthCoarse\":\r\n                return this.builtins.FwidthCoarse(node, context);\r\n            case \"fwidthFine\":\r\n                return this.builtins.FwidthFine(node, context);\r\n\r\n            // Texture Built-in Functions\r\n            case \"textureDimensions\":\r\n                return this.builtins.TextureDimensions(node, context);\r\n            case \"textureGather\":\r\n                return this.builtins.TextureGather(node, context);\r\n            case \"textureGatherCompare\":\r\n                return this.builtins.TextureGatherCompare(node, context);\r\n            case \"textureLoad\":\r\n                return this.builtins.TextureLoad(node, context);\r\n            case \"textureNumLayers\":\r\n                return this.builtins.TextureNumLayers(node, context);\r\n            case \"textureNumLevels\":\r\n                return this.builtins.TextureNumLevels(node, context);\r\n            case \"textureNumSamples\":\r\n                return this.builtins.TextureNumSamples(node, context);\r\n            case \"textureSample\":\r\n                return this.builtins.TextureSample(node, context);\r\n            case \"textureSampleBias\":\r\n                return this.builtins.TextureSampleBias(node, context);\r\n            case \"textureSampleCompare\":\r\n                return this.builtins.TextureSampleCompare(node, context);\r\n            case \"textureSampleCompareLevel\":\r\n                return this.builtins.TextureSampleCompareLevel(node, context);\r\n            case \"textureSampleGrad\":\r\n                return this.builtins.TextureSampleGrad(node, context);\r\n            case \"textureSampleLevel\":\r\n                return this.builtins.TextureSampleLevel(node, context);\r\n            case \"textureSampleBaseClampToEdge\":\r\n                return this.builtins.TextureSampleBaseClampToEdge(node, context);\r\n            case \"textureStore\":\r\n                return this.builtins.TextureStore(node, context);\r\n\r\n            // Atomic Built-in Functions\r\n            case \"atomicLoad\":\r\n                return this.builtins.AtomicLoad(node, context);\r\n            case \"atomicStore\":\r\n                return this.builtins.AtomicStore(node, context);\r\n            case \"atomicAdd\":\r\n                return this.builtins.AtomicAdd(node, context);\r\n            case \"atomicSub\":\r\n                return this.builtins.AtomicSub(node, context);\r\n            case \"atomicMax\":\r\n                return this.builtins.AtomicMax(node, context);\r\n            case \"atomicMin\":\r\n                return this.builtins.AtomicMin(node, context);\r\n            case \"atomicAnd\":\r\n                return this.builtins.AtomicAnd(node, context);\r\n            case \"atomicOr\":\r\n                return this.builtins.AtomicOr(node, context);\r\n            case \"atomicXor\":\r\n                return this.builtins.AtomicXor(node, context);\r\n            case \"atomicExchange\":\r\n                return this.builtins.AtomicExchange(node, context);\r\n            case \"atomicCompareExchangeWeak\":\r\n                return this.builtins.AtomicCompareExchangeWeak(node, context);\r\n\r\n            // Data Packing Built-in Functions\r\n            case \"pack4x8snorm\":\r\n                return this.builtins.Pack4x8snorm(node, context);\r\n            case \"pack4x8unorm\":\r\n                return this.builtins.Pack4x8unorm(node, context);\r\n            case \"pack4xI8\":\r\n                return this.builtins.Pack4xI8(node, context);\r\n            case \"pack4xU8\":\r\n                return this.builtins.Pack4xU8(node, context);\r\n            case \"pack4x8Clamp\":\r\n                return this.builtins.Pack4x8Clamp(node, context);\r\n            case \"pack4xU8Clamp\":\r\n                return this.builtins.Pack4xU8Clamp(node, context);\r\n            case \"pack2x16snorm\":\r\n                return this.builtins.Pack2x16snorm(node, context);\r\n            case \"pack2x16unorm\":\r\n                return this.builtins.Pack2x16unorm(node, context);\r\n            case \"pack2x16float\":\r\n                return this.builtins.Pack2x16float(node, context);\r\n\r\n            // Data Unpacking Built-in Functions\r\n            case \"unpack4x8snorm\":\r\n                return this.builtins.Unpack4x8snorm(node, context);\r\n            case \"unpack4x8unorm\":\r\n                return this.builtins.Unpack4x8unorm(node, context);\r\n            case \"unpack4xI8\":\r\n                return this.builtins.Unpack4xI8(node, context);\r\n            case \"unpack4xU8\":\r\n                return this.builtins.Unpack4xU8(node, context);\r\n            case \"unpack2x16snorm\":\r\n                return this.builtins.Unpack2x16snorm(node, context);\r\n            case \"unpack2x16unorm\":\r\n                return this.builtins.Unpack2x16unorm(node, context);\r\n            case \"unpack2x16float\":\r\n                return this.builtins.Unpack2x16float(node, context);\r\n\r\n            // Synchronization Built-in Functions\r\n            case \"storageBarrier\":\r\n                return this.builtins.StorageBarrier(node, context);\r\n            case \"textureBarrier\":\r\n                return this.builtins.TextureBarrier(node, context);\r\n            case \"workgroupBarrier\":\r\n                return this.builtins.WorkgroupBarrier(node, context);\r\n            case \"workgroupUniformLoad\":\r\n                return this.builtins.WorkgroupUniformLoad(node, context);\r\n\r\n            // Subgroup Built-in Functions\r\n            case \"subgroupAdd\":\r\n                return this.builtins.SubgroupAdd(node, context);\r\n            case \"subgroupExclusiveAdd\":\r\n                return this.builtins.SubgroupExclusiveAdd(node, context);\r\n            case \"subgroupInclusiveAdd\":\r\n                return this.builtins.SubgroupInclusiveAdd(node, context);\r\n            case \"subgroupAll\":\r\n                return this.builtins.SubgroupAll(node, context);\r\n            case \"subgroupAnd\":\r\n                return this.builtins.SubgroupAnd(node, context);\r\n            case \"subgroupAny\":\r\n                return this.builtins.SubgroupAny(node, context);\r\n            case \"subgroupBallot\":\r\n                return this.builtins.SubgroupBallot(node, context);\r\n            case \"subgroupBroadcast\":\r\n                return this.builtins.SubgroupBroadcast(node, context);\r\n            case \"subgroupBroadcastFirst\":\r\n                return this.builtins.SubgroupBroadcastFirst(node, context);\r\n            case \"subgroupElect\":\r\n                return this.builtins.SubgroupElect(node, context);\r\n            case \"subgroupMax\":\r\n                return this.builtins.SubgroupMax(node, context);\r\n            case \"subgroupMin\":\r\n                return this.builtins.SubgroupMin(node, context);\r\n            case \"subgroupMul\":\r\n                return this.builtins.SubgroupMul(node, context);\r\n            case \"subgroupExclusiveMul\":\r\n                return this.builtins.SubgroupExclusiveMul(node, context);\r\n            case \"subgroupInclusiveMul\":\r\n                return this.builtins.SubgroupInclusiveMul(node, context);\r\n            case \"subgroupOr\":\r\n                return this.builtins.SubgroupOr(node, context);\r\n            case \"subgroupShuffle\":\r\n                return this.builtins.SubgroupShuffle(node, context);\r\n            case \"subgroupShuffleDown\":\r\n                return this.builtins.SubgroupShuffleDown(node, context);\r\n            case \"subgroupShuffleUp\":\r\n                return this.builtins.SubgroupShuffleUp(node, context);\r\n            case \"subgroupShuffleXor\":\r\n                return this.builtins.SubgroupShuffleXor(node, context);\r\n            case \"subgroupXor\":\r\n                return this.builtins.SubgroupXor(node, context);\r\n\r\n            // Quad Operations\r\n            case \"quadBroadcast\":\r\n                return this.builtins.QuadBroadcast(node, context);\r\n            case \"quadSwapDiagonal\":\r\n                return this.builtins.QuadSwapDiagonal(node, context);\r\n            case \"quadSwapX\":\r\n                return this.builtins.QuadSwapX(node, context);\r\n            case \"quadSwapY\":\r\n                return this.builtins.QuadSwapY(node, context);\r\n        }\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (f) {\r\n            const subContext = context.clone();\r\n            for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n                const arg = f.node.args[ai];\r\n                const value = this.evalExpression(node.args[ai], subContext);\r\n                subContext.setVariable(arg.name, value, arg);\r\n            }\r\n            return this._execStatements(f.node.body, subContext);\r\n        }\r\n\r\n        //console.error(`Function ${node.name} not found. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _callConstructorValue(node: CreateExpr, context: ExecContext): Data | null {\r\n        if (!node.args || node.args.length === 0) {\r\n            return new ScalarData(0, this.getTypeInfo(node.type));\r\n        }\r\n        const v = this.evalExpression(node.args[0], context);\r\n        v.typeInfo = this.getTypeInfo(node.type);\r\n        return v.getSubData(this, node.postfix, context).clone();\r\n    }\r\n\r\n    _callConstructorVec(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = VectorTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid vec constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values: number[] = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        const vd = argValue.data;\r\n                        for (let i = 0; i < vd.length; ++i) {\r\n                            let e = vd[i];\r\n                            values.push(e);\r\n                        }\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        let v = argValue.value;\r\n                        values.push(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.type instanceof TemplateType && node.type.format === null) {\r\n            node.type.format = TemplateType.f32; // TODO: get the format from the type of the arg.\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count).fill(0);\r\n            return new VectorData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            while (values.length < count) {\r\n                values.push(values[0]);\r\n            }\r\n        }\r\n\r\n        if (values.length < count) {\r\n            console.error(`Invalid vec constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const data = new VectorData(values.length > count ? values.slice(0, count) : values, typeInfo);\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _callConstructorMatrix(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = MatrixTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid matrix constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        values.push(...argValue.data);\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        values.push(argValue.value);\r\n                    } else if (argValue instanceof MatrixData) {\r\n                        values.push(...argValue.data);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((typeInfo instanceof TemplateInfo) && typeInfo.format === null) {\r\n            typeInfo.format = this.getTypeInfo(\"f32\");\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count[2]).fill(0);\r\n            return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length !== count[2]) {\r\n            console.error(`Invalid matrix constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n    }\r\n}\r\n", "import { Const, Alias, Struct } from \"../wgsl_ast.js\";\r\n\r\nexport class ParseContext {\r\n  constants: Map<string, Const> = new Map();\r\n  aliases: Map<string, Alias> = new Map();\r\n  structs: Map<string, Struct> = new Map();\r\n}\r\n", "import { WgslScanner, Token, TokenType, TokenTypes } from \"./wgsl_scanner.js\";\r\nimport * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TemplateInfo } from \"./reflect/info.js\";\r\nimport { ScalarData } from \"./wgsl_ast.js\";\r\nimport { ParseContext } from \"./ast/parse_context.js\";\r\n\r\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\r\nexport class WgslParser {\r\n  _tokens: Token[] = [];\r\n  _current: number = 0;\r\n  _currentLine: number = 1;\r\n  _deferArrayCountEval: Object[] = [];\r\n  _currentLoop: AST.Statement[] = [];\r\n  _context = new ParseContext();\r\n  _exec = new WgslExec();\r\n  _forwardTypeCount: number = 0;;\r\n\r\n  parse(tokensOrCode: Token[] | string): AST.Statement[] {\r\n    this._initialize(tokensOrCode);\r\n\r\n    this._deferArrayCountEval.length = 0;\r\n\r\n    const statements: AST.Statement[] = [];\r\n    while (!this._isAtEnd()) {\r\n      const statement = this._global_decl_or_directive();\r\n      if (!statement) {\r\n        break;\r\n      }\r\n      statements.push(statement);\r\n    }\r\n\r\n    // Since constants can be declared after they are used, and\r\n    // constants can be used to size arrays, defer calculating the\r\n    // size until after the shader has finished parsing.\r\n    if (this._deferArrayCountEval.length > 0) {\r\n      for (const arrayDecl of this._deferArrayCountEval) {\r\n        const arrayType = arrayDecl[\"arrayType\"];\r\n        const countNode = arrayDecl[\"countNode\"];\r\n\r\n        if (countNode instanceof AST.VariableExpr) {\r\n          const variable = countNode as AST.VariableExpr;\r\n          const name = variable.name;\r\n          const constant = this._context.constants.get(name);\r\n          if (constant) {\r\n            try {\r\n              const count = constant.constEvaluate(this._exec);\r\n              arrayType.count = count;\r\n            } catch (e) {\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._deferArrayCountEval.length = 0;\r\n    }\r\n\r\n    if (this._forwardTypeCount > 0) {\r\n      for (const statement of statements) {\r\n        statement.search((node) => {\r\n          if (node instanceof AST.Member) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.PointerType) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.ArrayType) {\r\n            node.format = this._forwardType(node.format);\r\n          } else if (node instanceof AST.Var || node instanceof AST.Let || node instanceof AST.Const) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.Function) {\r\n            node.returnType = this._forwardType(node.returnType);\r\n          } else if (node instanceof AST.Argument) {\r\n            node.type = this._forwardType(node.type);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return statements;\r\n  }\r\n\r\n  _forwardType(t: AST.Type | null): AST.Type | null {\r\n    if (t instanceof AST.ForwardType) {\r\n      const ft = this._getType(t.name);\r\n      if (ft) {\r\n        return ft;\r\n      }\r\n    } else if (t instanceof AST.PointerType) {\r\n      t.type = this._forwardType(t.type);\r\n    } else if (t instanceof AST.ArrayType) {\r\n      t.format = this._forwardType(t.format);\r\n    }\r\n    return t;\r\n  }\r\n\r\n  _initialize(tokensOrCode: Token[] | string) {\r\n    if (tokensOrCode) {\r\n      if (typeof tokensOrCode == \"string\") {\r\n        const scanner = new WgslScanner(tokensOrCode);\r\n        this._tokens = scanner.scanTokens();\r\n      } else {\r\n        this._tokens = tokensOrCode;\r\n      }\r\n    } else {\r\n      this._tokens = [];\r\n    }\r\n    this._current = 0;\r\n  }\r\n\r\n  _updateNode<T extends AST.Node>(n: T, l?: number): T {\r\n    n.line = l ?? this._currentLine;\r\n    return n;\r\n  }\r\n\r\n  _error(token: Token, message: string | null): Object {\r\n    return {\r\n      token,\r\n      message,\r\n      toString: function () {\r\n        return `${message}`;\r\n      },\r\n    };\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return (\r\n      this._current >= this._tokens.length ||\r\n      this._peek().type == TokenTypes.eof\r\n    );\r\n  }\r\n\r\n  _match(types: TokenType | TokenType[]): boolean {\r\n    if (types instanceof TokenType) {\r\n      if (this._check(types)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0, l = types.length; i < l; ++i) {\r\n      const type = types[i];\r\n      if (this._check(type)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _consume(types: TokenType | TokenType[], message: string | null): Token {\r\n    if (this._check(types)) {\r\n      return this._advance();\r\n    }\r\n    throw this._error(this._peek(), `${message}. Line:${this._currentLine}`);\r\n  }\r\n\r\n  _check(types: TokenType | TokenType[]): boolean {\r\n    if (this._isAtEnd()) {\r\n      return false;\r\n    }\r\n    const tk = this._peek();\r\n    if (types instanceof Array) {\r\n      const t = tk.type;\r\n      let hasNameType = false;\r\n      for (const type of types) {\r\n        if (t === type) {\r\n          return true;\r\n        }\r\n        if (type === TokenTypes.tokens.name) {\r\n          hasNameType =  true;\r\n        }\r\n      }\r\n      if (hasNameType) {\r\n        // ident can include any of the other keywords, so special case it.\r\n        const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n        if (match && match.index == 0 && match[0] == tk.lexeme) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (tk.type === types) {\r\n      return true;\r\n    }\r\n\r\n    // ident can include any of the other keywords, so special case it.\r\n    if (types === TokenTypes.tokens.name) {\r\n      const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n      return match && match.index == 0 && match[0] == tk.lexeme;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _advance(): Token {\r\n    this._currentLine = this._peek()?.line ?? -1;\r\n    if (!this._isAtEnd()) {\r\n      this._current++;\r\n    }\r\n    return this._previous();\r\n  }\r\n\r\n  _peek(): Token {\r\n    return this._tokens[this._current];\r\n  }\r\n\r\n  _previous(): Token {\r\n    return this._tokens[this._current - 1];\r\n  }\r\n\r\n  _global_decl_or_directive(): AST.Statement | null {\r\n    // semicolon\r\n    // global_variable_decl semicolon\r\n    // global_constant_decl semicolon\r\n    // type_alias semicolon\r\n    // struct_decl\r\n    // function_decl\r\n    // enable_directive\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    if (this._match(TokenTypes.keywords.alias)) {\r\n      const type = this._type_alias();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([type]);\r\n      return type;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.diagnostic)) {\r\n      const directive = this._diagnostic();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([directive]);\r\n      return directive;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.requires)) {\r\n      const requires = this._requires_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([requires]);\r\n      return requires;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.enable)) {\r\n      const enable = this._enable_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([enable]);\r\n      return enable;\r\n    }\r\n\r\n    // The following statements have an optional attribute*\r\n    const attrs = this._attribute();\r\n\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._global_variable_decl();\r\n      if (_var != null) {\r\n        _var.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_var]);\r\n      return _var;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.override)) {\r\n      const _override = this._override_variable_decl();\r\n      if (_override != null) {\r\n        _override.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_override]);\r\n      return _override;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.let)) {\r\n      const _let = this._global_let_decl();\r\n      if (_let != null) {\r\n        _let.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_let]);\r\n      return _let;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.const)) {\r\n      const _const = this._global_const_decl();\r\n      if (_const != null) {\r\n        _const.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_const]);\r\n      return _const;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.struct)) {\r\n      const _struct = this._struct_decl();\r\n      if (_struct != null) {\r\n        _struct.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_struct]);\r\n      return _struct;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.fn)) {\r\n      const _fn = this._function_decl();\r\n      if (_fn != null) {\r\n        _fn.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_fn]);\r\n      return _fn;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _function_decl(): AST.Function | null {\r\n    // attribute* function_header compound_statement\r\n    // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n    if (!this._match(TokenTypes.keywords.fn)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    ).toString();\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_left,\r\n      \"Expected '(' for function arguments.\"\r\n    );\r\n\r\n    const args: AST.Argument[] = [];\r\n    if (!this._check(TokenTypes.tokens.paren_right)) {\r\n      do {\r\n        if (this._check(TokenTypes.tokens.paren_right)) {\r\n          break;\r\n        }\r\n        const argAttrs = this._attribute();\r\n\r\n        const name = this._consume(\r\n          TokenTypes.tokens.name,\r\n          \"Expected argument name.\"\r\n        ).toString();\r\n\r\n        this._consume(\r\n          TokenTypes.tokens.colon,\r\n          \"Expected ':' for argument type.\"\r\n        );\r\n\r\n        const typeAttrs = this._attribute();\r\n        const type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n\r\n          args.push(this._updateNode(new AST.Argument(name, type, argAttrs)));\r\n        }\r\n      } while (this._match(TokenTypes.tokens.comma));\r\n    }\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' after function arguments.\"\r\n    );\r\n\r\n    let _return: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.arrow)) {\r\n      const attrs = this._attribute();\r\n      _return = this._type_decl();\r\n      if (_return != null) {\r\n        _return.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    const body = this._compound_statement();\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    return this._updateNode(new AST.Function(name, args, _return, body, startLine, endLine), startLine);\r\n  }\r\n\r\n  _compound_statement(): AST.Statement[] {\r\n    // brace_left statement* brace_right\r\n    const statements: AST.Statement[] = [];\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      const statement = this._statement();\r\n      if (statement !== null) {\r\n        statements.push(statement as AST.Statement);\r\n      }\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\r\n\r\n    return statements;\r\n  }\r\n\r\n  _statement(): AST.Statement | AST.Statement[] | null {\r\n    // semicolon\r\n    // return_statement semicolon\r\n    // if_statement\r\n    // switch_statement\r\n    // loop_statement\r\n    // for_statement\r\n    // func_call_statement semicolon\r\n    // variable_statement semicolon\r\n    // break_statement semicolon\r\n    // continue_statement semicolon\r\n    // continuing_statement compound_statement\r\n    // discard semicolon\r\n    // assignment_statement semicolon\r\n    // compound_statement\r\n    // increment_statement semicolon\r\n    // decrement_statement semicolon\r\n    // static_assert_statement semicolon\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.if)) {\r\n      return this._if_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.switch)) {\r\n      return this._switch_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.loop)) {\r\n      return this._loop_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.for)) {\r\n      return this._for_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.while)) {\r\n      return this._while_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.continuing)) {\r\n      return this._continuing_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.static_assert)) {\r\n      return this._static_assert_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.tokens.brace_left)) {\r\n      return this._compound_statement();\r\n    }\r\n\r\n    let result: AST.Statement | null = null;\r\n    if (this._check(TokenTypes.keywords.return)) {\r\n      result = this._return_statement();\r\n    } else if (this._check([TokenTypes.keywords.var, TokenTypes.keywords.let, TokenTypes.keywords.const])) {\r\n      result = this._variable_statement();\r\n    } else if (this._match(TokenTypes.keywords.discard)) {\r\n      result = this._updateNode(new AST.Discard());\r\n    } else if (this._match(TokenTypes.keywords.break)) {\r\n      const breakStmt = this._updateNode(new AST.Break());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        breakStmt.loopId = loop.id;\r\n      } else {\r\n        // This break statement is not inside a loop.\r\n        //throw this._error(this._peek(), `Break statement must be inside a loop. Line: ${breakStmt.line}`);\r\n      }\r\n      result = breakStmt;\r\n      if (this._check(TokenTypes.keywords.if)) {\r\n        // break-if\r\n        this._advance();\r\n        breakStmt.condition = this._optional_paren_expression();\r\n      }\r\n    } else if (this._match(TokenTypes.keywords.continue)) {\r\n      const continueStmt = this._updateNode(new AST.Continue());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        continueStmt.loopId = loop.id;\r\n      } else {\r\n        // This continue statement is not inside a loop.\r\n        throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${continueStmt.line}`);\r\n      }\r\n      result = continueStmt;\r\n    } else {\r\n      result =\r\n        this._increment_decrement_statement() ||\r\n        this._func_call_statement() ||\r\n        this._assignment_statement();\r\n    }\r\n\r\n    if (result != null) {\r\n      this._consume(\r\n        TokenTypes.tokens.semicolon,\r\n        \"Expected ';' after statement.\"\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  _static_assert_statement(): AST.StaticAssert | null {\r\n    if (!this._match(TokenTypes.keywords.static_assert)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const expression = this._optional_paren_expression();\r\n    return this._updateNode(new AST.StaticAssert(expression), line);\r\n  }\r\n\r\n  _while_statement(): AST.While | null {\r\n    if (!this._match(TokenTypes.keywords.while)) {\r\n      return null;\r\n    }\r\n\r\n    const whileLoop = this._updateNode(new AST.While(null, null));\r\n    this._currentLoop.push(whileLoop);\r\n\r\n    whileLoop.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    whileLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return whileLoop;\r\n  }\r\n\r\n  _continuing_statement(): AST.Continuing | null {\r\n    const loopId = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;\r\n    if (!this._match(TokenTypes.keywords.continuing)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const block = this._compound_statement();\r\n    return this._updateNode(new AST.Continuing(block, loopId), line);\r\n  }\r\n\r\n  _for_statement(): AST.For | null {\r\n    // for paren_left for_header paren_right compound_statement\r\n    if (!this._match(TokenTypes.keywords.for)) {\r\n      return null;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n\r\n    const forLoop = this._updateNode(new AST.For(null, null, null, null));\r\n\r\n    this._currentLoop.push(forLoop);\r\n\r\n    // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n    forLoop.init = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._for_init()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.condition = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._short_circuit_or_expression()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.increment = !this._check(TokenTypes.tokens.paren_right)\r\n      ? this._for_increment()\r\n      : null;\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    forLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return forLoop;\r\n  }\r\n\r\n  _for_init(): AST.Statement | null {\r\n    // (variable_statement assignment_statement func_call_statement)?\r\n    return (\r\n      this._variable_statement() ||\r\n      this._func_call_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _for_increment(): AST.Statement | null {\r\n    // (assignment_statement func_call_statement increment_statement)?\r\n    return (\r\n      this._func_call_statement() ||\r\n      this._increment_decrement_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _variable_statement(): AST.Var | AST.Let | AST.Const | null {\r\n    // variable_decl\r\n    // variable_decl equal short_circuit_or_expression\r\n    // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n    // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._variable_decl();\r\n      if (_var === null) {\r\n        throw this._error(this._peek(), \"Variable declaration expected.\");\r\n      }\r\n      let value: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.equal)) {\r\n        value = this._short_circuit_or_expression();\r\n      }\r\n\r\n      return this._updateNode(new AST.Var(\r\n        _var.name,\r\n        _var.type,\r\n        _var.storage,\r\n        _var.access,\r\n        value\r\n      ), _var.line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.let)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for let.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\r\n      const value = this._short_circuit_or_expression();\r\n      return this._updateNode(new AST.Let(name, type, null, null, value), line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.const)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for const.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\r\n      const value = this._short_circuit_or_expression();\r\n      if (type === null && value instanceof AST.LiteralExpr) {\r\n        type = value.type;\r\n      }\r\n      return this._updateNode(new AST.Const(name, type, null, null, value), line);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _increment_decrement_statement(): AST.Statement | null {\r\n    const savedPos = this._current;\r\n\r\n    const _var = this._unary_expression();\r\n    if (_var == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!this._check(TokenTypes.increment_operators)) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    const token = this._consume(\r\n      TokenTypes.increment_operators,\r\n      \"Expected increment operator\"\r\n    );\r\n\r\n    return this._updateNode(new AST.Increment(\r\n      token.type === TokenTypes.tokens.plus_plus\r\n        ? AST.IncrementOperator.increment\r\n        : AST.IncrementOperator.decrement,\r\n      _var));\r\n  }\r\n\r\n  _assignment_statement(): AST.Assign | null {\r\n    // (unary_expression underscore) equal short_circuit_or_expression\r\n    let _var: AST.Expression | null = null;\r\n    const line = this._currentLine;\r\n\r\n    if (this._check(TokenTypes.tokens.brace_right)) {\r\n      return null;\r\n    }\r\n\r\n    let isUnderscore = this._match(TokenTypes.tokens.underscore);\r\n    if (!isUnderscore) {\r\n      _var = this._unary_expression();\r\n    }\r\n\r\n    if (!isUnderscore && _var == null) {\r\n      return null;\r\n    }\r\n\r\n    const type = this._consume(\r\n      TokenTypes.assignment_operators,\r\n      \"Expected assignment operator.\");\r\n\r\n    const value = this._short_circuit_or_expression();\r\n\r\n    return this._updateNode(new AST.Assign(\r\n      AST.AssignOperator.parse(type.lexeme),\r\n      _var as AST.Expression,\r\n      value), line);\r\n  }\r\n\r\n  _func_call_statement(): AST.Call | null {\r\n    // ident argument_expression_list\r\n    if (!this._check(TokenTypes.tokens.ident)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const savedPos = this._current;\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    );\r\n    const args = this._argument_expression_list();\r\n\r\n    if (args === null) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    return this._updateNode(new AST.Call(name.lexeme, args), line);\r\n  }\r\n\r\n  _loop_statement(): AST.Loop | null {\r\n    // loop brace_left statement* continuing_statement? brace_right\r\n    if (!this._match(TokenTypes.keywords.loop)) {\r\n      return null;\r\n    }\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\r\n\r\n    const loop = this._updateNode(new AST.Loop([], null));\r\n    this._currentLoop.push(loop);\r\n\r\n    // statement*\r\n    let statement = this._statement();\r\n    while (statement !== null) {\r\n      if (Array.isArray(statement)) {\r\n        for (let s of statement) {\r\n          loop.body.push(s);\r\n        }\r\n      } else {\r\n        loop.body.push(statement);\r\n      }\r\n      // Keep continuing in the loop body statements so it can be\r\n      // executed in the stackframe of the body statements.\r\n      if (statement instanceof AST.Continuing) {\r\n        loop.continuing = statement;\r\n        // Continuing should be the last statement in the loop.\r\n        break;\r\n      }\r\n      statement = this._statement();\r\n    }\r\n\r\n    this._currentLoop.pop();\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\r\n\r\n    return loop;\r\n  }\r\n\r\n  _switch_statement(): AST.Switch | null {\r\n    // switch optional_paren_expression brace_left switch_body+ brace_right\r\n    if (!this._match(TokenTypes.keywords.switch)) {\r\n      return null;\r\n    }\r\n\r\n    const switchStmt = this._updateNode(new AST.Switch(null, []));\r\n\r\n    this._currentLoop.push(switchStmt);\r\n\r\n    switchStmt.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\r\n    switchStmt.cases = this._switch_body();\r\n    if (switchStmt.cases == null || switchStmt.cases.length == 0) {\r\n      throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return switchStmt;\r\n  }\r\n\r\n  _switch_body(): AST.SwitchCase[] {\r\n    // case case_selectors optional_colon brace_left case_body? brace_right\r\n    // default optional_colon brace_left case_body? brace_right\r\n    const cases: AST.SwitchCase[] = [];\r\n\r\n    let hasDefault = false;\r\n    while (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\r\n      if (this._match(TokenTypes.keywords.case)) {\r\n        const selectors = this._case_selectors();\r\n        for (const selector of selectors) {\r\n          if (selector instanceof AST.DefaultSelector) {\r\n            if (hasDefault) {\r\n              throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n            }\r\n            hasDefault = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\r\n\r\n        cases.push(this._updateNode(new AST.Case(selectors, body)));\r\n      }\r\n\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        if (hasDefault) {\r\n          throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n        }\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\r\n\r\n        cases.push(this._updateNode(new AST.Default(body)));\r\n      }\r\n    }\r\n\r\n    return cases;\r\n  }\r\n\r\n  _case_selectors(): AST.Expression[] {\r\n    // case_selector (comma case_selector)* comma?\r\n    // case_selector: expression | default\r\n    const selectors = [];\r\n\r\n    if (this._match(TokenTypes.keywords.default)) {\r\n      selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n    } else {\r\n      selectors.push(this._shift_expression());\r\n    }\r\n\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n      } else {\r\n        selectors.push(this._shift_expression());\r\n      }\r\n    }\r\n\r\n    return selectors;\r\n  }\r\n\r\n  _case_body(): AST.Statement[] {\r\n    // statement case_body?\r\n    // fallthrough semicolon\r\n    if (this._match(TokenTypes.keywords.fallthrough)) {\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return [];\r\n    }\r\n\r\n    let statement = this._statement();\r\n    if (statement == null) {\r\n      return [];\r\n    }\r\n\r\n    if (!(statement instanceof Array)) {\r\n      statement = [statement];\r\n    }\r\n\r\n    const nextStatement = this._case_body();\r\n    if (nextStatement.length == 0) {\r\n      return statement;\r\n    }\r\n\r\n    return [...statement, nextStatement[0]];\r\n  }\r\n\r\n  _if_statement(): AST.If | null {\r\n    // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n    if (!this._match(TokenTypes.keywords.if)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const block = this._compound_statement();\r\n\r\n    let elseif: AST.ElseIf[] | null = [];\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      elseif = this._elseif_statement(elseif);\r\n    }\r\n\r\n    let _else: AST.Statement[] | null = null;\r\n    if (this._match(TokenTypes.keywords.else)) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      _else = this._compound_statement();\r\n    }\r\n\r\n    return this._updateNode(new AST.If(condition, block, elseif, _else), line);\r\n  }\r\n\r\n  _match_elseif(): boolean {\r\n    if (this._tokens[this._current].type === TokenTypes.keywords.else &&\r\n      this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\r\n      this._advance();\r\n      this._advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _elseif_statement(elseif: AST.ElseIf[] = []): AST.ElseIf[] {\r\n    // else_if optional_paren_expression compound_statement elseif_statement?\r\n    const condition = this._optional_paren_expression();\r\n    const block = this._compound_statement();\r\n    elseif.push(this._updateNode(new AST.ElseIf(condition, block)));\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      this._elseif_statement(elseif);\r\n    }\r\n    return elseif;\r\n  }\r\n\r\n  _return_statement(): AST.Return | null {\r\n    // return short_circuit_or_expression?\r\n    if (!this._match(TokenTypes.keywords.return)) {\r\n      return null;\r\n    }\r\n    const value = this._short_circuit_or_expression();\r\n    return this._updateNode(new AST.Return(value));\r\n  }\r\n\r\n  _short_circuit_or_expression(): AST.Expression {\r\n    // short_circuit_and_expression\r\n    // short_circuit_or_expression or_or short_circuit_and_expression\r\n    let expr = this._short_circuit_and_expr();\r\n    while (this._match(TokenTypes.tokens.or_or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._short_circuit_and_expr()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _short_circuit_and_expr(): AST.Expression {\r\n    // inclusive_or_expression\r\n    // short_circuit_and_expression and_and inclusive_or_expression\r\n    let expr = this._inclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.and_and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._inclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _inclusive_or_expression(): AST.Expression {\r\n    // exclusive_or_expression\r\n    // inclusive_or_expression or exclusive_or_expression\r\n    let expr = this._exclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._exclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _exclusive_or_expression(): AST.Expression {\r\n    // and_expression\r\n    // exclusive_or_expression xor and_expression\r\n    let expr = this._and_expression();\r\n    while (this._match(TokenTypes.tokens.xor)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._and_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _and_expression(): AST.Expression {\r\n    // equality_expression\r\n    // and_expression and equality_expression\r\n    let expr = this._equality_expression();\r\n    while (this._match(TokenTypes.tokens.and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._equality_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _equality_expression(): AST.Expression {\r\n    // relational_expression\r\n    // relational_expression equal_equal relational_expression\r\n    // relational_expression not_equal relational_expression\r\n    const expr = this._relational_expression();\r\n    if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\r\n      return this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._relational_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _relational_expression(): AST.Expression {\r\n    // shift_expression\r\n    // relational_expression less_than shift_expression\r\n    // relational_expression greater_than shift_expression\r\n    // relational_expression less_than_equal shift_expression\r\n    // relational_expression greater_than_equal shift_expression\r\n    let expr = this._shift_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.less_than,\r\n        TokenTypes.tokens.greater_than,\r\n        TokenTypes.tokens.less_than_equal,\r\n        TokenTypes.tokens.greater_than_equal,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._shift_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _shift_expression(): AST.Expression {\r\n    // additive_expression\r\n    // shift_expression shift_left additive_expression\r\n    // shift_expression shift_right additive_expression\r\n    let expr = this._additive_expression();\r\n    while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._additive_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _additive_expression(): AST.Expression {\r\n    // multiplicative_expression\r\n    // additive_expression plus multiplicative_expression\r\n    // additive_expression minus multiplicative_expression\r\n    let expr = this._multiplicative_expression();\r\n    while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._multiplicative_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _multiplicative_expression(): AST.Expression {\r\n    // unary_expression\r\n    // multiplicative_expression star unary_expression\r\n    // multiplicative_expression forward_slash unary_expression\r\n    // multiplicative_expression modulo unary_expression\r\n    let expr = this._unary_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.forward_slash,\r\n        TokenTypes.tokens.modulo,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _unary_expression(): AST.Expression {\r\n    // singular_expression\r\n    // minus unary_expression\r\n    // bang unary_expression\r\n    // tilde unary_expression\r\n    // star unary_expression\r\n    // and unary_expression\r\n    if (this._match([\r\n        TokenTypes.tokens.minus,\r\n        TokenTypes.tokens.bang,\r\n        TokenTypes.tokens.tilde,\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.and,\r\n      ])) {\r\n      return this._updateNode(new AST.UnaryOperator(\r\n        this._previous().toString(),\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return this._singular_expression();\r\n  }\r\n\r\n  _singular_expression(): AST.Expression {\r\n    // primary_expression postfix_expression ?\r\n    const expr = this._primary_expression();\r\n    const p = this._postfix_expression();\r\n    if (p) {\r\n      expr.postfix = p;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _postfix_expression(): AST.Expression | null {\r\n    // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n    if (this._match(TokenTypes.tokens.bracket_left)) {\r\n      const expr = this._short_circuit_or_expression();\r\n      this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\r\n      const arrayIndex = this._updateNode(new AST.ArrayIndex(expr));\r\n      const p = this._postfix_expression();\r\n      if (p) {\r\n        arrayIndex.postfix = p;\r\n      }\r\n      return arrayIndex;\r\n    }\r\n\r\n    // period ident postfix_expression?\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const name = this._consume(TokenTypes.tokens.name, \"Expected member name.\");\r\n      const p = this._postfix_expression();\r\n      const expr = this._updateNode(new AST.StringExpr(name.lexeme));\r\n      if (p) {\r\n        expr.postfix = p;\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _getStruct(name: string): AST.Type | null {\r\n    if (this._context.aliases.has(name)) {\r\n      const alias = this._context.aliases.get(name).type;\r\n      return alias;\r\n    }\r\n    if (this._context.structs.has(name)) {\r\n      const struct = this._context.structs.get(name);\r\n      return struct;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getType(name: string): AST.Type {\r\n    const struct = this._getStruct(name);\r\n    if (struct !== null) {\r\n      return struct;\r\n    }\r\n    switch (name) {\r\n      case \"void\":\r\n        return AST.Type.void;\r\n      case \"bool\":\r\n        return AST.Type.bool;\r\n      case \"i32\":\r\n        return AST.Type.i32;\r\n      case \"u32\":\r\n        return AST.Type.u32;\r\n      case \"f32\":\r\n        return AST.Type.f32;\r\n      case \"f16\":\r\n        return AST.Type.f16;\r\n      case \"vec2f\":\r\n        return AST.TemplateType.vec2f;\r\n      case \"vec3f\":\r\n        return AST.TemplateType.vec3f;\r\n      case \"vec4f\":\r\n        return AST.TemplateType.vec4f;\r\n      case \"vec2i\":\r\n        return AST.TemplateType.vec2i;\r\n      case \"vec3i\":\r\n        return AST.TemplateType.vec3i;\r\n      case \"vec4i\":\r\n        return AST.TemplateType.vec4i;\r\n      case \"vec2u\":\r\n        return AST.TemplateType.vec2u;\r\n      case \"vec3u\":\r\n        return AST.TemplateType.vec3u;\r\n      case \"vec4u\":\r\n        return AST.TemplateType.vec4u;\r\n      case \"vec2h\":\r\n        return AST.TemplateType.vec2h;\r\n      case \"vec3h\":\r\n        return AST.TemplateType.vec3h;\r\n      case \"vec4h\":\r\n        return AST.TemplateType.vec4h;\r\n      case \"mat2x2f\":\r\n        return AST.TemplateType.mat2x2f;\r\n      case \"mat2x3f\":\r\n        return AST.TemplateType.mat2x3f;\r\n      case \"mat2x4f\":\r\n        return AST.TemplateType.mat2x4f;\r\n      case \"mat3x2f\":\r\n        return AST.TemplateType.mat3x2f;\r\n      case \"mat3x3f\":\r\n        return AST.TemplateType.mat3x3f;\r\n      case \"mat3x4f\":\r\n        return AST.TemplateType.mat3x4f;\r\n      case \"mat4x2f\":\r\n        return AST.TemplateType.mat4x2f;\r\n      case \"mat4x3f\":\r\n        return AST.TemplateType.mat4x3f;\r\n      case \"mat4x4f\":\r\n        return AST.TemplateType.mat4x4f;\r\n      case \"mat2x2h\":\r\n        return AST.TemplateType.mat2x2h;\r\n      case \"mat2x3h\":\r\n        return AST.TemplateType.mat2x3h;\r\n      case \"mat2x4h\":\r\n        return AST.TemplateType.mat2x4h;\r\n      case \"mat3x2h\":\r\n        return AST.TemplateType.mat3x2h;\r\n      case \"mat3x3h\":\r\n        return AST.TemplateType.mat3x3h;\r\n      case \"mat3x4h\":\r\n        return AST.TemplateType.mat3x4h;\r\n      case \"mat4x2h\":\r\n        return AST.TemplateType.mat4x2h;\r\n      case \"mat4x3h\":\r\n        return AST.TemplateType.mat4x3h;\r\n      case \"mat4x4h\":\r\n        return AST.TemplateType.mat4x4h;\r\n\r\n      case \"mat2x2i\":\r\n        return AST.TemplateType.mat2x2i;\r\n      case \"mat2x3i\":\r\n        return AST.TemplateType.mat2x3i;\r\n      case \"mat2x4i\":\r\n        return AST.TemplateType.mat2x4i;\r\n      case \"mat3x2i\":\r\n        return AST.TemplateType.mat3x2i;\r\n      case \"mat3x3i\":\r\n        return AST.TemplateType.mat3x3i;\r\n      case \"mat3x4i\":\r\n        return AST.TemplateType.mat3x4i;\r\n      case \"mat4x2i\":\r\n        return AST.TemplateType.mat4x2i;\r\n      case \"mat4x3i\":\r\n        return AST.TemplateType.mat4x3i;\r\n      case \"mat4x4i\":\r\n        return AST.TemplateType.mat4x4i;\r\n\r\n      case \"mat2x2u\":\r\n        return AST.TemplateType.mat2x2u;\r\n      case \"mat2x3u\":\r\n        return AST.TemplateType.mat2x3u;\r\n      case \"mat2x4u\":\r\n        return AST.TemplateType.mat2x4u;\r\n      case \"mat3x2u\":\r\n        return AST.TemplateType.mat3x2u;\r\n      case \"mat3x3u\":\r\n        return AST.TemplateType.mat3x3u;\r\n      case \"mat3x4u\":\r\n        return AST.TemplateType.mat3x4u;\r\n      case \"mat4x2u\":\r\n        return AST.TemplateType.mat4x2u;\r\n      case \"mat4x3u\":\r\n        return AST.TemplateType.mat4x3u;\r\n      case \"mat4x4u\":\r\n        return AST.TemplateType.mat4x4u;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _validateTypeRange(value: number, type: AST.Type) {\r\n    if (type.name === \"i32\") {\r\n      if (value < -2147483648 || value > 2147483647) {\r\n        throw this._error(this._previous(), `Value out of range for i32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    } else if (type.name === \"u32\") {\r\n      if (value < 0 || value > 4294967295) {\r\n        throw this._error(this._previous(), `Value out of range for u32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  _primary_expression(): AST.Expression {\r\n    // ident argument_expression_list?\r\n    if (this._match(TokenTypes.tokens.ident)) {\r\n      const name = this._previous().toString();\r\n      if (this._check(TokenTypes.tokens.paren_left)) {\r\n        const args = this._argument_expression_list();\r\n        const type = this._getType(name);\r\n        if (type !== null) {\r\n          return this._updateNode(new AST.CreateExpr(type, args));\r\n        }\r\n        return this._updateNode(new AST.CallExpr(name, args));\r\n      }\r\n      if (this._context.constants.has(name)) {\r\n        const c = this._context.constants.get(name);\r\n        return this._updateNode(new AST.ConstExpr(name, c.value));\r\n      }\r\n      return this._updateNode(new AST.VariableExpr(name));\r\n    }\r\n\r\n    // const_literal\r\n    if (this._match(TokenTypes.tokens.int_literal)) {\r\n      const s = this._previous().toString();\r\n      let type = s.endsWith(\"i\") || s.endsWith(\"i\") ? AST.Type.i32 :\r\n          s.endsWith(\"u\") || s.endsWith(\"U\") ? AST.Type.u32 : AST.Type.x32;\r\n      const i = parseInt(s);\r\n      this._validateTypeRange(i, type);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(i, this._exec.getTypeInfo(type)), type));\r\n    } else if (this._match(TokenTypes.tokens.uint_literal)) {\r\n      const u = parseInt(this._previous().toString());\r\n      this._validateTypeRange(u, AST.Type.u32);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(u, this._exec.getTypeInfo(AST.Type.u32)), AST.Type.u32));\r\n    } else if (this._match([TokenTypes.tokens.decimal_float_literal, TokenTypes.tokens.hex_float_literal])) {\r\n      let fs = this._previous().toString();\r\n      let isF16 = fs.endsWith(\"h\");\r\n      if (isF16) {\r\n        fs = fs.substring(0, fs.length - 1);\r\n      }\r\n      const f = parseFloat(fs);\r\n      this._validateTypeRange(f, isF16 ? AST.Type.f16 : AST.Type.f32);\r\n      const type = isF16 ? AST.Type.f16 : AST.Type.f32;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(f, this._exec.getTypeInfo(type)), type));\r\n    } else if (this._match([TokenTypes.keywords.true, TokenTypes.keywords.false])) {\r\n      let b = this._previous().toString() === TokenTypes.keywords.true.rule;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(b ? 1 : 0, this._exec.getTypeInfo(AST.Type.bool)), AST.Type.bool));\r\n    }\r\n\r\n    // paren_expression\r\n    if (this._check(TokenTypes.tokens.paren_left)) {\r\n      return this._paren_expression();\r\n    }\r\n\r\n    // bitcast less_than type_decl greater_than paren_expression\r\n    if (this._match(TokenTypes.keywords.bitcast)) {\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\r\n      const type = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n      const value = this._paren_expression();\r\n      return this._updateNode(new AST.BitcastExpr(type, value));\r\n    }\r\n\r\n    // type_decl argument_expression_list\r\n    const type = this._type_decl();\r\n    const args = this._argument_expression_list();\r\n    return this._updateNode(new AST.CreateExpr(type, args));\r\n  }\r\n\r\n  _argument_expression_list(): AST.Expression[] | null {\r\n    // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n    if (!this._match(TokenTypes.tokens.paren_left)) {\r\n      return null;\r\n    }\r\n\r\n    const args: AST.Expression[] = [];\r\n    do {\r\n      if (this._check(TokenTypes.tokens.paren_right)) {\r\n        break;\r\n      }\r\n      const arg = this._short_circuit_or_expression();\r\n      args.push(arg);\r\n    } while (this._match(TokenTypes.tokens.comma));\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' for agument list\"\r\n    );\r\n\r\n    return args;\r\n  }\r\n\r\n  _optional_paren_expression(): AST.Expression {\r\n    // [paren_left] short_circuit_or_expression [paren_right]\r\n    this._match(TokenTypes.tokens.paren_left);\r\n    const expr = this._short_circuit_or_expression();\r\n    this._match(TokenTypes.tokens.paren_right);\r\n    return expr;\r\n  }\r\n\r\n  _paren_expression(): AST.Expression {\r\n    // paren_left short_circuit_or_expression paren_right\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n    const expr = this._short_circuit_or_expression();\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n    return expr;\r\n  }\r\n\r\n  _struct_decl(): AST.Struct | null {\r\n    // attribute* struct ident struct_body_decl\r\n    if (!this._match(TokenTypes.keywords.struct)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\r\n\r\n    // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\r\n    const members: AST.Member[] = [];\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      // struct_member: attribute* variable_ident_decl\r\n      const memberAttrs = this._attribute();\r\n\r\n      const memberName = this._consume(TokenTypes.tokens.name, \"Expected variable name.\").toString();\r\n\r\n      this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\r\n\r\n      const typeAttrs = this._attribute();\r\n      const memberType = this._type_decl();\r\n      if (memberType != null) {\r\n        memberType.attributes = typeAttrs;\r\n      }\r\n\r\n      if (!this._check(TokenTypes.tokens.brace_right)) {\r\n        this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\r\n      } else {\r\n        this._match(TokenTypes.tokens.comma); // trailing comma optional.\r\n      }\r\n\r\n      members.push(this._updateNode(new AST.Member(memberName, memberType, memberAttrs)));\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    const structNode = this._updateNode(new AST.Struct(name, members, startLine, endLine), startLine);\r\n    this._context.structs.set(name, structNode);\r\n    return structNode;\r\n  }\r\n\r\n  _global_variable_decl(): AST.Var | null {\r\n    // attribute* variable_decl (equal const_expression)?\r\n    const _var = this._variable_decl();\r\n    if (!_var) {\r\n      return null;\r\n    }\r\n\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      const expr = this._const_expression();\r\n      _var.value = expr;\r\n    }\r\n\r\n    if (_var.type !== null && _var.value instanceof AST.LiteralExpr) {\r\n      if (_var.value.type.name !== \"x32\") {\r\n        const t1 = _var.type.getTypeName();\r\n        const t2 = _var.value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${_var.value.type.name} to ${_var.type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n      _var.value.type = _var.type;\r\n    } else if (_var.type === null && _var.value instanceof AST.LiteralExpr) {\r\n      _var.type = _var.value.type.name === \"x32\" ? AST.Type.i32 : _var.value.type;\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n    }\r\n    return _var;\r\n  }\r\n\r\n  _override_variable_decl(): AST.Override | null {\r\n    // attribute* override_decl (equal const_expression)?\r\n    const _override = this._override_decl();\r\n    if (_override && this._match(TokenTypes.tokens.equal)) {\r\n      _override.value = this._const_expression();\r\n    }\r\n\r\n    return _override;\r\n  }\r\n\r\n  _global_const_decl(): AST.Const | null {\r\n    // attribute* const (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.const)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    const line = this._currentLine;\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n    let value: AST.Expression | null = null;\r\n\r\n    this._consume(TokenTypes.tokens.equal, \"const declarations require an assignment\")\r\n\r\n    const valueExpr = this._short_circuit_or_expression();\r\n    try {\r\n      let type = [AST.Type.f32];\r\n      let constValue = valueExpr.constEvaluate(this._exec, type);\r\n\r\n      if (constValue instanceof ScalarData) {\r\n        this._validateTypeRange(constValue.value, type[0]);\r\n      }\r\n\r\n      if (type[0] instanceof AST.TemplateType && type[0].format === null &&\r\n        constValue.typeInfo instanceof TemplateInfo && constValue.typeInfo.format !== null) {\r\n        if (constValue.typeInfo.format.name === \"f16\") {\r\n          type[0].format = AST.Type.f16;\r\n        } else if (constValue.typeInfo.format.name === \"f32\") {\r\n          type[0].format = AST.Type.f32;\r\n        } else if (constValue.typeInfo.format.name === \"i32\") {\r\n          type[0].format = AST.Type.i32;\r\n        } else if (constValue.typeInfo.format.name === \"u32\") {\r\n          type[0].format = AST.Type.u32;\r\n        } else if (constValue.typeInfo.format.name === \"bool\") {\r\n          type[0].format = AST.Type.bool;\r\n        } else {\r\n          console.error(`TODO: impelement template format type ${constValue.typeInfo.format.name}`);\r\n        }\r\n      }\r\n\r\n      value = this._updateNode(new AST.LiteralExpr(constValue, type[0]));\r\n      this._exec.context.setVariable(name.toString(), constValue);\r\n    } catch {\r\n      value = valueExpr;\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, value.type);\r\n      }\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value?.type ?? AST.Type.f32;\r\n      if (type === AST.Type.x32) {\r\n        type = AST.Type.i32;\r\n      }\r\n    }\r\n\r\n    const c = this._updateNode(new AST.Const(name.toString(), type, \"\", \"\", value), line);\r\n    this._context.constants.set(c.name, c);\r\n    return c;\r\n  }\r\n\r\n  _global_let_decl(): AST.Let | null {\r\n    // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.let)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    let value: AST.Expression | null = null;\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      value = this._const_expression();\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value.type.name === \"x32\" ? AST.Type.i32 : value.type;\r\n    }\r\n\r\n    if (value instanceof AST.LiteralExpr) {\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, type);\r\n      }\r\n    }\r\n    return this._updateNode(new AST.Let(name.toString(), type, \"\", \"\", value), line);\r\n  }\r\n\r\n  _const_expression(): AST.Expression {\r\n    // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n    // const_literal\r\n    return this._short_circuit_or_expression();\r\n  }\r\n\r\n  _variable_decl(): AST.Var | null {\r\n    // var variable_qualifier? (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.var)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n    let storage: string = \"\";\r\n    let access: string = \"\";\r\n    if (this._match(TokenTypes.tokens.less_than)) {\r\n      storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\r\n      if (this._match(TokenTypes.tokens.comma))\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Var(name.toString(), type, storage, access, null), line);\r\n  }\r\n\r\n  _override_decl(): AST.Override | null {\r\n    // override (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.override)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(TokenTypes.tokens.name, \"Expected variable name\");\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Override(name.toString(), type, null));\r\n  }\r\n\r\n  _diagnostic(): AST.Diagnostic | null {\r\n    // diagnostic(severity_control_name, diagnostic_rule_name)\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\r\n    const severity = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected severity control name.\"\r\n    );\r\n    this._consume(TokenTypes.tokens.comma, \"Expected ','\");\r\n    const rule = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected diagnostic rule name.\"\r\n    );\r\n    let ruleMessage = rule.toString();\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const message = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected diagnostic message.\"\r\n      );\r\n      ruleMessage += `.${message.toString()}`;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n    return this._updateNode(new AST.Diagnostic(severity.toString(), ruleMessage));\r\n  }\r\n\r\n  _enable_directive(): AST.Enable {\r\n    // enable ident semicolon\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    return this._updateNode(new AST.Enable(name.toString()));\r\n  }\r\n\r\n  _requires_directive(): AST.Requires {\r\n    // requires extension [, extension]* semicolon\r\n    const extensions: string[] = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n      extensions.push(name.toString());\r\n    }\r\n    return this._updateNode(new AST.Requires(extensions));\r\n  }\r\n\r\n  _type_alias(): AST.Alias {\r\n    // type ident equal type_decl\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\r\n\r\n    let aliasType = this._type_decl();\r\n    if (aliasType === null) {\r\n      throw this._error(this._peek(), \"Expected Type for Alias.\");\r\n    }\r\n    if (this._context.aliases.has(aliasType.name)) {\r\n      aliasType = this._context.aliases.get(aliasType.name).type;\r\n    }\r\n\r\n    const aliasNode = this._updateNode(new AST.Alias(name.toString(), aliasType));\r\n    this._context.aliases.set(aliasNode.name, aliasNode);\r\n\r\n    return aliasNode;\r\n  }\r\n\r\n  _type_decl(): AST.Type | null {\r\n    // ident\r\n    // bool\r\n    // float32\r\n    // int32\r\n    // uint32\r\n    // vec2 less_than type_decl greater_than\r\n    // vec3 less_than type_decl greater_than\r\n    // vec4 less_than type_decl greater_than\r\n    // mat2x2 less_than type_decl greater_than\r\n    // mat2x3 less_than type_decl greater_than\r\n    // mat2x4 less_than type_decl greater_than\r\n    // mat3x2 less_than type_decl greater_than\r\n    // mat3x3 less_than type_decl greater_than\r\n    // mat3x4 less_than type_decl greater_than\r\n    // mat4x2 less_than type_decl greater_than\r\n    // mat4x3 less_than type_decl greater_than\r\n    // mat4x4 less_than type_decl greater_than\r\n    // atomic less_than type_decl greater_than\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    // array_type_decl\r\n    // texture_sampler_types\r\n\r\n    if (this._check([\r\n        TokenTypes.tokens.ident,\r\n        ...TokenTypes.texel_format,\r\n        TokenTypes.keywords.bool,\r\n        TokenTypes.keywords.f32,\r\n        TokenTypes.keywords.i32,\r\n        TokenTypes.keywords.u32,\r\n      ])) {\r\n      const type = this._advance();\r\n      const typeName = type.toString();\r\n      if (this._context.structs.has(typeName)) {\r\n        return this._context.structs.get(typeName);\r\n      }\r\n      if (this._context.aliases.has(typeName)) {\r\n        return this._context.aliases.get(typeName).type;\r\n      }\r\n\r\n      const t = this._getType(typeName);\r\n      // Don't \"forward declare\" built-in types\r\n      if (!t) {\r\n        const node = this._updateNode(new AST.ForwardType(typeName));\r\n        this._forwardTypeCount++;\r\n        return node;\r\n      }\r\n\r\n      return this._updateNode(new AST.Type(typeName));\r\n    }\r\n\r\n    // texture_sampler_types\r\n    let type = this._texture_sampler_types();\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    if (this._check(TokenTypes.template_types)) {\r\n      let type = this._advance().toString();\r\n      let format: AST.Type | null = null;\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        access = null;\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\r\n      }\r\n      const node = this._updateNode(new AST.TemplateType(type, format, access));\r\n      return node;\r\n    }\r\n\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    if (this._match(TokenTypes.keywords.ptr)) {\r\n      let pointer = this._previous().toString();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\r\n      const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\r\n      const decl = this._type_decl();\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.comma)) {\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n      }\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\r\n      const node = this._updateNode(new AST.PointerType(pointer, storage.toString(), decl, access));\r\n      return node;\r\n    }\r\n\r\n    // The following type_decl's have an optional attribyte_list*\r\n    const attrs = this._attribute();\r\n\r\n    // attribute* array\r\n    // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n    if (this._match(TokenTypes.keywords.array)) {\r\n      let format = null;\r\n      let countInt = -1;\r\n      const array = this._previous();\r\n      let countNode: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        if (this._context.aliases.has(format.name)) {\r\n          format = this._context.aliases.get(format.name).type;\r\n        }\r\n        let count: string = \"\";\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          countNode = this._shift_expression();\r\n          // If we can't evaluate the node, defer evaluating it until after the shader has\r\n          // finished being parsed, because const statements can be declared **after** they\r\n          // are used.\r\n          try {\r\n            count = countNode.constEvaluate(this._exec).toString();\r\n            countNode = null;\r\n          } catch (e) {\r\n            count = \"1\";\r\n          }\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\r\n        countInt = count ? parseInt(count) : 0;\r\n      }\r\n      const arrayType = this._updateNode(new AST.ArrayType(array.toString(), attrs, format, countInt));\r\n      if (countNode) {\r\n        this._deferArrayCountEval.push({ arrayType, countNode });\r\n      }\r\n      return arrayType;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _texture_sampler_types(): AST.SamplerType | null {\r\n    // sampler_type\r\n    if (this._match(TokenTypes.sampler_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // depth_texture_type\r\n    if (this._match(TokenTypes.depth_texture_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // sampled_texture_type less_than type_decl greater_than\r\n    // multisampled_texture_type less_than type_decl greater_than\r\n    if (this._match(TokenTypes.sampled_texture_type) ||\r\n      this._match(TokenTypes.multisampled_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(\r\n        TokenTypes.tokens.less_than,\r\n        \"Expected '<' for sampler type.\"\r\n      );\r\n      const format = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, null));\r\n    }\r\n\r\n    // storage_texture_type less_than texel_format comma access_mode greater_than\r\n    if (this._match(TokenTypes.storage_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\r\n      const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\r\n      const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, access));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _attribute(): AST.Attribute[] | null {\r\n    // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n    // attr ident\r\n\r\n    let attributes: AST.Attribute[] = [];\r\n\r\n    while (this._match(TokenTypes.tokens.attr)) {\r\n      const name = this._consume(\r\n        TokenTypes.attribute_name,\r\n        \"Expected attribute name\"\r\n      );\r\n      const attr = this._updateNode(new AST.Attribute(name.toString(), null));\r\n      if (this._match(TokenTypes.tokens.paren_left)) {\r\n        // literal_or_ident\r\n        attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n        if (this._check(TokenTypes.tokens.comma)) {\r\n          this._advance();\r\n          do {\r\n            const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n            if (!(attr.value instanceof Array)) {\r\n              attr.value = [attr.value as string];\r\n            }\r\n            attr.value.push(v);\r\n          } while (this._match(TokenTypes.tokens.comma));\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n      }\r\n      attributes.push(attr);\r\n    }\r\n\r\n    if (attributes.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n}\r\n", "import { WgslParser } from \"./wgsl_parser.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\n\r\nexport * from \"./reflect/info.js\";\r\n\r\nexport class WgslReflect extends Reflect {\r\n  constructor(code?: string) {\r\n    super();\r\n    if (code) {\r\n      this.update(code);\r\n    }\r\n  }\r\n\r\n  update(code: string): void {\r\n    const parser = new WgslParser();\r\n    const ast = parser.parse(code);\r\n    this.updateAST(ast);\r\n  }\r\n}\r\n", "import { Node, CallExpr, Continue, Expression, Break } from \"../wgsl_ast.js\";\r\n\r\nexport class Command {\r\n    get line(): number { return -1; }\r\n}\r\n\r\nexport class StatementCommand extends Command {\r\n    node: Node;\r\n\r\n    constructor(node: Node) {\r\n        super();\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\nexport class CallExprCommand extends Command {\r\n    node: CallExpr;\r\n    statement: Node;\r\n\r\n    constructor(node: CallExpr, statement: Node) {\r\n        super();\r\n        this.node = node;\r\n        this.statement = statement;\r\n    }\r\n\r\n    get line(): number { return this.statement.line; }\r\n}\r\n\r\nexport class ContinueTargetCommand extends Command {\r\n    id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class BreakTargetCommand extends Command {\r\n    id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class ContinueCommand extends Command {\r\n    id: number;\r\n    node: Continue;\r\n\r\n    constructor(id: number, node: Continue) {\r\n        super();\r\n        this.id = id;\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\nexport class BreakCommand extends Command {\r\n    id: number;\r\n    condition: Expression | null;\r\n    node: Break;\r\n\r\n    constructor(id: number, condition: Expression | null, node: Break) {\r\n        super();\r\n        this.id = id;\r\n        this.condition = condition;\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\n\r\nexport class GotoCommand extends Command {\r\n    condition: Node | null;\r\n    position: number;\r\n    lineNo: number = -1;\r\n\r\n    constructor(condition: Node | null, position: number, line: number) {\r\n        super();\r\n        this.condition = condition;\r\n        this.position = position;\r\n        this.lineNo = line;\r\n    }\r\n\r\n    get line(): number {\r\n        return this.condition?.line ?? this.lineNo;\r\n    }\r\n}\r\n\r\nexport class BlockCommand extends Command {\r\n    statements: Array<Node> = [];\r\n\r\n    constructor(statements: Array<Node>) {\r\n      super();\r\n      this.statements = statements;\r\n    }\r\n\r\n    get line(): number {\r\n      return this.statements.length > 0 ? this.statements[0].line : -1;\r\n    }\r\n}\r\n", "import { Command } from \"./command.js\";\r\nimport { CallExpr } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\n\r\nexport class StackFrame {\r\n    parent: StackFrame | null = null;\r\n    context: ExecContext;\r\n    commands: Command[] = [];\r\n    current: number = 0;\r\n    parentCallExpr: CallExpr | null = null;\r\n\r\n    constructor(context: ExecContext, parent?: StackFrame) {\r\n        this.context = context;\r\n        this.parent = parent ?? null;\r\n    }\r\n\r\n    get isAtEnd(): boolean { return this.current >= this.commands.length; }\r\n\r\n    getNextCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        const command = this.commands[this.current];\r\n        this.current++;\r\n        return command;\r\n    }\r\n\r\n    getCurrentCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        return this.commands[this.current];\r\n    }\r\n}\r\n", "import { StackFrame } from \"./stack_frame.js\";\r\n\r\nexport class ExecStack {\r\n    states: StackFrame[] = [];\r\n\r\n    get isEmpty(): boolean { return this.states.length == 0; }\r\n\r\n    get last(): StackFrame | null { return this.states[this.states.length - 1] ?? null; }\r\n\r\n    pop(): void {\r\n        this.states.pop();\r\n    }\r\n}\r\n", "import * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { WgslParser } from \"./wgsl_parser.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { Command, StatementCommand, CallExprCommand, GotoCommand, BlockCommand,\r\n        ContinueTargetCommand, ContinueCommand, BreakCommand, BreakTargetCommand } from \"./exec/command.js\";\r\nimport { StackFrame } from \"./exec/stack_frame.js\";\r\nimport { ExecStack } from \"./exec/exec_stack.js\";\r\nimport { ScalarData, VectorData, MatrixData, TextureData, TypedData, VoidData } from \"./wgsl_ast.js\";\r\n\r\ntype RuntimeStateCallbackType = () => void;\r\n\r\nexport class WgslDebug {\r\n    _code: string;\r\n    _exec: WgslExec;\r\n    _execStack: ExecStack;\r\n    _dispatchId: number[];\r\n    _runTimer: any = null;\r\n    breakpoints: Set<number> = new Set();\r\n    runStateCallback: RuntimeStateCallbackType | null = null;\r\n\r\n    constructor(code: string, runStateCallback?: RuntimeStateCallbackType) {\r\n        this._code = code;\r\n        const parser = new WgslParser();\r\n        const ast = parser.parse(code);\r\n        this._exec = new WgslExec(ast);\r\n        this.runStateCallback = runStateCallback ?? null\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const context = this.context;\r\n        const v = context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    reset(): void {\r\n        this._exec = new WgslExec(this._exec.ast);\r\n        this.startDebug();\r\n    }\r\n\r\n    startDebug(): void {\r\n        this._execStack = new ExecStack();\r\n        const state = this._createState(this._exec.ast, this._exec.context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    get context(): ExecContext {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return this._exec.context;\r\n        }\r\n        return state.context;\r\n    }\r\n\r\n    get currentState(): StackFrame | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            return state;\r\n        }\r\n    }\r\n\r\n    get currentCommand(): Command | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state.getCurrentCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            return command;\r\n        }\r\n    }\r\n\r\n    toggleBreakpoint(line: number) {\r\n        if (this.breakpoints.has(line)) {\r\n            this.breakpoints.delete(line);\r\n        } else {\r\n            this.breakpoints.add(line);\r\n        }\r\n    }\r\n\r\n    clearBreakpoints() {\r\n        this.breakpoints.clear();\r\n    }\r\n\r\n    get isRunning() {\r\n        return this._runTimer !== null;\r\n    }\r\n\r\n    run() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this._runTimer !== null) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n            if (this.runStateCallback !== null) {\r\n                this.runStateCallback();\r\n            }\r\n        }\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this._exec.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this._exec.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    debugWorkgroup(kernel: string, dispatchId: number[], \r\n        dispatchCount: number | number[], bindGroups: Object, config?: Object): boolean {\r\n\r\n        this._execStack = new ExecStack();\r\n\r\n        const context = this._exec.context;\r\n        context.currentFunctionName = kernel;\r\n\r\n        this._dispatchId = dispatchId;\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        // Use this to debug the top level statements, otherwise call _execStatements.\r\n        /*const state = new _ExecState(this._exec.context);\r\n        this._execStack.states.push(state);\r\n        for (const statement of this._exec.ast) {\r\n            state.commands.push(new Command(CommandType.Statement, statement));\r\n        }*/\r\n        this._exec._execStatements(this._exec.ast, context);\r\n\r\n        const f = context.getFunction(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return false;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return false;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const depth = dispatchCount[2];\r\n        const height = dispatchCount[1];\r\n        const width = dispatchCount[0];\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                // Texture\r\n                                const textureData = new TextureData(entry.texture, this._exec.getTypeInfo(node.type), entry.descriptor,\r\n                                                                    entry.texture.view ?? null);\r\n                                v.value = textureData;\r\n                            } else if (entry.uniform !== undefined) {\r\n                                // Uniform buffer\r\n                                v.value = new TypedData(entry.uniform, this._exec.getTypeInfo(node.type));\r\n                            } else {\r\n                                // Storage buffer\r\n                                v.value = new TypedData(entry, this._exec.getTypeInfo(node.type));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        let found = false;\r\n        for (let z = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], vec3u));\r\n                    if (this._dispatchWorkgroup(f, [x, y, z], context)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _shouldExecuteNextCommand(): boolean {\r\n        const command = this.currentCommand;\r\n        if (command === null) {\r\n            return false;\r\n        }\r\n        if (command instanceof GotoCommand) {\r\n            if (command.condition === null) {\r\n                return true;\r\n            }\r\n        } else if (command instanceof ContinueTargetCommand || command instanceof BreakTargetCommand) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    stepInto() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(true);\r\n    }\r\n\r\n    stepOver() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(false);\r\n    }\r\n\r\n    stepOut() {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        const parentState = state.parent;\r\n\r\n        if (this.isRunning) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n        }\r\n\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n\r\n            const state = this.currentState;\r\n            if (state === parentState) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    // Returns true if execution is not finished, false if execution is complete.\r\n    stepNext(stepInto = true): boolean {\r\n        if (!this._execStack) {\r\n            this._execStack = new ExecStack();\r\n            const state = this._createState(this._exec.ast, this._exec.context);\r\n            this._execStack.states.push(state);\r\n        }\r\n\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return false;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return false;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state!.getNextCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            if (stepInto && command instanceof CallExprCommand) {\r\n                const node = command.node;\r\n                const fn = state.context.getFunction(node.name);\r\n                if (!fn) {\r\n                    continue; // it's not a custom function, step over it\r\n                }\r\n                const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                    const arg = fn.node.args[ai];\r\n                    const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                    fnState.context.createVariable(arg.name, value, arg);\r\n                }\r\n\r\n                fnState.parentCallExpr = node;\r\n                this._execStack.states.push(fnState);\r\n                fnState.context.currentFunctionName = fn.name;\r\n\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof StatementCommand) {\r\n                const node = command.node;\r\n                if (stepInto && node instanceof AST.Call) {\r\n                    const fn = state.context.getFunction(node.name);\r\n                    // We want to step into custom functions, not directly execute them\r\n                    if (fn) {\r\n                        const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                        for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                            const arg = fn.node.args[ai];\r\n                            const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                            fnState.context.createVariable(arg.name, value, arg);\r\n                        }\r\n\r\n                        this._execStack.states.push(fnState);\r\n                        fnState.context.currentFunctionName = fn.name;\r\n\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                const res = this._exec.execStatement(node, state.context);\r\n                if (res !== null && res !== undefined && !(res instanceof VoidData)) {\r\n                    let s = state;\r\n                    // Find the CallExpr to store the return value in.\r\n                    while (s) {\r\n                        if (s.parentCallExpr) {\r\n                            s.parentCallExpr.setCachedReturnValue(res);\r\n                            break;\r\n                        }\r\n                        s = s.parent;\r\n                    }\r\n                    if (s === null) {\r\n                        console.error(\"Could not find CallExpr to store return value in\");\r\n                    }\r\n                    if (this._shouldExecuteNextCommand()) {\r\n                        continue;\r\n                    }\r\n                    return true;\r\n                }\r\n            } else if (command instanceof ContinueTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof BreakTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof ContinueCommand) {\r\n                const targetId = command.id;\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof ContinueTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -1 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a -1.\r\n                // That means a continue was used outside of a loop, so we're done.\r\n                console.error(\"Continue statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof BreakCommand) {\r\n                const targetId = command.id;\r\n                // break-if conditional break \r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the condition is false, then we should not the break.\r\n                    if (!res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof BreakTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -2 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a BreakTarget.\r\n                // That means a break was used outside of a loop, so we're done.\r\n                console.error(\"Break statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof GotoCommand) {\r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the GOTO condition value is true, then continue to the next command.\r\n                    // Otherwise, jump to the specified position.\r\n                    if (res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n                state.current = command.position;\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof BlockCommand) {\r\n                const blockState = this._createState(command.statements, state.context.clone(), state);\r\n                this._execStack.states.push(blockState);\r\n                continue; // step into the first statement of the block\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (this._shouldExecuteNextCommand()) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): boolean {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (Array.isArray(attr.value)) {\r\n                    if (attr.value.length > 0) {\r\n                        // The value could be an override constant\r\n                        const v = context.getVariableValue(attr.value[0]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[0] = v.value;\r\n                        } else {\r\n                            workgroupSize[0] = parseInt(attr.value[0]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 1) {\r\n                        const v = context.getVariableValue(attr.value[1]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[1] = v.value;\r\n                        } else {\r\n                            workgroupSize[1] = parseInt(attr.value[1]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 2) {\r\n                        const v = context.getVariableValue(attr.value[2]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[2] = v.value;\r\n                        } else {\r\n                            workgroupSize[2] = parseInt(attr.value[2]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const v = context.getVariableValue(attr.value);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else if (v instanceof VectorData) {\r\n                        workgroupSize[0] = v.data[0];\r\n                        workgroupSize[1] = v.data.length > 1 ? v.data[1] : 1;\r\n                        workgroupSize[2] = v.data.length > 2 ? v.data[2] : 1;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        const u32 = this._exec.typeInfo[\"u32\"];\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        let found = false;\r\n        for (let z = 0, li = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    if (global_invocation_id[0] === this._dispatchId[0] &&\r\n                        global_invocation_id[1] === this._dispatchId[1] &&\r\n                        global_invocation_id[2] === this._dispatchId[2]) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            this._dispatchExec(f, context);\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext) {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== null) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const state = this._createState(f.node.body, context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    _createState(ast: AST.Node[], context: ExecContext, parent?: StackFrame): StackFrame {\r\n        const state = new StackFrame(context, parent ?? null);\r\n\r\n        for (const statement of ast) {\r\n            // A statement may have expressions that include function calls.\r\n            // Gather all of the internal function calls from the statement.\r\n            // We can then include them as commands to step through, storing their\r\n            // values with the call node so that when it is evaluated, it uses that\r\n            // already computed value. This allows us to step into the function\r\n            if (statement instanceof AST.Let ||\r\n                statement instanceof AST.Var ||\r\n                statement instanceof AST.Const ||\r\n                statement instanceof AST.Assign) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Call) {\r\n                const functionCalls = [];\r\n                for (const arg of statement.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Return) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Increment) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Function) {\r\n                const f = new FunctionRef(statement);\r\n                state.context.functions.set(statement.name, f);\r\n                continue;\r\n            } else if (statement instanceof AST.If) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                }\r\n                const gotoEnd = new GotoCommand(null, 0, statement.line);\r\n                state.commands.push(gotoEnd);\r\n\r\n                for (const elseIf of statement.elseif) {\r\n                    conditionCmd.position = state.commands.length;\r\n\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(elseIf.condition, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n\r\n                    conditionCmd = new GotoCommand(elseIf.condition, 0, elseIf.line);\r\n                    state.commands.push(conditionCmd);\r\n                    if (elseIf.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(elseIf.body));\r\n                    }\r\n                    state.commands.push(gotoEnd);\r\n                }\r\n\r\n                conditionCmd.position = state.commands.length;\r\n                if (statement.else) {\r\n                    state.commands.push(new BlockCommand(statement.else));\r\n                }\r\n\r\n                gotoEnd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Switch) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let defaultCase: AST.SwitchCase | null = null;\r\n                for (const c of statement.cases) {\r\n                    if (c instanceof AST.Default) {\r\n                        defaultCase = c;\r\n                        break;\r\n                    } else if (c instanceof AST.Case) {\r\n                        for (const selector of c.selectors) {\r\n                            if (selector instanceof AST.DefaultSelector) {\r\n                                defaultCase = c;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const gotoEndCommands: GotoCommand[] = [];\r\n\r\n                for (const c of statement.cases) {\r\n                    if (c === defaultCase) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!(c instanceof AST.Case)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let lastCondition = null;\r\n                    for (const selector of c.selectors) {\r\n                        let conditionExpr = new AST.BinaryOperator(\"==\", statement.condition, selector);\r\n                        if (lastCondition) {\r\n                            conditionExpr = new AST.BinaryOperator(\"||\", lastCondition, conditionExpr);\r\n                        }\r\n                        lastCondition = conditionExpr;\r\n                    }\r\n\r\n                    const gotoCommand = new GotoCommand(lastCondition, 0, c.line);\r\n                    state.commands.push(gotoCommand);\r\n\r\n                    if (c.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(c.body));\r\n                    }\r\n\r\n                    const gotoEndCommand = new GotoCommand(null, 0, c.line);\r\n                    gotoEndCommands.push(gotoEndCommand);\r\n                    state.commands.push(gotoEndCommand);\r\n\r\n                    gotoCommand.position = state.commands.length;\r\n                }\r\n\r\n                if (defaultCase) {\r\n                    state.commands.push(new BlockCommand(defaultCase.body));\r\n                }\r\n\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n\r\n                const commandPos = state.commands.length;\r\n                for (let i = 0; i < gotoEndCommands.length; ++i) {\r\n                    gotoEndCommands[i].position = commandPos;\r\n                }\r\n            } else if (statement instanceof AST.While) {\r\n                const functionCalls = [];\r\n                state.commands.push(new ContinueTargetCommand(statement.id));\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                const conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                let lastLine = statement.line;\r\n\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                state.commands.push(new GotoCommand(statement.condition, 0, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.For) {\r\n                if (statement.init) {\r\n                    state.commands.push(new StatementCommand(statement.init));\r\n                }\r\n\r\n                let conditionPos = state.commands.length;\r\n\r\n                if (statement.increment === null) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let conditionCmd = null;\r\n                if (statement.condition) {\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(statement.condition!, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n                    conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                    state.commands.push(conditionCmd);\r\n                }\r\n\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                if (statement.increment) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                    state.commands.push(new StatementCommand(statement.increment));\r\n                }\r\n                state.commands.push(new GotoCommand(null, conditionPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Loop) {\r\n                let loopStartPos = state.commands.length;\r\n                if (!statement.continuing) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n                state.commands.push(new GotoCommand(null, loopStartPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n            } else if (statement instanceof AST.Continuing) {\r\n                state.commands.push(new ContinueTargetCommand(statement.loopId));\r\n                state.commands.push(new BlockCommand(statement.body));\r\n            } else if (statement instanceof AST.Continue) {\r\n                state.commands.push(new ContinueCommand(statement.loopId, statement));\r\n            } else if (statement instanceof AST.Break) {\r\n                state.commands.push(new BreakCommand(statement.loopId, statement.condition, statement));\r\n            } else if (statement instanceof AST.StaticAssert) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Struct) {\r\n                // nothing to do\r\n            } else {\r\n                console.error(`TODO: statement type ${statement.constructor.name}`);\r\n            }\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    _collectFunctionCalls(node: AST.Expression, functionCalls: AST.CallExpr[]) {\r\n        if (node instanceof AST.CallExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n            // Only collect custom function calls, not built-in functions.\r\n            if (!node.isBuiltin) {\r\n                functionCalls.push(node);\r\n            }\r\n        } else if (node instanceof AST.BinaryOperator) {\r\n            this._collectFunctionCalls(node.left, functionCalls);\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.UnaryOperator) {\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.CreateExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n        } else if (node instanceof AST.BitcastExpr) {\r\n            this._collectFunctionCalls(node.value, functionCalls);\r\n        } else if (node instanceof AST.ArrayIndex) {\r\n            this._collectFunctionCalls(node.index, functionCalls);\r\n        } else if (AST.LiteralExpr) {\r\n            // nothing to do\r\n        } else {\r\n            console.error(`TODO: expression type ${node.constructor.name}`);\r\n        }\r\n    }\r\n}\r\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Forked from THREE.js under MIT license\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nimport {clamp} from '@math.gl/core';\n\n/** Pre-calculated tables for float16 conversion */\ntype Float16Tables = {\n  // float32 to float16 helpers\n  baseTable: Uint32Array;\n  shiftTable: Uint32Array;\n  // float16 to float32 helpers\n  mantissaTable: Uint32Array;\n  exponentTable: Uint32Array;\n  offsetTable: Uint32Array;\n};\n\n/**  */\nlet float16Tables: Float16Tables | null = null;\n\n/** Storage that can be viewed both as float and integer */\nconst buffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(buffer);\nconst uint32View = new Uint32Array(buffer);\n\n/**\n * float32 to float16\n * @param val\n * @returns\n */\nexport function toHalfFloat(val: number): number {\n  float16Tables ||= generateFloat16Tables();\n\n  // if ( Math.abs( val ) > 65504 ) console.warn( 'toHalfFloat(): Value out of range.' );\n\n  val = clamp(val, -65504, 65504);\n\n  floatView[0] = val;\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return float16Tables.baseTable[e] + ((f & 0x007fffff) >> float16Tables.shiftTable[e]);\n}\n\n/**\n * float16 to float32\n * @param val\n * @returns\n */\nexport function fromHalfFloat(val: number): number {\n  float16Tables ||= generateFloat16Tables();\n\n  const m = val >> 10;\n  uint32View[0] =\n    float16Tables.mantissaTable[float16Tables.offsetTable[m] + (val & 0x3ff)] +\n    float16Tables.exponentTable[m];\n  return floatView[0];\n}\n\nfunction generateFloat16Tables(): Float16Tables {\n  // float32 to float16 helpers\n\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> (-e - 14);\n      baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = (e + 15) << 10;\n      baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n\n  // float16 to float32 helpers\n\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n\n    m &= ~0x00800000; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n\n    mantissaTable[i] = m | e;\n  }\n\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n\n  return {baseTable, shiftTable, mantissaTable, exponentTable, offsetTable};\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport const lightingUniformsGLSL = /* glsl */ `\\\nprecision highp int;\n\n// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\nstruct AmbientLight {\n  vec3 color;\n};\n\nstruct PointLight {\n  vec3 color;\n  vec3 position;\n  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform lightingUniforms {\n  int enabled;\n  int lightType;\n\n  int directionalLightCount;\n  int pointLightCount;\n\n  vec3 ambientColor;\n\n  vec3 lightColor0;\n  vec3 lightPosition0;\n  vec3 lightDirection0;\n  vec3 lightAttenuation0;\n\n  vec3 lightColor1;\n  vec3 lightPosition1;\n  vec3 lightDirection1;\n  vec3 lightAttenuation1;\n\n  vec3 lightColor2;\n  vec3 lightPosition2;\n  vec3 lightDirection2;\n  vec3 lightAttenuation2;\n} lighting;\n\nPointLight lighting_getPointLight(int index) {\n  switch (index) {\n    case 0:\n      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);\n    case 1:\n      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);\n    case 2:\n    default:  \n      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);\n  }\n}\n\nDirectionalLight lighting_getDirectionalLight(int index) {\n  switch (index) {\n    case 0:\n      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);\n    case 1:\n      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);\n    case 2:\n    default:   \n      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);\n  }\n} \n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n// #endif\n`;\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport const lightingUniformsWGSL = /* wgsl */ `\\\n// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\nstruct AmbientLight {\n  color: vec3<f32>,\n};\n\nstruct PointLight {\n  color: vec3<f32>,\n  position: vec3<f32>,\n  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential\n};\n\nstruct DirectionalLight {\n  color: vec3<f32>,\n  direction: vec3<f32>,\n};\n\nstruct lightingUniforms {\n  enabled: i32,\n  pointLightCount: i32,\n  directionalLightCount: i32,\n\n  ambientColor: vec3<f32>,\n\n  // TODO - support multiple lights by uncommenting arrays below\n  lightType: i32,\n  lightColor: vec3<f32>,\n  lightDirection: vec3<f32>,\n  lightPosition: vec3<f32>,\n  lightAttenuation: vec3<f32>,\n\n  // AmbientLight ambientLight;\n  // PointLight pointLight[MAX_LIGHTS];\n  // DirectionalLight directionalLight[MAX_LIGHTS];\n};\n\n// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)\n@binding(1) @group(0) var<uniform> lighting : lightingUniforms;\n\nfn lighting_getPointLight(index: i32) -> PointLight {\n  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);\n}\n\nfn lighting_getDirectionalLight(index: i32) -> DirectionalLight {\n  return DirectionalLight(lighting.lightColor, lighting.lightDirection);\n} \n\nfn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n`;\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@luma.gl/core';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lightingUniformsGLSL} from './lighting-uniforms-glsl';\nimport {lightingUniformsWGSL} from './lighting-uniforms-wgsl';\nimport type {NumberArray3} from '@math.gl/core';\n\n/** Max number of supported lights (in addition to ambient light */\nconst MAX_LIGHTS = 3;\n\n/** Whether to divide */\nconst COLOR_FACTOR = 255.0;\n\n/** Shader type field for lights */\n// eslint-disable-next-line no-shadow\nexport enum LIGHT_TYPE {\n  POINT = 0,\n  DIRECTIONAL = 1\n}\n\n/** Lighting helper types */\n\nexport type Light = AmbientLight | PointLight | DirectionalLight;\n\nexport type AmbientLight = {\n  type: 'ambient';\n  color?: Readonly<NumberArray3>;\n  intensity?: number;\n};\n\nexport type PointLight = {\n  type: 'point';\n  position: Readonly<NumberArray3>;\n  color?: Readonly<NumberArray3>;\n  intensity?: number;\n  attenuation?: Readonly<NumberArray3>;\n};\n\nexport type DirectionalLight = {\n  type: 'directional';\n  direction: Readonly<NumberArray3>;\n  color?: Readonly<NumberArray3>;\n  intensity?: number;\n};\n\nexport type LightingProps = {\n  enabled?: boolean;\n  lights?: Light[];\n  /** @deprecated */\n  ambientLight?: AmbientLight;\n  /** @deprecated */\n  pointLights?: PointLight[];\n  /** @deprecated */\n  directionalLights?: DirectionalLight[];\n};\n\nexport type LightingUniforms = {\n  enabled: number;\n  ambientLightColor: Readonly<NumberArray3>;\n  directionalLightCount: number;\n  pointLightCount: number;\n  lightType: number; // [];\n  lightColor0: Readonly<NumberArray3>;\n  lightPosition0: Readonly<NumberArray3>;\n  lightDirection0: Readonly<NumberArray3>;\n  lightAttenuation0: Readonly<NumberArray3>;\n  lightColor1: Readonly<NumberArray3>;\n  lightPosition1: Readonly<NumberArray3>;\n  lightDirection1: Readonly<NumberArray3>;\n  lightAttenuation1: Readonly<NumberArray3>;\n  lightColor2: Readonly<NumberArray3>;\n  lightPosition2: Readonly<NumberArray3>;\n  lightDirection2: Readonly<NumberArray3>;\n  lightAttenuation2: Readonly<NumberArray3>;\n};\n\n/** UBO ready lighting module */\nexport const lighting = {\n  props: {} as LightingProps,\n  uniforms: {} as LightingUniforms,\n\n  name: 'lighting',\n\n  defines: {\n    MAX_LIGHTS\n  },\n\n  uniformTypes: {\n    enabled: 'i32',\n    lightType: 'i32',\n\n    directionalLightCount: 'i32',\n    pointLightCount: 'i32',\n\n    ambientLightColor: 'vec3<f32>',\n\n    // TODO define as arrays once we have appropriate uniformTypes\n    lightColor0: 'vec3<f32>',\n    lightPosition0: 'vec3<f32>',\n    // TODO - could combine direction and attenuation\n    lightDirection0: 'vec3<f32>',\n    lightAttenuation0: 'vec3<f32>',\n\n    lightColor1: 'vec3<f32>',\n    lightPosition1: 'vec3<f32>',\n    lightDirection1: 'vec3<f32>',\n    lightAttenuation1: 'vec3<f32>',\n    lightColor2: 'vec3<f32>',\n    lightPosition2: 'vec3<f32>',\n    lightDirection2: 'vec3<f32>',\n    lightAttenuation2: 'vec3<f32>'\n  },\n\n  defaultUniforms: {\n    enabled: 1,\n    lightType: LIGHT_TYPE.POINT,\n\n    directionalLightCount: 0,\n    pointLightCount: 0,\n\n    ambientLightColor: [0.1, 0.1, 0.1],\n    lightColor0: [1, 1, 1],\n    lightPosition0: [1, 1, 2],\n    // TODO - could combine direction and attenuation\n    lightDirection0: [1, 1, 1],\n    lightAttenuation0: [1, 0, 0],\n\n    lightColor1: [1, 1, 1],\n    lightPosition1: [1, 1, 2],\n    lightDirection1: [1, 1, 1],\n    lightAttenuation1: [1, 0, 0],\n    lightColor2: [1, 1, 1],\n    lightPosition2: [1, 1, 2],\n    lightDirection2: [1, 1, 1],\n    lightAttenuation2: [1, 0, 0]\n  },\n  source: lightingUniformsWGSL,\n  vs: lightingUniformsGLSL,\n  fs: lightingUniformsGLSL,\n\n  getUniforms\n} as const satisfies ShaderModule<LightingProps, LightingUniforms, {}>;\n\nfunction getUniforms(\n  props?: LightingProps,\n  prevUniforms: Partial<LightingUniforms> = {}\n): LightingUniforms {\n  // Copy props so we can modify\n  props = props ? {...props} : props;\n\n  // TODO legacy\n  if (!props) {\n    return {...lighting.defaultUniforms};\n  }\n  // Support for array of lights. Type of light is detected by type field\n  if (props.lights) {\n    props = {...props, ...extractLightTypes(props.lights), lights: undefined};\n  }\n\n  // Specify lights separately\n  const {ambientLight, pointLights, directionalLights} = props || {};\n  const hasLights =\n    ambientLight ||\n    (pointLights && pointLights.length > 0) ||\n    (directionalLights && directionalLights.length > 0);\n\n  // TODO - this may not be the correct decision\n  if (!hasLights) {\n    return {...lighting.defaultUniforms, enabled: 0};\n  }\n\n  const uniforms = {\n    ...lighting.defaultUniforms,\n    ...prevUniforms,\n    ...getLightSourceUniforms({ambientLight, pointLights, directionalLights})\n  };\n\n  if (props.enabled !== undefined) {\n    uniforms.enabled = props.enabled ? 1 : 0;\n  }\n\n  return uniforms;\n}\n\nfunction getLightSourceUniforms({\n  ambientLight,\n  pointLights = [],\n  directionalLights = []\n}: LightingProps): Partial<LightingUniforms> {\n  const lightSourceUniforms: Partial<LightingUniforms> = {};\n\n  lightSourceUniforms.ambientLightColor = convertColor(ambientLight);\n\n  let currentLight: 0 | 1 | 2 = 0;\n\n  for (const pointLight of pointLights) {\n    lightSourceUniforms.lightType = LIGHT_TYPE.POINT;\n\n    const i = currentLight as 0 | 1 | 2;\n    lightSourceUniforms[`lightColor${i}`] = convertColor(pointLight);\n    lightSourceUniforms[`lightPosition${i}`] = pointLight.position;\n    lightSourceUniforms[`lightAttenuation${i}`] = pointLight.attenuation || [1, 0, 0];\n    currentLight++;\n  }\n\n  for (const directionalLight of directionalLights) {\n    lightSourceUniforms.lightType = LIGHT_TYPE.DIRECTIONAL;\n\n    const i = currentLight as 0 | 1 | 2;\n    lightSourceUniforms[`lightColor${i}`] = convertColor(directionalLight);\n    lightSourceUniforms[`lightDirection${i}`] = directionalLight.direction;\n    currentLight++;\n  }\n\n  if (currentLight > MAX_LIGHTS) {\n    log.warn('MAX_LIGHTS exceeded')();\n  }\n\n  lightSourceUniforms.directionalLightCount = directionalLights.length;\n  lightSourceUniforms.pointLightCount = pointLights.length;\n\n  return lightSourceUniforms;\n}\n\nfunction extractLightTypes(lights: Light[]): LightingProps {\n  const lightSources: LightingProps = {pointLights: [], directionalLights: []};\n  for (const light of lights || []) {\n    switch (light.type) {\n      case 'ambient':\n        // Note: Only uses last ambient light\n        // TODO - add ambient light sources on CPU?\n        lightSources.ambientLight = light;\n        break;\n      case 'directional':\n        lightSources.directionalLights?.push(light);\n        break;\n      case 'point':\n        lightSources.pointLights?.push(light);\n        break;\n      default:\n      // eslint-disable-next-line\n      // console.warn(light.type);\n    }\n  }\n  return lightSources;\n}\n\n/** Take color 0-255 and intensity as input and output 0.0-1.0 range */\nfunction convertColor(\n  colorDef: {color?: Readonly<NumberArray3>; intensity?: number} = {}\n): NumberArray3 {\n  const {color = [0, 0, 0], intensity = 1.0} = colorDef;\n  return color.map(component => (component * intensity) / COLOR_FACTOR) as NumberArray3;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport const PHONG_VS = /* glsl */ `\\\nuniform phongMaterialUniforms {\n  uniform float ambient;\n  uniform float diffuse;\n  uniform float shininess;\n  uniform vec3  specularColor;\n} material;\n`;\n\nexport const PHONG_FS = /* glsl */ `\\\nuniform phongMaterialUniforms {\n  uniform float ambient;\n  uniform float diffuse;\n  uniform float shininess;\n  uniform vec3  specularColor;\n} material;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n  vec3 halfway_direction = normalize(light_direction + view_direction);\n  float lambertian = dot(light_direction, normal_worldspace);\n  float specular = 0.0;\n  if (lambertian > 0.0) {\n    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n    specular = pow(specular_angle, material.shininess);\n  }\n  lambertian = max(lambertian, 0.0);\n  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting.enabled == 0) {\n    return lightColor;\n  }\n\n  vec3 view_direction = normalize(cameraPosition - position_worldspace);\n  lightColor = material.ambient * surfaceColor * lighting.ambientColor;\n\n  for (int i = 0; i < lighting.pointLightCount; i++) {\n    PointLight pointLight = lighting_getPointLight(i);\n    vec3 light_position_worldspace = pointLight.position;\n    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);\n  }\n\n  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);\n  for (int i = lighting.pointLightCount; i < totalLights; i++) {\n    DirectionalLight directionalLight = lighting_getDirectionalLight(i);\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  \n  return lightColor;\n}\n`;\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport const PHONG_WGSL = /* wgsl */ `\\\nstruct phongMaterialUniforms {\n  ambient: f32,\n  diffuse: f32,\n  shininess: f32,\n  specularColor: vec3<f32>,\n};\n\n@binding(2) @group(0) var<uniform> phongMaterial : phongMaterialUniforms;\n\nfn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {\n  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);\n  var lambertian: f32 = dot(light_direction, normal_worldspace);\n  var specular: f32 = 0.0;\n  if (lambertian > 0.0) {\n    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n    specular = pow(specular_angle, phongMaterial.shininess);\n  }\n  lambertian = max(lambertian, 0.0);\n  return (lambertian * phongMaterial.diffuse * surfaceColor + specular * phongMaterial.specularColor) * color;\n}\n\nfn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {\n  var lightColor: vec3<f32> = surfaceColor;\n\n  if (lighting.enabled == 0) {\n    return lightColor;\n  }\n\n  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);\n  lightColor = phongMaterial.ambient * surfaceColor * lighting.ambientColor;\n\n  if (lighting.lightType == 0) {\n    let pointLight: PointLight  = lighting_getPointLight(0);\n    let light_position_worldspace: vec3<f32> = pointLight.position;\n    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n  } else if (lighting.lightType == 1) {\n    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  \n  return lightColor;\n  /*\n  for (int i = 0; i < MAX_LIGHTS; i++) {\n    if (i >= lighting.pointLightCount) {\n      break;\n    }\n    PointLight pointLight = lighting.pointLight[i];\n    vec3 light_position_worldspace = pointLight.position;\n    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n  }\n\n  for (int i = 0; i < MAX_LIGHTS; i++) {\n    if (i >= lighting.directionalLightCount) {\n      break;\n    }\n    DirectionalLight directionalLight = lighting.directionalLight[i];\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  */\n}\n\nfn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{\n  var lightColor = vec3<f32>(0, 0, 0);\n  let surfaceColor = vec3<f32>(0, 0, 0);\n\n  if (lighting.enabled == 0) {\n    let view_direction = normalize(cameraPosition - position_worldspace);\n\n    switch (lighting.lightType) {\n      case 0, default: {\n        let pointLight: PointLight = lighting_getPointLight(0);\n        let light_position_worldspace: vec3<f32> = pointLight.position;\n        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);\n        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n      }\n      case 1: {\n        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);\n        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n      }\n    }\n  }\n  return lightColor;\n}\n`;\n\n// TODO - handle multiple lights\n/**\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting.pointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_getPointLight(i);\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting.directionalLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_getDirectionalLight(i);\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n    /**\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting.pointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_getPointLight(i);\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting.directionalLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_getDirectionalLight(i);\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  */\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumberArray3} from '@math.gl/types';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting';\nimport {PHONG_VS, PHONG_FS} from '../phong-material/phong-shaders-glsl';\nimport {PHONG_WGSL} from '../phong-material/phong-shaders-wgsl';\n\nexport type GouraudMaterialProps = {\n  ambient?: number;\n  diffuse?: number;\n  /** Specularity exponent */\n  shininess?: number;\n  specularColor?: [number, number, number];\n};\n\n/** In Gouraud shading, color is calculated for each triangle vertex normal, and then color is interpolated colors across the triangle */\nexport const gouraudMaterial: ShaderModule<GouraudMaterialProps> = {\n  props: {} as GouraudMaterialProps,\n\n  name: 'gouraudMaterial',\n  // Note these are switched between phong and gouraud\n  vs: PHONG_FS.replace('phongMaterial', 'gouraudMaterial'),\n  fs: PHONG_VS.replace('phongMaterial', 'gouraudMaterial'),\n  source: PHONG_WGSL.replaceAll('phongMaterial', 'gouraudMaterial'),\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  dependencies: [lighting],\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n\n  getUniforms(props: GouraudMaterialProps) {\n    const uniforms = {...props};\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255) as NumberArray3;\n    }\n    return {...gouraudMaterial.defaultUniforms, ...uniforms};\n  }\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumberArray3} from '@math.gl/types';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting';\nimport {PHONG_WGSL} from './phong-shaders-wgsl';\nimport {PHONG_VS, PHONG_FS} from './phong-shaders-glsl';\n\nexport type PhongMaterialProps = {\n  ambient?: number;\n  diffuse?: number;\n  /** Specularity exponent */\n  shininess?: number;\n  specularColor?: NumberArray3;\n};\n\n/** In Phong shading, the normal vector is linearly interpolated across the surface of the polygon from the polygon's vertex normals. */\nexport const phongMaterial: ShaderModule<PhongMaterialProps> = {\n  name: 'phongMaterial',\n  dependencies: [lighting],\n  // Note these are switched between phong and gouraud\n  source: PHONG_WGSL,\n  vs: PHONG_VS,\n  fs: PHONG_FS,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n  getUniforms(props?: PhongMaterialProps) {\n    const uniforms = {...props};\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255) as NumberArray3;\n    }\n    return {...phongMaterial.defaultUniforms, ...uniforms};\n  }\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {ShaderModule} from '../../lib/shader-module/shader-module';\nimport type {NumberArray3, NumberArray16} from '@math.gl/core';\n\ntype ProjectionProps = {\n  modelMatrix?: Readonly<Matrix4 | NumberArray16>;\n  viewMatrix?: Readonly<Matrix4 | NumberArray16>;\n  projectionMatrix?: Readonly<Matrix4 | NumberArray16>;\n  cameraPositionWorld?: Readonly<Vector3 | NumberArray3>;\n};\n\nconst IDENTITY_MATRIX: NumberArray16 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS: ProjectionProps = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts: ProjectionProps = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms: Record<string, any> = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined && opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = /* glsl */ `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\n/**\n * Projects coordinates\n */\nexport const project = {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n} as const satisfies ShaderModule<ProjectionProps, ProjectionProps>;\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport type {NumericArray} from '../../../types';\nimport {project} from '../../project/project';\n\n/* eslint-disable camelcase */\n\nexport type DirlightOptions = {\n  lightDirection?: NumericArray;\n};\n\nconst DEFAULT_MODULE_OPTIONS: Required<DirlightOptions> = {\n  lightDirection: new Float32Array([1, 1, 2])\n};\n\nfunction getUniforms(opts: DirlightOptions = DEFAULT_MODULE_OPTIONS): Record<string, any> {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    // @ts-expect-error TODO add types\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\nconst fs = /* glsl */ `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\n/**\n * Cheap lighting - single directional light, single dot product, one uniform\n */\nexport const dirlight: ShaderModule = {\n  name: 'dirlight',\n  // vs // TODO - reuse normal from geometry module\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform pointCloudUniforms {\n  float radiusPixels;\n  highp int sizeUnits;\n} pointCloud;\n`;\n\nexport type PointCloudProps = {\n  radiusPixels: number;\n  sizeUnits: number;\n};\n\nexport const pointCloudUniforms = {\n  name: 'pointCloud',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    radiusPixels: 'f32',\n    sizeUnits: 'i32'\n  }\n} as const satisfies ShaderModule<PointCloudProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME point-cloud-layer-vertex-shader\n\nin vec3 positions;\nin vec3 instanceNormals;\nin vec4 instanceColors;\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec3 instancePickingColors;\n\nout vec4 vColor;\nout vec2 unitPosition;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.normal = project_normal(instanceNormals);\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  // Find the center of the point and add the current vertex\n  vec3 offset = vec3(positions.xy * project_size_to_pixel(pointCloud.radiusPixels, pointCloud.sizeUnits), 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  // Apply lighting\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);\n\n  // Apply opacity to instance color, or return instance picking color\n  vColor = vec4(lightColor, instanceColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME point-cloud-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\nin vec2 unitPosition;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = unitPosition.xy;\n\n  float distToCenter = length(unitPosition);\n\n  if (distToCenter > 1.0) {\n    discard;\n  }\n\n  fragColor = vColor;\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\nimport {gouraudMaterial} from '@luma.gl/shadertools';\n\nimport {pointCloudUniforms, PointCloudProps} from './point-cloud-layer-uniforms';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\nconst DEFAULT_NORMAL: [number, number, number] = [0, 0, 1];\n\nconst defaultProps: DefaultProps<PointCloudLayerProps> = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    const {size, value} = attributes.COLOR_0;\n    attributes.instanceColors = {size, type: 'unorm8', value};\n  }\n}\n\n/** All properties supported by PointCloudLayer. */\nexport type PointCloudLayerProps<DataT = unknown> = _PointCloudLayerProps<DataT> & LayerProps;\n\n/** Properties added by PointCloudLayer. */\ntype _PointCloudLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the point size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n\n  /**\n   * Global radius of all points, in units specified by `sizeUnits`\n   * @default 10\n   */\n  pointSize?: number;\n\n  /**\n   * @deprecated Use `pointSize` instead\n   */\n  radiusPixels?: number;\n\n  /**\n   * Material settings for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The normal of each object, in `[nx, ny, nz]`.\n   * @default [0, 0, 1]\n   */\n  getNormal?: Accessor<DataT, [number, number, number]>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\n/** Render a point cloud with 3D positions, normals and colors. */\nexport default class PointCloudLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PointCloudLayerProps<DataT>>\n> {\n  static layerName = 'PointCloudLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudMaterial, picking, pointCloudUniforms]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    const {changeFlags, props} = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n    const model = this.state.model!;\n    const pointCloudProps: PointCloudProps = {\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    };\n    model.shaderInputs.setProps({pointCloud: pointCloudProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    // a triangle that minimally cover the unit circle\n    const positions: number[] = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-list',\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst glslUniformBlock = `\\\nuniform scatterplotUniforms {\n  float radiusScale;\n  float radiusMinPixels;\n  float radiusMaxPixels;\n  float lineWidthScale;\n  float lineWidthMinPixels;\n  float lineWidthMaxPixels;\n  float stroked;\n  float filled;\n  bool antialiasing;\n  bool billboard;\n  highp int radiusUnits;\n  highp int lineWidthUnits;\n} scatterplot;\n`;\n\nexport type ScatterplotProps = {\n  radiusScale: number;\n  radiusMinPixels: number;\n  radiusMaxPixels: number;\n  lineWidthScale: number;\n  lineWidthMinPixels: number;\n  lineWidthMaxPixels: number;\n  stroked: boolean;\n  filled: boolean;\n  antialiasing: boolean;\n  billboard: boolean;\n  radiusUnits: number;\n  lineWidthUnits: number;\n};\n\nexport const scatterplotUniforms = {\n  name: 'scatterplot',\n  vs: glslUniformBlock,\n  fs: glslUniformBlock,\n  source: '',\n  uniformTypes: {\n    radiusScale: 'f32',\n    radiusMinPixels: 'f32',\n    radiusMaxPixels: 'f32',\n    lineWidthScale: 'f32',\n    lineWidthMinPixels: 'f32',\n    lineWidthMaxPixels: 'f32',\n    stroked: 'f32',\n    filled: 'f32',\n    antialiasing: 'f32',\n    billboard: 'f32',\n    radiusUnits: 'i32',\n    lineWidthUnits: 'i32'\n  }\n} as const satisfies ShaderModule<ScatterplotProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nin vec3 positions;\n\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin float instanceRadius;\nin float instanceLineWidths;\nin vec4 instanceFillColors;\nin vec4 instanceLineColors;\nin vec3 instancePickingColors;\n\nout vec4 vFillColor;\nout vec4 vLineColor;\nout vec2 unitPosition;\nout float innerUnitRadius;\nout float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(scatterplot.radiusScale * instanceRadius, scatterplot.radiusUnits),\n    scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(scatterplot.lineWidthScale * instanceLineWidths, scatterplot.lineWidthUnits),\n    scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = scatterplot.antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (scatterplot.billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vFillColor;\nin vec4 vLineColor;\nin vec2 unitPosition;\nin float innerUnitRadius;\nin float outerRadiusPixels;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = scatterplot.antialiasing ?\n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (scatterplot.stroked > 0.5) {\n    float isLine = scatterplot.antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (scatterplot.filled > 0.5) {\n      fragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      fragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (scatterplot.filled < 0.5) {\n    discard;\n  } else {\n    fragColor = vFillColor;\n  }\n\n  fragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default /* wgsl */ `\\\n// TODO(ibgreen): Hack for Layer uniforms (move to new \"color\" module?)\n\nstruct LayerUniforms {\n  opacity: f32,\n};\n\nvar<private> layer: LayerUniforms = LayerUniforms(1.0);\n// @group(0) @binding(1) var<uniform> layer: LayerUniforms;\n\n// Main shaders\n\nstruct ScatterplotUniforms {\n  radiusScale: f32,\n  radiusMinPixels: f32,\n  radiusMaxPixels: f32,\n  lineWidthScale: f32,\n  lineWidthMinPixels: f32,\n  lineWidthMaxPixels: f32,\n  stroked: f32,\n  filled: i32,\n  antialiasing: i32,\n  billboard: i32,\n  radiusUnits: i32,\n  lineWidthUnits: i32,\n};\n\nstruct ConstantAttributeUniforms {\n instancePositions: vec3<f32>,\n instancePositions64Low: vec3<f32>,\n instanceRadius: f32,\n instanceLineWidths: f32,\n instanceFillColors: vec4<f32>,\n instanceLineColors: vec4<f32>,\n instancePickingColors: vec3<f32>,\n\n instancePositionsConstant: i32,\n instancePositions64LowConstant: i32,\n instanceRadiusConstant: i32,\n instanceLineWidthsConstant: i32,\n instanceFillColorsConstant: i32,\n instanceLineColorsConstant: i32,\n instancePickingColorsConstant: i32\n};\n\n@group(0) @binding(2) var<uniform> scatterplot: ScatterplotUniforms;\n\nstruct ConstantAttributes {\n  instancePositions: vec3<f32>,\n  instancePositions64Low: vec3<f32>,\n  instanceRadius: f32,\n  instanceLineWidths: f32,\n  instanceFillColors: vec4<f32>,\n  instanceLineColors: vec4<f32>,\n  instancePickingColors: vec3<f32>\n};\n\nconst constants = ConstantAttributes(\n  vec3<f32>(0.0),\n  vec3<f32>(0.0),\n  0.0,\n  0.0,\n  vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  vec3<f32>(0.0)\n);\n\nstruct Attributes {\n  @builtin(instance_index) instanceIndex : u32,\n  @builtin(vertex_index) vertexIndex : u32,\n  @location(0) positions: vec3<f32>,\n  @location(1) instancePositions: vec3<f32>,\n  @location(2) instancePositions64Low: vec3<f32>,\n  @location(3) instanceRadius: f32,\n  @location(4) instanceLineWidths: f32,\n  @location(5) instanceFillColors: vec4<f32>,\n  @location(6) instanceLineColors: vec4<f32>,\n  @location(7) instancePickingColors: vec3<f32>\n};\n\nstruct Varyings {\n  @builtin(position) position: vec4<f32>,\n  @location(0) vFillColor: vec4<f32>,\n  @location(1) vLineColor: vec4<f32>,\n  @location(2) unitPosition: vec2<f32>,\n  @location(3) innerUnitRadius: f32,\n  @location(4) outerRadiusPixels: f32,\n};\n\n@vertex\nfn vertexMain(attributes: Attributes) -> Varyings {\n  var varyings: Varyings;\n\n  // Draw an inline geometry constant array clip space triangle to verify that rendering works.\n  // var positions = array<vec2<f32>, 3>(vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));\n  // if (attributes.instanceIndex == 0) {\n  //   varyings.position = vec4<f32>(positions[attributes.vertexIndex], 0.0, 1.0);\n  //   return varyings;\n  // }\n\n  // var geometry: Geometry;\n  // geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  varyings.outerRadiusPixels = clamp(\n    project_unit_size_to_pixel(scatterplot.radiusScale * attributes.instanceRadius, scatterplot.radiusUnits),\n    scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels\n  );\n\n  // Multiply out line width and clamp to limits\n  let lineWidthPixels = clamp(\n    project_unit_size_to_pixel(scatterplot.lineWidthScale * attributes.instanceLineWidths, scatterplot.lineWidthUnits),\n    scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  varyings.outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;\n  // Expand geometry to accommodate edge smoothing\n  let edgePadding = select(\n    (varyings.outerRadiusPixels + SMOOTH_EDGE_RADIUS) / varyings.outerRadiusPixels,\n    1.0,\n    scatterplot.antialiasing != 0\n  );\n\n  // position on the containing square in [-1, 1] space\n  varyings.unitPosition = edgePadding * attributes.positions.xy;\n  geometry.uv = varyings.unitPosition;\n  geometry.pickingColor = attributes.instancePickingColors;\n\n  varyings.innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / varyings.outerRadiusPixels;\n\n  if (scatterplot.billboard != 0) {\n    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, vec3<f32>(0.0)); // TODO , geometry.position);\n    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);\n    let offset = attributes.positions; // * edgePadding * varyings.outerRadiusPixels;\n    // DECKGL_FILTER_SIZE(offset, geometry);\n    let clipPixels = project_pixel_size_to_clipspace(offset.xy);\n    varyings.position.x = clipPixels.x;\n    varyings.position.y = clipPixels.y;\n  } else {\n    let offset = edgePadding * attributes.positions * project_pixel_size_float(varyings.outerRadiusPixels);\n    // DECKGL_FILTER_SIZE(offset, geometry);\n    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, offset); // TODO , geometry.position);\n    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  varyings.vFillColor = vec4<f32>(attributes.instanceFillColors.rgb, attributes.instanceFillColors.a * layer.opacity);\n  // DECKGL_FILTER_COLOR(varyings.vFillColor, geometry);\n  varyings.vLineColor = vec4<f32>(attributes.instanceLineColors.rgb, attributes.instanceLineColors.a * layer.opacity);\n  // DECKGL_FILTER_COLOR(varyings.vLineColor, geometry);\n\n  return varyings;\n}\n\n@fragment\nfn fragmentMain(varyings: Varyings) -> @location(0) vec4<f32> {\n  // var geometry: Geometry;\n  // geometry.uv = unitPosition;\n\n  let distToCenter = length(varyings.unitPosition) * varyings.outerRadiusPixels;\n  let inCircle = select(\n    smoothedge(distToCenter, varyings.outerRadiusPixels),\n    step(distToCenter, varyings.outerRadiusPixels),\n    scatterplot.antialiasing != 0\n  );\n\n  if (inCircle == 0.0) {\n    // discard;\n  }\n\n  var fragColor: vec4<f32>;\n\n  if (scatterplot.stroked != 0) {\n    let isLine = select(\n      smoothedge(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),\n      step(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),\n      scatterplot.antialiasing != 0\n    );\n\n    if (scatterplot.filled != 0) {\n      fragColor = mix(varyings.vFillColor, varyings.vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        // discard;\n      }\n      fragColor = vec4<f32>(varyings.vLineColor.rgb, varyings.vLineColor.a * isLine);\n    }\n  } else if (scatterplot.filled == 0) {\n    // discard;\n  } else {\n    fragColor = varyings.vFillColor;\n  }\n\n  fragColor.a *= inCircle;\n  // DECKGL_FILTER_COLOR(fragColor, geometry);\n\n  return fragColor;\n  // return vec4<f32>(0, 0, 1, 1);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\n\nimport {scatterplotUniforms, ScatterplotProps} from './scatterplot-layer-uniforms';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nimport source from './scatterplot-layer.wgsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = unknown> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  state!: {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      source,\n      modules: [project32, picking, scatterplotUniforms]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n    const scatterplotProps: ScatterplotProps = {\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      radiusUnits: UNIT[radiusUnits],\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      lineWidthUnits: UNIT[lineWidthUnits],\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    };\n    const model = this.state.model!;\n    model.shaderInputs.setProps({scatterplot: scatterplotProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel() {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT and ISC\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n} as const;\n\n/** Polygon representation where each point is represented as a separate array of positions. */\ntype PointsArray = NumericArray[];\n\n/** Segment visitor callback type for polygons defined with flat arrays, */\ntype SegmentVisitorFlat = (\n  p1x: number,\n  p1y: number,\n  p2x: number,\n  p2y: number,\n  i1: number,\n  i2: number\n) => void;\n\n/** Segment visitor callback type for polygons defined with array of points. */\nexport type SegmentVisitorPoints = (\n  p1: NumericArray,\n  p2: NumericArray,\n  i1: number,\n  i2: number\n) => void;\n\nexport type Plane2D = 'xy' | 'yz' | 'xz';\n\n/** Parameters of a polygon. */\ntype PolygonParams = {\n  /**\n   * Start index of the polygon in the array of positions.\n   * @default `0`\n   */\n  start?: number;\n  /**\n   * End index of the polygon in the array of positions.\n   * @default number of positions\n   */\n  end?: number;\n  /**\n   * Size of a point, 2 (XZ) or 3 (XYZ). Affects only polygons stored in flat arrays.\n   * @default `2`\n   */\n  size?: number;\n  /**\n   * Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited.\n   */\n  isClosed?: boolean;\n  /**\n   * The 2D projection plane on which to calculate the area of a 3D polygon.\n   * @default `'xy'`\n   */\n  plane?: Plane2D;\n};\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points An array that represents points of the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirection(\n  points: NumericArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirection(\n  points: NumericArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\nexport const DimIndex: Record<string, number> = {\n  x: 0,\n  y: 1,\n  z: 2\n} as const;\n\n/**\n * Returns signed area of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n * https://en.wikipedia.org/wiki/Shoelace_formula\n */\nexport function getPolygonSignedArea(points: NumericArray, options: PolygonParams = {}): number {\n  const {start = 0, end = points.length, plane = 'xy'} = options;\n  const dim = options.size || 2;\n  let area = 0;\n  const i0 = DimIndex[plane[0]];\n  const i1 = DimIndex[plane[1]];\n\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i + i0] - points[j + i0]) * (points[i + i1] + points[j + i1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls the visitor callback for each segment in the polygon.\n * @param points An array that represents points of the polygon\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygon(\n  points: NumericArray,\n  visitor: SegmentVisitorFlat,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(\n  points: NumericArray,\n  options: {start?: number; end?: number; size?: number}\n): void {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points Array of points that represent the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirectionPoints(\n  points: PointsArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirectionPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n */\nexport function getPolygonSignedAreaPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length, plane = 'xy'} = options;\n  let area = 0;\n  const i0 = DimIndex[plane[0]];\n  const i1 = DimIndex[plane[1]];\n\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][i0] - points[j][i0]) * (points[i][i1] + points[j][i1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls visitor callback for each segment in the polygon.\n * @param points Array of points that represent the polygon.\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygonPoints(\n  points: PointsArray,\n  visitor: SegmentVisitorPoints,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, isClosed} = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport function push(target: number[], source: number[]): boolean {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target: number[], source: Readonly<NumericArray>): void {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(\n  positions: Readonly<NumericArray>,\n  index: number,\n  size: number,\n  offset: number,\n  out: number[] = []\n): number[] {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT and ISC\n// Copyright (c) vis.gl contributors\n\n/*\n  Adapted from https://github.com/mapbox/lineclip to work with flat arrays\n  and 3d positions\n\n  ISC License\n\n  Copyright (c) 2015, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n\n/* eslint-disable max-statements, max-depth, complexity */\n\nimport {push, copy, getPointAtIndex} from './utils';\nimport type {NumericArray} from '@math.gl/core';\n\nexport type BoundingBox = [number, number, number, number];\n\n/**\n * Cohen-Sutherland line clipping algorithm, adapted to efficiently\n * handle polylines rather than just segments\n */\nexport function clipPolyline(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length} = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  const result: number[][] = [];\n  let part: number[] = [];\n  let a: number[];\n  let b: number[];\n  let codeA: number = -1;\n  let codeB: number;\n  let lastCode: number;\n\n  for (let i = 1; i < numPoints; i++) {\n    a = getPointAtIndex(positions, i - 1, size, startIndex, a);\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    if (codeA < 0) {\n      codeA = bitCode(a, bbox);\n    }\n    codeB = lastCode = bitCode(b, bbox);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        push(part, a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          push(part, b);\n\n          if (i < numPoints - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === numPoints - 1) {\n          push(part, b);\n        }\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        intersect(a, b, codeA, bbox, a);\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        intersect(a, b, codeB, bbox, b);\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n\n  return result;\n}\n\n/**\n * Sutherland-Hodgeman polygon clipping algorithm\n * polygon must be closed (first vertex == last vertex)\n */\nexport function clipPolygon(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] {\n  const {size = 2, endIndex = positions.length} = options || {};\n  let {startIndex = 0} = options || {};\n  let numPoints = (endIndex - startIndex) / size;\n  let result: number[];\n  let p: number[];\n  let prev: number[];\n  let inside: boolean;\n  let prevInside: boolean;\n\n  // clip against each side of the clip rectangle\n  for (let edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = getPointAtIndex(positions, numPoints - 1, size, startIndex, prev);\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (let i = 0; i < numPoints; i++) {\n      p = getPointAtIndex(positions, i, size, startIndex, p);\n      inside = !(bitCode(p, bbox) & edge);\n\n      // if segment goes through the clip window, add an intersection\n      if (inside !== prevInside) push(result, intersect(prev, p, edge, bbox));\n\n      if (inside) push(result, p); // add a point if it's inside\n\n      copy(prev, p);\n      prevInside = inside;\n    }\n\n    // close loop\n    positions = result;\n    startIndex = 0;\n    numPoints = result.length / size;\n\n    if (!numPoints) break;\n  }\n\n  return result;\n}\n\n/** intersect a segment against one of the 4 lines that make up the bbox */\n\nexport function intersect(\n  a: number[],\n  b: number[],\n  edge: number,\n  bbox: BoundingBox,\n  out: number[] = []\n): number[] {\n  let t;\n  // Forces out[snapI] to be on the bbox edge\n  // Interpolation introduces precision issue which may cause lineclip to be\n  // stuck in an infinite loop\n  let snap: number;\n  if (edge & 8) {\n    // top\n    t = (bbox[3] - a[1]) / (b[1] - a[1]);\n    snap = 3;\n  } else if (edge & 4) {\n    // bottom\n    t = (bbox[1] - a[1]) / (b[1] - a[1]);\n    snap = 1;\n  } else if (edge & 2) {\n    // right\n    t = (bbox[2] - a[0]) / (b[0] - a[0]);\n    snap = 2;\n  } else if (edge & 1) {\n    // left\n    t = (bbox[0] - a[0]) / (b[0] - a[0]);\n    snap = 0;\n  } else {\n    return null;\n  }\n  for (let i = 0; i < a.length; i++) {\n    out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];\n  }\n  return out;\n}\n\n/**\n * bit code reflects the point position relative to the bbox:\n *         left  mid  right\n *    top  1001  1000  1010\n *    mid  0001  0000  0010\n * bottom  0101  0100  0110\n */\nexport function bitCode(p: number[], bbox: BoundingBox): number {\n  let code = 0;\n\n  if (p[0] < bbox[0]) code |= 1;\n  // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4;\n  // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\n/** Internal helper type during cutting, name TBD */\ntype PolygonCut = {\n  pos: Readonly<NumericArray>;\n  types: number[];\n  holes: Readonly<NumericArray>;\n};\n\n/** Internal helper type during cutting, name TBD */\ntype MutablePolygonCut = {\n  pos: number[];\n  types: number[];\n  holes: number[];\n};\n\n/**\n * Cuts a polygon by a pre-defined grid\n */\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: PolygonCut[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow: MutablePolygonCut = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh: MutablePolygonCut = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n", "// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry} from '@luma.gl/engine';\n\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      indices,\n      // @ts-expect-error\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform columnUniforms {\n  float radius;\n  float angle;\n  vec2 offset;\n  bool extruded;\n  bool stroked;\n  bool isStroke;\n  float coverage;\n  float elevationScale;\n  float edgeDistance;\n  float widthScale;\n  float widthMinPixels;\n  float widthMaxPixels;\n  highp int radiusUnits;\n  highp int widthUnits;\n} column;\n`;\n\nexport type ColumnProps = {\n  radius: number;\n  angle: number;\n  offset: [number, number];\n  extruded: boolean;\n  stroked: boolean;\n  isStroke: boolean;\n  coverage: number;\n  elevationScale: number;\n  edgeDistance: number;\n  widthScale: number;\n  widthMinPixels: number;\n  widthMaxPixels: number;\n  radiusUnits: number;\n  widthUnits: number;\n};\n\nexport const columnUniforms = {\n  name: 'column',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    radius: 'f32',\n    angle: 'f32',\n    offset: 'vec2<f32>',\n    extruded: 'f32',\n    stroked: 'f32',\n    isStroke: 'f32',\n    coverage: 'f32',\n    elevationScale: 'f32',\n    edgeDistance: 'f32',\n    widthScale: 'f32',\n    widthMinPixels: 'f32',\n    widthMaxPixels: 'f32',\n    radiusUnits: 'i32',\n    widthUnits: 'i32'\n  }\n} as const satisfies ShaderModule<ColumnProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `#version 300 es\n\n#define SHADER_NAME column-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec3 instancePositions;\nin float instanceElevations;\nin vec3 instancePositions64Low;\nin vec4 instanceFillColors;\nin vec4 instanceLineColors;\nin float instanceStrokeWidths;\n\nin vec3 instancePickingColors;\n\n// Result\nout vec4 vColor;\n#ifdef FLAT_SHADING\nout vec3 cameraPosition;\nout vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  vec4 color = column.isStroke ? instanceLineColors : instanceFillColors;\n  // rotate primitive position and normal\n  mat2 rotationMatrix = mat2(cos(column.angle), sin(column.angle), -sin(column.angle), cos(column.angle));\n\n  // calculate elevation, if 3d not enabled set to 0\n  // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1\n  float elevation = 0.0;\n  // calculate stroke offset\n  float strokeOffsetRatio = 1.0;\n\n  if (column.extruded) {\n    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * column.elevationScale;\n  } else if (column.stroked) {\n    float widthPixels = clamp(\n      project_size_to_pixel(instanceStrokeWidths * column.widthScale, column.widthUnits),\n      column.widthMinPixels, column.widthMaxPixels) / 2.0;\n    float halfOffset = project_pixel_size(widthPixels) / project_size(column.edgeDistance * column.coverage * column.radius);\n    if (column.isStroke) {\n      strokeOffsetRatio -= sign(positions.z) * halfOffset;\n    } else {\n      strokeOffsetRatio -= halfOffset;\n    }\n  }\n\n  // if alpha == 0.0 or z < 0.0, do not render element\n  float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);\n  float dotRadius = column.radius * column.coverage * shouldRender;\n\n  geometry.pickingColor = instancePickingColors;\n\n  // project center of column\n  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);\n  vec3 centroidPosition64Low = instancePositions64Low;\n  vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + column.offset) * dotRadius;\n  if (column.radiusUnits == UNIT_METERS) {\n    offset = project_size(offset);\n  }\n  vec3 pos = vec3(offset, 0.);\n  DECKGL_FILTER_SIZE(pos, geometry);\n\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\n  geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  // Light calculations\n  if (column.extruded && !column.isStroke) {\n#ifdef FLAT_SHADING\n    cameraPosition = project.cameraPosition;\n    position_commonspace = geometry.position;\n    vColor = vec4(color.rgb, color.a * layer.opacity);\n#else\n    vec3 lightColor = lighting_getLightColor(color.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);\n    vColor = vec4(lightColor, color.a * layer.opacity);\n#endif\n  } else {\n    vColor = vec4(color.rgb, color.a * layer.opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `#version 300 es\n#define SHADER_NAME column-layer-fragment-shader\n\nprecision highp float;\n\nout vec4 fragColor;\n\nin vec4 vColor;\n#ifdef FLAT_SHADING\nin vec3 cameraPosition;\nin vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  fragColor = vColor;\n  // Fails to compile on some Android devices if geometry is never assigned (#8411)\n  geometry.uv = vec2(0.);\n#ifdef FLAT_SHADING\n  if (column.extruded && !column.isStroke && !bool(picking.isActive)) {\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, cameraPosition, position_commonspace.xyz, normal);\n  }\n#endif\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport {gouraudMaterial, phongMaterial} from '@luma.gl/shadertools';\nimport {Model} from '@luma.gl/engine';\nimport ColumnGeometry from './column-geometry';\n\nimport {columnUniforms, ColumnProps} from './column-layer-uniforms';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  flatShading: false,\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = unknown> = _ColumnLayerProps<DataT> & LayerProps;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices?: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    fillModel?: Model;\n    wireframeModel?: Model;\n    models?: Model[];\n    fillVertexCount: number;\n    edgeDistance: number;\n  };\n\n  getShaders() {\n    const defines: Record<string, any> = {};\n\n    const {flatShading} = this.props;\n    if (flatShading) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      modules: [project32, flatShading ? phongMaterial : gouraudMaterial, picking, columnUniforms]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.destroy());\n      this.setState(this._getModels());\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    const instanceCount = this.getNumInstances();\n    this.state.fillModel!.setInstanceCount(instanceCount);\n    this.state.wireframeModel!.setInstanceCount(instanceCount);\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModels() {\n    const shaders = this.getShaders();\n    const bufferLayout = this.getAttributeManager()!.getBufferLayouts();\n\n    const fillModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-fill`,\n      bufferLayout,\n      isInstanced: true\n    });\n    const wireframeModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-wireframe`,\n      bufferLayout,\n      isInstanced: true\n    });\n\n    return {\n      fillModel,\n      wireframeModel,\n      models: [wireframeModel, fillModel]\n    };\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3\n    });\n\n    const fillModel = this.state.fillModel!;\n    const wireframeModel = this.state.wireframeModel!;\n    fillModel.setGeometry(geometry);\n    fillModel.setTopology('triangle-strip');\n    // Disable indices\n    fillModel.setIndexBuffer(null);\n\n    wireframeModel.setGeometry(geometry);\n    wireframeModel.setTopology('line-list');\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const fillModel = this.state.fillModel!;\n    const wireframeModel = this.state.wireframeModel!;\n    const {fillVertexCount, edgeDistance} = this.state;\n\n    const columnProps: Omit<ColumnProps, 'isStroke'> = {\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    };\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      wireframeModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      wireframeModel.draw(this.context.renderPass);\n    }\n\n    if (filled) {\n      // model.setProps({isIndexed: false});\n      fillModel.setVertexCount(fillVertexCount);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: false\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      // model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      fillModel.setVertexCount((fillVertexCount * 2) / 3);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {DefaultProps} from '@deck.gl/core';\nimport {UNIT} from '@deck.gl/core';\nimport {CubeGeometry} from '@luma.gl/engine';\nimport ColumnLayer, {ColumnLayerProps} from './column-layer';\nimport {ColumnProps} from './column-layer-uniforms';\n\nconst defaultProps: DefaultProps<GridCellLayerProps> = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', value: [1, 1]}\n};\n\n/** All properties supported by GridCellLayer. */\nexport type GridCellLayerProps<DataT = unknown> = _GridCellLayerProps & ColumnLayerProps<DataT>;\n\n/** Properties added by GridCellLayer. */\ntype _GridCellLayerProps = {\n  /**\n   * @default 1000\n   */\n  cellSize?: number;\n};\n\nexport default class GridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends ColumnLayer<\n  DataT,\n  ExtraPropsT & Required<_GridCellLayerProps>\n> {\n  static layerName = 'GridCellLayer';\n  static defaultProps = defaultProps;\n\n  protected _updateGeometry() {\n    const geometry = new CubeGeometry();\n    this.state.fillModel!.setGeometry(geometry);\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle, radiusUnits} = this.props;\n    const fillModel = this.state.fillModel!;\n    const columnProps: ColumnProps = {\n      radius: cellSize / 2,\n      radiusUnits: UNIT[radiusUnits],\n      angle,\n      offset,\n      extruded,\n      stroked: false,\n      coverage,\n      elevationScale,\n      edgeDistance: 1,\n      isStroke: false,\n      widthUnits: 0,\n      widthScale: 0,\n      widthMinPixels: 0,\n      widthMaxPixels: 0\n    };\n    fillModel.shaderInputs.setProps({column: columnProps});\n    fillModel.draw(this.context.renderPass);\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\nimport type {NumericArray} from '@math.gl/core';\nimport type {Position} from '@deck.gl/core';\n\nexport type NestedPathGeometry = Position[];\nexport type FlatPathGeometry = NumericArray;\nexport type PathGeometry = NestedPathGeometry | FlatPathGeometry;\nexport type NormalizedPathGeometry = FlatPathGeometry[] | FlatPathGeometry;\n\n/**\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n * Returns a flat array of path positions, or a list of flat arrays representing multiple paths\n */\nexport function normalizePath(\n  path: PathGeometry,\n  size: number,\n  gridResolution?: number,\n  wrapLongitude?: boolean\n): number[][] | NumericArray {\n  let flatPath: NumericArray;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  } else {\n    flatPath = path as NumericArray;\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform pathUniforms {\n  float widthScale;\n  float widthMinPixels;\n  float widthMaxPixels;\n  float jointType;\n  float capType;\n  float miterLimit;\n  bool billboard;\n  highp int widthUnits;\n} path;\n`;\n\nexport type PathProps = {\n  widthScale: number;\n  widthMinPixels: number;\n  widthMaxPixels: number;\n  jointType: number;\n  capType: number;\n  miterLimit: number;\n  billboard: boolean;\n  widthUnits: number;\n};\n\nexport const pathUniforms = {\n  name: 'path',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    widthScale: 'f32',\n    widthMinPixels: 'f32',\n    widthMaxPixels: 'f32',\n    jointType: 'f32',\n    capType: 'f32',\n    miterLimit: 'f32',\n    billboard: 'f32',\n    widthUnits: 'i32'\n  }\n} as const satisfies ShaderModule<PathProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME path-layer-vertex-shader\n\nin vec2 positions;\n\nin float instanceTypes;\nin vec3 instanceStartPositions;\nin vec3 instanceEndPositions;\nin vec3 instanceLeftPositions;\nin vec3 instanceRightPositions;\nin vec3 instanceLeftPositions64Low;\nin vec3 instanceStartPositions64Low;\nin vec3 instanceEndPositions64Low;\nin vec3 instanceRightPositions64Low;\nin float instanceStrokeWidths;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\n\nuniform float opacity;\n\nout vec4 vColor;\nout vec2 vCornerOffset;\nout float vMiterLength;\nout vec2 vPathPosition;\nout float vPathLength;\nout float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !path.billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * path.capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = path.capType;\n  } else {\n    vJointType = path.jointType;\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * path.widthScale, path.widthUnits),\n    path.widthMinPixels, path.widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (path.billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\nin vec2 vCornerOffset;\nin float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nin vec2 vPathPosition;\nin float vPathLength;\nin float vJointType;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (vJointType < 0.5 && vMiterLength > path.miterLimit + 1.0) {\n      discard;\n    }\n  }\n  fragColor = vColor;\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Geometry} from '@luma.gl/engine';\nimport {Model} from '@luma.gl/engine';\nimport PathTesselator from './path-tesselator';\n\nimport {pathUniforms, PathProps} from './path-layer-uniforms';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = unknown> = _PathLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: (object: any) => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, pathUniforms]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds(['vertexPositions']);\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      vertexPositions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 'uint8',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 4,\n        type: 'uint8',\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const model = this.state.model!;\n    const pathProps: PathProps = {\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    };\n    model.shaderInputs.setProps({path: pathProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-list',\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Calculate the area of a single plane of the polygon\n */\nfunction getPlaneArea(positions: NumericArray, xIndex: number, yIndex: number): number {\n  const numVerts = positions.length / 3;\n  let area = 0;\n  for (let i = 0; i < numVerts; i++) {\n    const j = (i + 1) % numVerts;\n    area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];\n    area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];\n  }\n  return Math.abs(area / 2);\n}\n\nfunction permutePositions(positions: NumericArray, xIndex: number, yIndex: number, zIndex: number) {\n  const numVerts = positions.length / 3;\n  for (let i = 0; i < numVerts; i++) {\n    const o = i * 3;\n\n    const x = positions[o + 0];\n    const y = positions[o + 1];\n    const z = positions[o + 2];\n\n    positions[o + xIndex] = x;\n    positions[o + yIndex] = y;\n    positions[o + zIndex] = z;\n  }\n}\n\n/**\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\n// eslint-disable-next-line complexity, max-statements\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[],\n  full3d?: boolean\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  const is3d = full3d && positionSize === 3;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n\n    // Clone the array\n    positions = positions.slice();\n\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      const xy = preproject(p);\n\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n\n  if (is3d) {\n    // calculate plane with largest area\n    const xyArea = getPlaneArea(positions, 0, 1);\n    const xzArea = getPlaneArea(positions, 0, 2);\n    const yzArea = getPlaneArea(positions, 1, 2);\n\n    if (!xyArea && !xzArea && !yzArea) {\n      return []; // no planes have area, nothing we can do\n    }\n\n    // permute positions to make the largest plane xy for earcut\n    if (xyArea > xzArea && xyArea > yzArea) {\n      // xy plane largest, nothing to do\n    } else if (xzArea > yzArea) {\n      // xz plane largest, permute to make xyz -> xzy\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 0, 2, 1);\n    } else {\n      // yz plane largest, permute to make xyz -> yzx\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 2, 0, 1);\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {Tesselator} from '@deck.gl/core';\nimport {cutPolygonByGrid, cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\nimport type {\n  PolygonGeometry,\n  NormalizedPolygonGeometry,\n  FlatComplexPolygonGeometry\n} from './polygon';\nimport type {TypedArray} from '@math.gl/core';\n\ntype GeometryUpdateContext = {\n  vertexStart: number;\n  indexStart: number;\n  geometrySize: number;\n  geometryIndex: number;\n};\n\ntype CutPolygon = FlatComplexPolygonGeometry & {\n  edgeTypes: number[];\n};\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator<\n  PolygonGeometry,\n  NormalizedPolygonGeometry | CutPolygon[],\n  {\n    fp64?: boolean;\n    IndexType?: Uint32ArrayConstructor | Uint16ArrayConstructor;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    preproject?: (xy: number[]) => number[];\n    full3d?: boolean;\n  }\n> {\n  constructor(opts) {\n    const {fp64, IndexType = Uint32Array} = opts;\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: fp64 ? Float64Array : Float32Array},\n        vertexValid: {type: Uint16Array, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /** Get attribute by name */\n  get(attributeName: string): TypedArray | null {\n    const {attributes} = this;\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  /** Override base Tesselator method */\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n\n    const externalIndices = this.buffers.indices;\n    if (externalIndices) {\n      // @ts-ignore (2339) value is not defined on TypedArray (fall through)\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    } else if (this.data && !this.getGeometry) {\n      throw new Error('missing indices buffer');\n    }\n  }\n\n  /** Implement base Tesselator interface */\n  protected normalizeGeometry(polygon: PolygonGeometry): NormalizedPolygonGeometry | CutPolygon[] {\n    if (this.normalize) {\n      const normalizedPolygon = Polygon.normalize(polygon, this.positionSize);\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            gridResolution: this.opts.resolution,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            maxLatitude: 86,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      return normalizedPolygon;\n    }\n    // normalize is explicitly set to false, assume that user passed in already normalized polygons\n    return polygon as NormalizedPolygonGeometry;\n  }\n\n  /** Implement base Tesselator interface */\n  protected getGeometrySize(polygon: NormalizedPolygonGeometry | CutPolygon[]): number {\n    if (isCut(polygon)) {\n      let size = 0;\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n      return size;\n    }\n    return Polygon.getPositions(polygon).length / this.positionSize;\n  }\n\n  /** Override base Tesselator method */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization/tesselation\n    return null;\n  }\n\n  /** Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    polygon: NormalizedPolygonGeometry | CutPolygon[] | null,\n    context: GeometryUpdateContext\n  ) {\n    if (polygon && isCut(polygon)) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      const normalizedPolygon = polygon as NormalizedPolygonGeometry;\n      this._updateIndices(normalizedPolygon, context);\n      this._updatePositions(normalizedPolygon, context);\n      this._updateVertexValid(normalizedPolygon, context);\n    }\n  }\n\n  // Flatten the indices array\n  private _updateIndices(\n    polygon: NormalizedPolygonGeometry | null,\n    {geometryIndex, vertexStart: offset, indexStart}: GeometryUpdateContext\n  ) {\n    const {attributes, indexStarts, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    if (!target || !polygon) {\n      return;\n    }\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(\n      polygon,\n      this.positionSize,\n      this.opts.preproject,\n      this.opts.full3d\n    );\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  private _updatePositions(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {\n      attributes: {positions},\n      positionSize\n    } = this;\n    if (!positions || !polygon) {\n      return;\n    }\n    const polygonPositions = Polygon.getPositions(polygon);\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  private _updateVertexValid(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {positionSize} = this;\n    const vertexValid = this.attributes.vertexValid as TypedArray;\n    const holeIndices = polygon && Polygon.getHoleIndices(polygon);\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (polygon && (polygon as CutPolygon).edgeTypes) {\n      vertexValid.set((polygon as CutPolygon).edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n\nfunction isCut(polygon: NormalizedPolygonGeometry | CutPolygon[]): polygon is CutPolygon[] {\n  return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform solidPolygonUniforms {\n  bool extruded;\n  bool isWireframe;\n  float elevationScale;\n} solidPolygon;\n`;\n\nexport type SolidPolygonProps = {\n  extruded: boolean;\n  isWireframe: boolean;\n  elevationScale: number;\n};\n\nexport const solidPolygonUniforms = {\n  name: 'solidPolygon',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    extruded: 'f32',\n    isWireframe: 'f32',\n    elevationScale: 'f32'\n  }\n} as const satisfies ShaderModule<SolidPolygonProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n\nin vec4 fillColors;\nin vec4 lineColors;\nin vec3 pickingColors;\n\nout vec4 vColor;\n\nstruct PolygonProps {\n  vec3 positions;\n  vec3 positions64Low;\n  vec3 normal;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n    project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    // normals generated by the polygon tesselator are in lnglat offsets instead of meters\n    return normalize(vector * project.commonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n  vec3 pos = props.positions;\n  vec3 pos64Low = props.positions64Low;\n  vec3 normal = props.normal;\n  vec4 colors = solidPolygon.isWireframe ? lineColors : fillColors;\n\n  geometry.worldPosition = props.positions;\n  geometry.pickingColor = pickingColors;\n\n  if (solidPolygon.extruded) {\n    pos.z += props.elevations * solidPolygon.elevationScale;\n  }\n  gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  if (solidPolygon.extruded) {\n  #ifdef IS_SIDE_VERTEX\n    normal = project_offset_normal(normal);\n  #else\n    normal = project_normal(normal);\n  #endif\n    geometry.normal = normal;\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);\n    vColor = vec4(lightColor, colors.a * layer.opacity);\n  } else {\n    vColor = vec4(colors.rgb, colors.a * layer.opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport main from './solid-polygon-layer-vertex-main.glsl';\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nin vec3 vertexPositions;\nin vec3 vertexPositions64Low;\nin float elevations;\n\n${main}\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = vertexPositions;\n  props.positions64Low = vertexPositions64Low;\n  props.elevations = elevations;\n  props.normal = vec3(0.0, 0.0, 1.0);\n\n  calculatePosition(props);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport main from './solid-polygon-layer-vertex-main.glsl';\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\nin vec2 positions;\n\nin vec3 vertexPositions;\nin vec3 nextVertexPositions;\nin vec3 vertexPositions64Low;\nin vec3 nextVertexPositions64Low;\nin float elevations;\nin float instanceVertexValid;\n\n${main}\n\nvoid main(void) {\n  if(instanceVertexValid < 0.5){\n    gl_Position = vec4(0.);\n    return;\n  }\n\n  PolygonProps props;\n\n  vec3 pos;\n  vec3 pos64Low;\n  vec3 nextPos;\n  vec3 nextPos64Low;\n\n  #if RING_WINDING_ORDER_CW == 1\n    pos = vertexPositions;\n    pos64Low = vertexPositions64Low;\n    nextPos = nextVertexPositions;\n    nextPos64Low = nextVertexPositions64Low;\n  #else\n    pos = nextVertexPositions;\n    pos64Low = nextVertexPositions64Low;\n    nextPos = vertexPositions;\n    nextPos64Low = vertexPositions64Low;\n  #endif\n\n  props.positions = mix(pos, nextPos, positions.x);\n  props.positions64Low = mix(pos64Low, nextPos64Low, positions.x);\n\n  props.normal = vec3(\n    pos.y - nextPos.y + (pos64Low.y - nextPos64Low.y),\n    nextPos.x - pos.x + (nextPos64Low.x - pos64Low.x),\n    0.0);\n\n  props.elevations = elevations * positions.y;\n\n  calculatePosition(props);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  fragColor = vColor;\n  // Fails to compile on some Android devices if geometry is never assigned (#8411)\n  geometry.uv = vec2(0.);\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\nimport {gouraudMaterial} from '@luma.gl/shadertools';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport {solidPolygonUniforms, SolidPolygonProps} from './solid-polygon-layer-uniforms';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = unknown> = _SolidPolygonLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: (f: any) => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    wireframeModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudMaterial, picking, solidPolygonUniforms]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds(['vertexPositions']);\n  }\n\n  initializeState() {\n    const {viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    const {_full3d} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    let preproject: ((xy: number[]) => number[]) | undefined;\n\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: Uint32Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      vertexPositions: {\n        size: 3,\n        type: 'float64',\n        stepMode: 'dynamic',\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          nextVertexPositions: {\n            vertexOffset: 1\n          }\n        }\n      },\n      instanceVertexValid: {\n        size: 1,\n        type: 'uint16',\n        stepMode: 'instance',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        stepMode: 'dynamic',\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation'\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        stepMode: 'dynamic',\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        stepMode: 'dynamic',\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      pickingColors: {\n        size: 4,\n        type: 'uint8',\n        stepMode: 'dynamic',\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, wireframeModel, polygonTesselator} = this.state;\n\n    const renderUniforms: SolidPolygonProps = {\n      extruded: Boolean(extruded),\n      elevationScale,\n      isWireframe: false\n    };\n\n    // Note - the order is important\n    if (wireframeModel && wireframe) {\n      wireframeModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      wireframeModel.shaderInputs.setProps({solidPolygon: {...renderUniforms, isWireframe: true}});\n      wireframeModel.draw(this.context.renderPass);\n    }\n\n    if (sideModel && filled) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.shaderInputs.setProps({solidPolygon: renderUniforms});\n      sideModel.draw(this.context.renderPass);\n    }\n\n    if (topModel && filled) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.shaderInputs.setProps({solidPolygon: renderUniforms});\n      topModel.draw(this.context.renderPass);\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.destroy());\n\n      this.setState(this._getModels());\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels() {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n    let wireframeModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      const bufferLayout = this.getAttributeManager()!.getBufferLayouts({isInstanced: false});\n\n      topModel = new Model(this.context.device, {\n        ...shaders,\n        id: `${id}-top`,\n        topology: 'triangle-list',\n        bufferLayout,\n        isIndexed: true,\n        userData: {\n          excludeAttributes: {instanceVertexValid: true}\n        }\n      });\n    }\n    if (extruded) {\n      const bufferLayout = this.getAttributeManager()!.getBufferLayouts({isInstanced: true});\n\n      sideModel = new Model(this.context.device, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        bufferLayout,\n        geometry: new Geometry({\n          topology: 'triangle-strip',\n          attributes: {\n            // top right - top left - bottom right - bottom left\n            positions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 1, 1, 0, 1])\n            }\n          }\n        }),\n        isInstanced: true,\n        userData: {\n          excludeAttributes: {indices: true}\n        }\n      });\n\n      wireframeModel = new Model(this.context.device, {\n        ...this.getShaders('side'),\n        id: `${id}-wireframe`,\n        bufferLayout,\n        geometry: new Geometry({\n          topology: 'line-strip',\n          attributes: {\n            // top right - top left - bottom left - bottom right\n            positions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        isInstanced: true,\n        userData: {\n          excludeAttributes: {indices: true}\n        }\n      });\n    }\n\n    return {\n      models: [sideModel, wireframeModel, topModel].filter(Boolean),\n      topModel,\n      sideModel,\n      wireframeModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = unknown> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = unknown> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: (f: any) => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    paths: number[][];\n    pathsDiff:\n      | {\n          startRow: number;\n          endRow: number;\n        }[]\n      | null;\n  };\n\n  initializeState(): void {\n    this.state = {\n      paths: [],\n      pathsDiff: null\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {BinaryAttribute} from '@deck.gl/core';\nimport {\n  BinaryFeatureCollection,\n  BinaryLineFeature,\n  BinaryPointFeature,\n  BinaryPolygonFeature,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeature | BinaryLineFeature | BinaryPolygonFeature;\n\nexport type ExtendedBinaryFeatureCollection = {\n  [P in keyof Omit<BinaryFeatureCollection, 'shape'>]: BinaryFeatureCollection[P] & {\n    attributes?: Record<string, BinaryAttribute>;\n  };\n};\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: Required<ExtendedBinaryFeatureCollection>,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 4);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key][i * 4 + 0] = pickingColor[0];\n      pickingColors[key][i * 4 + 1] = pickingColor[1];\n      pickingColors[key][i * 4 + 2] = pickingColor[2];\n      pickingColors[key][i * 4 + 3] = 255;\n    }\n  }\n\n  return pickingColors;\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform sdfUniforms {\n  float gamma;\n  bool enabled;\n  float buffer;\n  float outlineBuffer;\n  vec4 outlineColor;\n} sdf;\n`;\n\nexport type SdfProps = {\n  gamma: number;\n  enabled: boolean;\n  buffer: number;\n  outlineBuffer: number;\n  outlineColor: [number, number, number, number];\n};\n\nexport const sdfUniforms = {\n  name: 'sdf',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    gamma: 'f32',\n    enabled: 'f32',\n    buffer: 'f32',\n    outlineBuffer: 'f32',\n    outlineColor: 'vec4<f32>'\n  }\n} as const satisfies ShaderModule<SdfProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform sampler2D iconsTexture;\n\nin vec4 vColor;\nin vec2 vTextureCoords;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!bool(picking.isActive)) {\n    float alpha = texture(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n\n    // if enable sdf (signed distance fields)\n    if (sdf.enabled) {\n      float distance = alpha;\n      alpha = smoothstep(sdf.buffer - sdf.gamma, sdf.buffer + sdf.gamma, distance);\n\n      if (sdf.outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(sdf.outlineBuffer - sdf.gamma, sdf.outlineBuffer + sdf.gamma, distance);\n        color = mix(sdf.outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n\n    // Take the global opacity and the alpha from color into account for the alpha component\n    float a = alpha * color.a;\n    \n    if (a < icon.alphaCutoff) {\n      discard;\n    }\n\n    fragColor = vec4(color.rgb, a * layer.opacity);\n  }\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport {SdfProps, sdfUniforms} from './sdf-uniforms';\nimport fs from './multi-icon-layer-fragment.glsl';\n\nimport type {IconLayerProps} from '../../icon-layer/icon-layer';\nimport type {Accessor, Color, UpdateParameters, DefaultProps} from '@deck.gl/core';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\ntype _MultiIconLayerProps<DataT> = {\n  getIconOffsets?: Accessor<DataT, number[]>;\n  sdf?: boolean;\n  smoothing?: number;\n  outlineWidth?: number;\n  outlineColor?: Color;\n};\n\nexport type MultiIconLayerProps<DataT = unknown> = _MultiIconLayerProps<DataT> &\n  IconLayerProps<DataT>;\n\nconst defaultProps: DefaultProps<MultiIconLayerProps> = {\n  getIconOffsets: {type: 'accessor', value: (x: any) => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer<DataT, ExtraPropsT extends {} = {}> extends IconLayer<\n  DataT,\n  ExtraPropsT & Required<_MultiIconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'MultiIconLayer';\n\n  state!: IconLayer['state'] & {\n    outlineColor: [number, number, number, number];\n  };\n\n  getShaders() {\n    const shaders = super.getShaders();\n    return {...shaders, modules: [...shaders.modules, sdfUniforms], fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 'uint8',\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255) as Color;\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n    const outlineBuffer = outlineWidth\n      ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth))\n      : -1;\n\n    const model = this.state.model!;\n    const sdfProps: SdfProps = {\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      enabled: Boolean(sdf),\n      outlineColor\n    };\n    model.shaderInputs.setProps({sdf: sdfProps});\n    super.draw(params);\n\n    // draw text without outline on top to ensure a thick outline won't occlude other characters\n    if (sdf && outlineWidth) {\n      const {iconManager} = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        model.shaderInputs.setProps({sdf: {...sdfProps, outlineBuffer: DEFAULT_BUFFER}});\n        model.draw(this.context.renderPass);\n      }\n    }\n  }\n\n  protected getInstanceOffset(icons: string): number[] {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons: string): number {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons: string): number[] {\n    return icons\n      ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))\n      : EMPTY_ARRAY;\n  }\n}\n", "const INF = 1e20;\n\nexport default class TinySDF {\n    constructor({\n        fontSize = 24,\n        buffer = 3,\n        radius = 8,\n        cutoff = 0.25,\n        fontFamily = 'sans-serif',\n        fontWeight = 'normal',\n        fontStyle = 'normal'\n    } = {}) {\n        this.buffer = buffer;\n        this.cutoff = cutoff;\n        this.radius = radius;\n\n        // make the canvas size big enough to both have the specified buffer around the glyph\n        // for \"halo\", and account for some glyphs possibly being larger than their font size\n        const size = this.size = fontSize + buffer * 4;\n\n        const canvas = this._createCanvas(size);\n        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        ctx.textBaseline = 'alphabetic';\n        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment\n        ctx.fillStyle = 'black';\n\n        // temporary arrays for the distance transform\n        this.gridOuter = new Float64Array(size * size);\n        this.gridInner = new Float64Array(size * size);\n        this.f = new Float64Array(size);\n        this.z = new Float64Array(size + 1);\n        this.v = new Uint16Array(size);\n    }\n\n    _createCanvas(size) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        return canvas;\n    }\n\n    draw(char) {\n        const {\n            width: glyphAdvance,\n            actualBoundingBoxAscent,\n            actualBoundingBoxDescent,\n            actualBoundingBoxLeft,\n            actualBoundingBoxRight\n        } = this.ctx.measureText(char);\n\n        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop\n        // The remainder is implicitly encoded in the rasterization\n        const glyphTop = Math.ceil(actualBoundingBoxAscent);\n        const glyphLeft = 0;\n\n        // If the glyph overflows the canvas size, it will be clipped at the bottom/right\n        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));\n        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));\n\n        const width = glyphWidth + 2 * this.buffer;\n        const height = glyphHeight + 2 * this.buffer;\n\n        const len = Math.max(width * height, 0);\n        const data = new Uint8ClampedArray(len);\n        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};\n        if (glyphWidth === 0 || glyphHeight === 0) return glyph;\n\n        const {ctx, buffer, gridInner, gridOuter} = this;\n        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);\n        ctx.fillText(char, buffer, buffer + glyphTop);\n        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);\n\n        // Initialize grids outside the glyph range to alpha 0\n        gridOuter.fill(INF, 0, len);\n        gridInner.fill(0, 0, len);\n\n        for (let y = 0; y < glyphHeight; y++) {\n            for (let x = 0; x < glyphWidth; x++) {\n                const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value\n                if (a === 0) continue; // empty pixels\n\n                const j = (y + buffer) * width + x + buffer;\n\n                if (a === 1) { // fully drawn pixels\n                    gridOuter[j] = 0;\n                    gridInner[j] = INF;\n\n                } else { // aliased pixels\n                    const d = 0.5 - a;\n                    gridOuter[j] = d > 0 ? d * d : 0;\n                    gridInner[j] = d < 0 ? d * d : 0;\n                }\n            }\n        }\n\n        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);\n        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);\n\n        for (let i = 0; i < len; i++) {\n            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);\n            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));\n        }\n\n        return glyph;\n    }\n}\n\n// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\nfunction edt(data, x0, y0, width, height, gridSize, f, v, z) {\n    for (let x = x0; x < x0 + width; x++) edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);\n    for (let y = y0; y < y0 + height; y++) edt1d(data, y * gridSize + x0, 1, width, f, v, z);\n}\n\n// 1D squared distance transform\nfunction edt1d(grid, offset, stride, length, f, v, z) {\n    v[0] = 0;\n    z[0] = -INF;\n    z[1] = INF;\n    f[0] = grid[offset];\n\n    for (let q = 1, k = 0, s = 0; q < length; q++) {\n        f[q] = grid[offset + q * stride];\n        const q2 = q * q;\n        do {\n            const r = v[k];\n            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;\n        } while (s <= z[k] && --k > -1);\n\n        k++;\n        v[k] = q;\n        z[k] = s;\n        z[k + 1] = INF;\n    }\n\n    for (let q = 0, k = 0; q < length; q++) {\n        while (z[k + 1] < q) k++;\n        const r = v[k];\n        const qr = q - r;\n        grid[offset + q * stride] = f[r] + qr * qr;\n    }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport type Character = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  layoutWidth: number;\n  layoutHeight: number;\n  layoutOffsetY?: number;\n};\n\nexport type CharacterMapping = Record<string, Character>;\n\nexport function nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}: {\n  /** list of characters */\n  characterSet: Set<string>;\n  /** function to get width of each character */\n  getFontWidth: (char: string) => number;\n  /** height of font */\n  fontHeight: number;\n  /** bleeding buffer surround each character */\n  buffer: number;\n  /** max width of font atlas */\n  maxCanvasWidth: number;\n  /** cached mapping table */\n  mapping?: CharacterMapping;\n  /** x position of last character in the existing mapping table */\n  xOffset?: number;\n  /** y position of last character in the existing mapping table */\n  yOffset?: number;\n}): {\n  /** new mapping table */\n  mapping: CharacterMapping;\n  /** x position of last character in the new mapping table */\n  xOffset: number;\n  /** y position of last character in the new mapping table */\n  yOffset: number;\n  /** height of the font atlas canvas, power of 2 */\n  canvasHeight: number;\n} {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n  const rowHeight = fontHeight + buffer * 2;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * rowHeight + buffer,\n        width,\n        height: rowHeight,\n        layoutWidth: width,\n        layoutHeight: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  mapping: CharacterMapping\n): number {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    width += mapping[character]?.layoutWidth || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n/**\n * Wrap the given text so that each line does not exceed the given max width.\n * Returns a list of indices where line breaks should be inserted.\n */\nexport function autoWrapping(\n  text: string[],\n  wordBreak: 'break-all' | 'break-word',\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  startIndex: number = 0,\n  endIndex: number\n): number[] {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(\n  line: string[],\n  startIndex: number,\n  endIndex: number,\n  iconMapping: CharacterMapping,\n  leftOffsets: number[],\n  rowSize: [number, number]\n) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.layoutHeight;\n      }\n      leftOffsets[i] = x + frame.layoutWidth / 2;\n      x += frame.layoutWidth;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n */\nexport function transformParagraph(\n  paragraph: string,\n  /** CSS line-height */\n  lineHeight: number,\n  /** CSS word-break option */\n  wordBreak: 'break-word' | 'break-all',\n  /** CSS max-width */\n  maxWidth: number,\n  /** character mapping table for retrieving a character from font atlas */\n  iconMapping: CharacterMapping\n): {\n  /** x position of each character */\n  x: number[];\n  /** y position of each character */\n  y: number[];\n  /** the current row width of each character */\n  rowWidth: number[];\n  /** the width and height of the paragraph */\n  size: [number, number];\n} {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters) as number[];\n  const y = new Array(numCharacters) as number[];\n  const rowWidth = new Array(numCharacters) as number[];\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size: [number, number] = [0, 0];\n  const rowSize: [number, number] = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          const rowOffsetLeft = x[j] - rowSize[0] / 2;\n          const char = characters[j];\n          const layoutOffsetY = iconMapping[char]?.layoutOffsetY || 0;\n          y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({\n  value,\n  length,\n  stride,\n  offset,\n  startIndices,\n  characterSet\n}: {\n  value: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array;\n  length: number;\n  stride?: number;\n  offset?: number;\n  startIndices: NumericArray;\n  characterSet?: Set<string>;\n}): {\n  texts: string[];\n  characterCount: number;\n} {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set<number>();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor as\n      | Uint8ArrayConstructor\n      | Uint8ClampedArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor;\n    codes = new ArrayType(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    // @ts-ignore TS wants the argument to be number[] but typed array works too\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache<ValueT> {\n  private limit: number;\n  private _cache: Record<string, ValueT> = {};\n  /** access/update order, first item is oldest, last item is newest */\n  private _order: string[] = [];\n\n  constructor(limit: number = 5) {\n    this.limit = limit;\n  }\n\n  get(key: string): ValueT {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key: string, value: ValueT): void {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key: string): void {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n\n  private _deleteOrder(key: string): void {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  private _appendOrder(key: string): void {\n    this._order.push(key);\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping, CharacterMapping} from './utils';\nimport LRUCache from './lru-cache';\n\n// import type {Texture} from '@deck.gl/core';\n\nfunction getDefaultCharacterSet() {\n  const charSet: string[] = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport type FontSettings = {\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: string;\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: string | number;\n  /** Specifies a list of characters to include in the font.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: Set<string> | string[] | string;\n  /** Font size in pixels. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`.\n   * @default 64\n   */\n  fontSize?: number;\n  /** Whitespace buffer around each side of the character. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters.\n   * @default 4\n   */\n  buffer?: number;\n  /** Flag to enable / disable `sdf`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm.\n   * @default false\n   */\n  sdf?: boolean;\n  /** How much of the radius (relative) is used for the inside part the glyph. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker. Only applies when `sdf: true`.\n   * @default 0.25\n   */\n  cutoff?: number;\n  /** How many pixels around the glyph shape to use for encoding distance. Bigger radius yields higher quality outcome. Only applies when `sdf: true`.\n   * @default 12\n   */\n  radius?: number;\n  /** How much smoothing to apply to the text edges. Only applies when `sdf: true`.\n   * @default 0.1\n   */\n  smoothing?: number;\n};\n\nexport const DEFAULT_FONT_SETTINGS: Required<FontSettings> = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\ntype FontAtlas = {\n  /** x position of last character in mapping */\n  xOffset: number;\n  /** y position of last character in mapping */\n  yOffset: number;\n  /** bounding box of each character in the texture */\n  mapping: CharacterMapping;\n  /** packed texture */\n  data: HTMLCanvasElement;\n  /** texture width */\n  width: number;\n  /** texture height */\n  height: number;\n};\n\nlet cache = new LRUCache<FontAtlas>(CACHE_LIMIT);\n\n/**\n * get all the chars not in cache\n * @returns chars not in cache\n */\nfunction getNewChars(cacheKey: string, characterSet: Set<string> | string[] | string): Set<string> {\n  let newCharSet: Set<string>;\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel: Uint8ClampedArray, imageData: ImageData): void {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string | number\n): void {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit: number): void {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  /** Font settings */\n  props: Required<FontSettings> = {...DEFAULT_FONT_SETTINGS};\n\n  /** Cache key of the current font atlas */\n  private _key?: string;\n  /** The current font atlas */\n  private _atlas?: FontAtlas;\n\n  get atlas(): Readonly<FontAtlas> | undefined {\n    return this._atlas;\n  }\n\n  // TODO - cut during v9 porting as types reveal this is not correct\n  // get texture(): Texture | undefined {\n  //   return this._atlas;\n  // }\n\n  get mapping(): CharacterMapping | undefined {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale(): number {\n    const {fontSize, buffer} = this.props;\n    return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;\n  }\n\n  setProps(props: FontSettings = {}) {\n    Object.assign(this.props, props);\n\n    // update cache key\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.size === 0) {\n      // update texture with cached fontAtlas\n      if (this._atlas !== cachedFontAtlas) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  // eslint-disable-next-line max-statements\n  private _generateFontAtlas(characterSet: Set<string>, cachedFontAtlas?: FontAtlas): FontAtlas {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d', {willReadFrequently: true})!;\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF({\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight: `${fontWeight}`\n      });\n\n      for (const char of characterSet) {\n        const {data, width, height, glyphTop} = tinySDF.draw(char);\n        mapping[char].width = width;\n        mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;\n\n        const imageData = ctx.createImageData(width, height);\n        populateAlphaChannel(data, imageData);\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  private _getKey(): string {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\nconst uniformBlock = `\\\nuniform textBackgroundUniforms {\n  bool billboard;\n  float sizeScale;\n  float sizeMinPixels;\n  float sizeMaxPixels;\n  vec4 borderRadius;\n  vec4 padding;\n  highp int sizeUnits;\n  bool stroked;\n} textBackground;\n`;\n\nexport type TextBackgroundProps = {\n  billboard: boolean;\n  sizeScale: number;\n  sizeMinPixels: number;\n  sizeMaxPixels: number;\n  borderRadius: [number, number, number, number];\n  padding: [number, number, number, number];\n  sizeUnits: number;\n  stroked: boolean;\n};\n\nexport const textBackgroundUniforms = {\n  name: 'textBackground',\n  vs: uniformBlock,\n  fs: uniformBlock,\n  uniformTypes: {\n    billboard: 'f32',\n    sizeScale: 'f32',\n    sizeMinPixels: 'f32',\n    sizeMaxPixels: 'f32',\n    borderRadius: 'vec4<f32>',\n    padding: 'vec4<f32>',\n    sizeUnits: 'i32',\n    stroked: 'f32'\n  }\n} as const satisfies ShaderModule<TextBackgroundProps>;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME text-background-layer-vertex-shader\n\nin vec2 positions;\n\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceRects;\nin float instanceSizes;\nin float instanceAngles;\nin vec2 instancePixelOffsets;\nin float instanceLineWidths;\nin vec4 instanceFillColors;\nin vec4 instanceLineColors;\nin vec3 instancePickingColors;\n\nout vec4 vFillColor;\nout vec4 vLineColor;\nout float vLineWidth;\nout vec2 uv;\nout vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n\n  // convert size in meters to pixels, then scaled and clamp\n\n  // project meters to pixels and clamp to limits\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * textBackground.sizeScale, textBackground.sizeUnits),\n    textBackground.sizeMinPixels, textBackground.sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + textBackground.padding.xy + textBackground.padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-textBackground.padding.xy, textBackground.padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (textBackground.billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vFillColor;\nin vec4 vLineColor;\nin float vLineWidth;\nin vec2 uv;\nin vec2 dimensions;\n\nout vec4 fragColor;\n\nfloat round_rect(vec2 p, vec2 size, vec4 radii) {\n  // Convert p and size to center-based coordinates [-0.5, 0.5]\n  vec2 pixelPositionCB = (p - 0.5) * size;\n  vec2 sizeCB = size * 0.5;\n\n  float maxBorderRadius = min(size.x, size.y) * 0.5;\n  vec4 borderRadius = vec4(min(radii, maxBorderRadius));\n\n  // from https://www.shadertoy.com/view/4llXD7\n  borderRadius.xy =\n      (pixelPositionCB.x > 0.0) ? borderRadius.xy : borderRadius.zw;\n  borderRadius.x = (pixelPositionCB.y > 0.0) ? borderRadius.x : borderRadius.y;\n  vec2 q = abs(pixelPositionCB) - sizeCB + borderRadius.x;\n  return -(min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - borderRadius.x);\n}\n\nfloat rect(vec2 p, vec2 size) {\n  vec2 pixelPosition = p * size;\n  return min(min(pixelPosition.x, size.x - pixelPosition.x),\n             min(pixelPosition.y, size.y - pixelPosition.y));\n}\n\nvec4 get_stroked_fragColor(float dist) {\n  float isBorder = smoothedge(dist, vLineWidth);\n  return mix(vFillColor, vLineColor, isBorder);\n}\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (textBackground.borderRadius != vec4(0.0)) {\n    float distToEdge = round_rect(uv, dimensions, textBackground.borderRadius);\n    if (textBackground.stroked) {\n      fragColor = get_stroked_fragColor(distToEdge);\n    } else {\n      fragColor = vFillColor;\n    }\n    // add border radius\n    float shapeAlpha = smoothedge(-distToEdge, 0.0);\n    fragColor.a *= shapeAlpha;\n  } else {\n    if (textBackground.stroked) {\n      float distToEdge = rect(uv, dimensions);\n      fragColor = get_stroked_fragColor(distToEdge);\n    } else {\n      fragColor = vFillColor;\n    }\n  }\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Geometry} from '@luma.gl/engine';\nimport {Model} from '@luma.gl/engine';\n\nimport {TextBackgroundProps, textBackgroundUniforms} from './text-background-layer-uniforms';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  borderRadius?: number | [number, number, number, number];\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = unknown> = _TextBackgroundLayerProps<DataT> &\n  LayerProps;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  borderRadius: {type: 'object', value: 0},\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, textBackgroundUniforms]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding, borderRadius} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    if (!Array.isArray(borderRadius)) {\n      borderRadius = [borderRadius, borderRadius, borderRadius, borderRadius];\n    }\n\n    const model = this.state.model!;\n    const textBackgroundProps: TextBackgroundProps = {\n      billboard,\n      stroked: Boolean(getLineWidth),\n      borderRadius,\n      padding: padding as [number, number, number, number],\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    };\n    model.shaderInputs.setProps({textBackground: textBackgroundProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 0, 1, 1, 1];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_FONT_SETTINGS,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nimport type {FontSettings} from './font-atlas-manager';\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  AccessorContext,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n} as const;\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n} as const;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\ntype _TextLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** If `true`, the text always faces camera. Otherwise the text faces up (z).\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Text size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n\n  /** Whether to render background for the text blocks.\n   * @default false\n   */\n  background?: boolean;\n  /** Background color accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getBackgroundColor?: Accessor<DataT, Color>;\n  /** Border color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getBorderColor?: Accessor<DataT, Color>;\n  /** Border width accessor.\n   * @default 0\n   */\n  getBorderWidth?: Accessor<DataT, number>;\n  /** The border radius of the background.\n   * If a number is supplied, it is the same border radius in pixel for all corners.\n   * If an array of 4 is supplied, it is interpreted as `[bottom_right_corner, top_right_corner, bottom_left_corner, top_left_corner]` border radius in pixel.\n   * @default 0\n   */\n  backgroundBorderRadius?: number | [number, number, number, number];\n  /**\n   * The padding of the background..\n   * If an array of 2 is supplied, it is interpreted as `[padding_x, padding_y]` in pixels.\n   * If an array of 4 is supplied, it is interpreted as `[padding_left, padding_top, padding_right, padding_bottom]` in pixels.\n   * @default [0, 0, 0, 0]\n   */\n  backgroundPadding?: [number, number] | [number, number, number, number];\n  /**\n   * Specifies a list of characters to include in the font. If set to 'auto', will be automatically generated from the data set.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: FontSettings['characterSet'] | 'auto';\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: FontSettings['fontFamily'];\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: FontSettings['fontWeight'];\n  /** A unitless number that will be multiplied with the current text size to set the line height.\n   * @default 'normal'\n   */\n  lineHeight?: number;\n  /**\n   * Width of outline around the text, relative to the text size. Only effective if `fontSettings.sdf` is `true`.\n   * @default 0\n   */\n  outlineWidth?: number;\n  /**\n   * Color of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n   * @default [0, 0, 0, 255]\n   */\n  outlineColor?: Color;\n  /**\n   * Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`.\n   */\n  fontSettings?: FontSettings;\n  /**\n   * Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`.\n   * @default 'break-word'\n   */\n  wordBreak?: 'break-word' | 'break-all';\n  /**\n   * A unitless number that will be multiplied with the current text size to set the width limit of a string.\n   * If specified, when the text is longer than the width limit, it will be wrapped into multiple lines using\n   * the strategy of `wordBreak`.\n   * @default -1\n   */\n  maxWidth?: number;\n  /**\n   * Label text accessor\n   */\n  getText?: AccessorFunction<DataT, string>;\n  /**\n   * Anchor position accessor\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Label color accessor\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Label size accessor\n   * @default 32\n   */\n  getSize?: Accessor<DataT, number>;\n  /**\n   * Label rotation accessor, in degrees\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Horizontal alignment accessor\n   * @default 'middle'\n   */\n  getTextAnchor?: Accessor<DataT, 'start' | 'middle' | 'end'>;\n  /**\n   * Vertical alignment accessor\n   * @default 'center'\n   */\n  getAlignmentBaseline?: Accessor<DataT, 'top' | 'center' | 'bottom'>;\n  /**\n   * Label offset from the anchor position, [x, y] in pixels\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * @deprecated Use `background` and `getBackgroundColor` instead\n   */\n  backgroundColor?: Color;\n};\n\nexport type TextLayerProps<DataT = unknown> = _TextLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundBorderRadius: {type: 'object', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_FONT_SETTINGS.characterSet},\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {type: 'object', value: {}, compare: 1},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: (x: any) => x.text},\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\n/** Render text labels at given coordinates. */\nexport default class TextLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TextLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextLayer';\n\n  state!: {\n    styleVersion: number;\n    fontAtlasManager: FontAtlasManager;\n    characterSet?: Set<string>;\n    startIndices?: number[];\n    numInstances?: number;\n    getText?: AccessorFunction<DataT, string>;\n  };\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n\n    // Breaking change in v8.9\n    if (this.props.maxWidth > 0) {\n      log.once(1, 'v8.9 breaking change: TextLayer maxWidth is now relative to text size')();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps, changeFlags} = params;\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? (this.props.data as any[])[info.index] : null;\n    return info;\n  }\n\n  /** Returns true if font has changed */\n  private _updateFontAtlas(): boolean {\n    const {fontSettings, fontFamily, fontWeight} = this.props;\n    const {fontAtlasManager, characterSet} = this.state;\n\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      // This is the first update\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  private _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = (data as any).attributes?.getText;\n    let {getText} = this.props;\n    let startIndices: number[] = (data as any).startIndices;\n    let numInstances: number;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        // @ts-ignore if data.attribute is defined then length is expected\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  /** There are two size systems in this layer:\n\n    + Pixel size: user-specified text size, via getSize, sizeScale, sizeUnits etc.\n      The layer roughly matches the output of the layer to CSS pixels, e.g. getSize: 12, sizeScale: 2\n      in layer props is roughly equivalent to font-size: 24px in CSS.\n    + Texture size: internally, character positions in a text blob are calculated using the sizes of iconMapping,\n      which depends on how large each character is drawn into the font atlas. This is controlled by\n      fontSettings.fontSize (default 64) and most users do not set it manually.\n      These numbers are intended to be used in the vertex shader and never to be exposed to the end user.\n\n    All surfaces exposed to the user should either use the pixel size or a multiplier relative to the pixel size. */\n\n  /** Calculate the size and position of each character in a text string.\n   * Values are in texture size */\n  private transformParagraph(\n    object: DataT,\n    objectInfo: AccessorContext<DataT>\n  ): ReturnType<typeof transformParagraph> {\n    const {fontAtlasManager} = this.state;\n    const iconMapping = fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, lineHeight, maxWidth} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    return transformParagraph(\n      paragraph,\n      lineHeight,\n      wordBreak,\n      maxWidth * fontAtlasManager.props.fontSize,\n      iconMapping\n    );\n  }\n\n  /** Returns the x, y, width, height of each text string, relative to pixel size.\n   * Used to render the background.\n   */\n  private getBoundingRect: AccessorFunction<DataT, [number, number, number, number]> = (\n    object,\n    objectInfo\n  ) => {\n    let {\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const {fontSize} = this.state.fontAtlasManager.props;\n    width /= fontSize;\n    height /= fontSize;\n\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  };\n\n  /** Returns the x, y offsets of each character in a text string, in texture size.\n   * Used to layout characters in the vertex shader.\n   */\n  private getIconOffsets: AccessorFunction<DataT, number[]> = (object, objectInfo) => {\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  };\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, atlas, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundBorderRadius,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            borderRadius: backgroundBorderRadius,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              // @ts-ignore (2339) attribute is not defined on all data types\n              data.attributes && data.attributes.background\n                ? // @ts-ignore (2339) attribute is not defined on all data types\n                  {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),\n          outlineColor,\n          iconAtlas: atlas,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            all: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets,\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit: number) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@deck.gl/core';\nimport type {\n  Feature,\n  GeoJSON,\n  GeoJsonGeometryTypes,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon\n} from 'geojson';\n\ntype SupportedGeometry = Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon;\n\nexport type SeparatedGeometries = {\n  pointFeatures: {geometry: Point}[];\n  lineFeatures: {geometry: LineString}[];\n  polygonFeatures: {geometry: Polygon}[];\n  polygonOutlineFeatures: {geometry: LineString}[];\n};\n\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\nexport function getGeojsonFeatures(geojson: GeoJSON): Feature[] {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{geometry: geojson}] as Feature[];\n  }\n}\n\n// Linearize\nexport function separateGeojsonFeatures(\n  features: Feature[],\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  dataRange: {startRow?: number; endRow?: number} = {}\n): SeparatedGeometries {\n  const separated: SeparatedGeometries = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  const {startRow = 0, endRow = features.length} = dataRange;\n\n  for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    const feature = features[featureIndex];\n    const {geometry} = feature;\n\n    if (!geometry) {\n      // geometry can be null per specification\n      continue; // eslint-disable-line no-continue\n    }\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      const {geometries} = geometry;\n      for (let i = 0; i < geometries.length; i++) {\n        const subGeometry = geometries[i];\n        separateGeometry(\n          subGeometry as SupportedGeometry,\n          separated,\n          wrapFeature,\n          feature,\n          featureIndex\n        );\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(\n  geometry: SupportedGeometry,\n  separated: SeparatedGeometries,\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  sourceFeature: Feature,\n  sourceFeatureIndex: number\n) {\n  const {type, coordinates} = geometry;\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = separated;\n\n  if (!validateGeometry(type, coordinates)) {\n    // Avoid hard failure if some features are malformed\n    log.warn(`${type} coordinates are malformed`)();\n    return;\n  }\n\n  // Split each feature, but keep track of the source feature and index (for Multi* geometries)\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiPoint':\n      coordinates.forEach(point => {\n        pointFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Point', coordinates: point}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'LineString':\n      lineFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiLineString':\n      // Break multilinestrings into multiple lines\n      coordinates.forEach(path => {\n        lineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'Polygon':\n      polygonFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      // Break polygon into multiple lines\n      coordinates.forEach(path => {\n        polygonOutlineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'MultiPolygon':\n      // Break multipolygons into multiple polygons\n      coordinates.forEach(polygon => {\n        polygonFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Polygon', coordinates: polygon}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n        // Break polygon into multiple lines\n        polygon.forEach(path => {\n          polygonOutlineFeatures.push(\n            wrapFeature(\n              {\n                geometry: {type: 'LineString', coordinates: path}\n              },\n              sourceFeature,\n              sourceFeatureIndex\n            )\n          );\n        });\n      });\n      break;\n    default:\n  }\n}\n\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\nconst COORDINATE_NEST_LEVEL: Record<SupportedGeometry['type'], number> = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nexport function validateGeometry(type: GeoJsonGeometryTypes, coordinates: any): boolean {\n  let nestLevel = COORDINATE_NEST_LEVEL[type] as number;\n\n  log.assert(nestLevel, `Unknown GeoJSON type ${type}`);\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {LayerData, LayerProps} from '@deck.gl/core';\nimport {PolygonLayerProps, ScatterplotLayerProps} from '..';\nimport {calculatePickingColors} from './geojson-binary';\nimport type {ExtendedBinaryFeatureCollection} from './geojson-binary';\nimport {SeparatedGeometries} from './geojson';\n\n// TODO: PathLayer is not yet typed\ntype PathLayerProps = LayerProps & Record<string, any>;\n\nexport type SubLayersProps = {\n  points: Partial<ScatterplotLayerProps>;\n  lines: Partial<PathLayerProps>;\n  polygons: Partial<PolygonLayerProps>;\n  polygonsOutline: Partial<PathLayerProps>;\n};\n\nfunction createEmptyLayerProps(): SubLayersProps {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(\n  features: SeparatedGeometries,\n  featuresDiff\n): SubLayersProps {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(\n  geojsonBinary: Required<ExtendedBinaryFeatureCollection>,\n  encodePickingColor: (id: number, result: number[]) => void\n): SubLayersProps {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.points!\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  } as LayerData<any>;\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.lines!\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  } as LayerData<any>;\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 4,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    (layerProps.polygons.data as any).attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n", "// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayerData,\n  PickingInfo,\n  Unit,\n  Material,\n  UpdateParameters,\n  _ConstructorOf,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {BinaryFeatureCollection} from '@loaders.gl/schema';\nimport type {Feature, Geometry, GeoJSON} from 'geojson';\n\nimport {replaceInRange} from '../utils';\nimport {BinaryFeatureTypes, binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, SeparatedGeometries, separateGeojsonFeatures} from './geojson';\nimport {\n  createLayerPropsFromFeatures,\n  createLayerPropsFromBinary,\n  SubLayersProps\n} from './geojson-layer-props';\n\n/** All properties supported by GeoJsonLayer */\nexport type GeoJsonLayerProps<FeaturePropertiesT = unknown> =\n  _GeoJsonLayerProps<FeaturePropertiesT> & CompositeLayerProps;\n\n/** Properties added by GeoJsonLayer */\nexport type _GeoJsonLayerProps<FeaturePropertiesT> = {\n  data:\n    | string\n    | GeoJSON\n    | Feature[]\n    | BinaryFeatureCollection\n    | Promise<GeoJSON | Feature[] | BinaryFeatureCollection>;\n  /**\n   * How to render Point and MultiPoint features in the data.\n   *\n   * Supported types are:\n   *  * `'circle'`\n   *  * `'icon'`\n   *  * `'text'`\n   *\n   * @default 'circle'\n   */\n  pointType?: string;\n} & _GeoJsonLayerFillProps<FeaturePropertiesT> &\n  _GeoJsonLayerStrokeProps<FeaturePropertiesT> &\n  _GeoJsonLayer3DProps<FeaturePropertiesT> &\n  _GeoJsonLayerPointCircleProps<FeaturePropertiesT> &\n  _GeojsonLayerIconPointProps<FeaturePropertiesT> &\n  _GeojsonLayerTextPointProps<FeaturePropertiesT>;\n\n/** GeoJsonLayer fill options. */\ntype _GeoJsonLayerFillProps<FeaturePropertiesT> = {\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n};\n\n/** GeoJsonLayer stroke options. */\ntype _GeoJsonLayerStrokeProps<FeaturePropertiesT> = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * A multiplier that is applied to all line widths\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  /**\n   * Type of line caps.\n   *\n   * If `true`, draw round caps. Otherwise draw square caps.\n   *\n   * @default false\n   */\n  lineCapRounded?: boolean;\n\n  /**\n   * If `true`, extrude the line in screen space (width always faces the camera).\n   * If `false`, the width always faces up.\n   *\n   * @default false\n   */\n  lineBillboard?: boolean;\n};\n\n/** GeoJsonLayer 3D options. */\ntype _GeoJsonLayer3DProps<FeaturePropertiesT> = {\n  /**\n   * Extrude Polygon and MultiPolygon features along the z-axis if set to true\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies to extruded polgons.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** GeoJsonLayer Properties forwarded to `ScatterPlotLayer` if `pointType` is `'circle'` */\nexport type _GeoJsonLayerPointCircleProps<FeaturePropertiesT> = {\n  getPointRadius?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  pointRadiusUnits?: Unit;\n  pointRadiusScale?: number;\n  pointRadiusMinPixels?: number;\n  pointRadiusMaxPixels?: number;\n  pointAntialiasing?: boolean;\n  pointBillboard?: boolean;\n\n  /** @deprecated use getPointRadius */\n  getRadius?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n};\n\n/** GeoJsonLayer properties forwarded to `IconLayer` if `pointType` is `'icon'` */\ntype _GeojsonLayerIconPointProps<FeaturePropertiesT> = {\n  iconAtlas?: any;\n  iconMapping?: any;\n  getIcon?: Accessor<Feature<Geometry, FeaturePropertiesT>, any>;\n  getIconSize?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  getIconColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n  getIconAngle?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  getIconPixelOffset?: Accessor<Feature<Geometry, FeaturePropertiesT>, number[]>;\n  iconSizeUnits?: Unit;\n  iconSizeScale?: number;\n  iconSizeMinPixels?: number;\n  iconSizeMaxPixels?: number;\n  iconBillboard?: boolean;\n  iconAlphaCutoff?: number;\n};\n\n/** GeoJsonLayer properties forwarded to `TextLayer` if `pointType` is `'text'` */\ntype _GeojsonLayerTextPointProps<FeaturePropertiesT> = {\n  getText?: Accessor<Feature<Geometry, FeaturePropertiesT>, any>;\n  getTextColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n  getTextAngle?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  getTextSize?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  getTextAnchor?: Accessor<Feature<Geometry, FeaturePropertiesT>, string>;\n  getTextAlignmentBaseline?: Accessor<Feature<Geometry, FeaturePropertiesT>, string>;\n  getTextPixelOffset?: Accessor<Feature<Geometry, FeaturePropertiesT>, number[]>;\n  getTextBackgroundColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n  getTextBorderColor?: Accessor<Feature<Geometry, FeaturePropertiesT>, Color>;\n  getTextBorderWidth?: Accessor<Feature<Geometry, FeaturePropertiesT>, number>;\n  textSizeUnits?: Unit;\n  textSizeScale?: number;\n  textSizeMinPixels?: number;\n  textSizeMaxPixels?: number;\n  textCharacterSet?: any;\n  textFontFamily?: string;\n  textFontWeight?: number;\n  textLineHeight?: number;\n  textMaxWidth?: number;\n  textWordBreak?: string; // TODO\n  textBackground?: boolean;\n  textBackgroundPadding?: number[];\n  textOutlineColor?: Color;\n  textOutlineWidth?: number;\n  textBillboard?: boolean;\n  textFontSettings?: any;\n};\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps: DefaultProps<GeoJsonLayerProps> = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _full3d: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\ntype GeoJsonPickingInfo = PickingInfo & {\n  featureType?: string | null;\n  info?: any;\n};\n\n/** Render GeoJSON formatted data as polygons, lines and points (circles, icons and/or texts). */\nexport default class GeoJsonLayer<\n  FeaturePropertiesT = any,\n  ExtraProps extends {} = {}\n> extends CompositeLayer<Required<_GeoJsonLayerProps<FeaturePropertiesT>> & ExtraProps> {\n  static layerName = 'GeoJsonLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    layerProps: Partial<SubLayersProps>;\n    features: Partial<SeparatedGeometries>;\n    featuresDiff: Partial<{\n      [key in keyof SeparatedGeometries]: {\n        startRow: number;\n        endRow: number;\n      }[];\n    }>;\n    binary?: boolean;\n  };\n\n  initializeState(): void {\n    this.state = {\n      layerProps: {},\n      features: {},\n      featuresDiff: {}\n    };\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary =\n      data && 'points' in (data as {}) && 'polygons' in (data as {}) && 'lines' in (data as {});\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  private _updateStateBinary({props, changeFlags}): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  private _updateStateJSON({props, changeFlags}): void {\n    const features: Feature[] = getGeojsonFeatures(props.data) as any;\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures: SeparatedGeometries = {} as SeparatedGeometries;\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params): GeoJsonPickingInfo {\n    const info = super.getPickingInfo(params) as GeoJsonPickingInfo;\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer!.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer!.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = (this.props.data as BinaryFeatureCollection).points!.globalFeatureIds.value[\n        index\n      ];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info: GeoJsonPickingInfo): void {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  private _renderPolygonLayer(): Layer | null {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons?.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  private _renderLineLayers(): (Layer | false)[] | null {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline?.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines?.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  private _renderPointLayers(): Layer[] | null {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      // @ts-expect-error TODO - type non-binary data\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers: Layer[] = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer: _ConstructorOf<Layer> =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points?.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          // @ts-expect-error TODO - type binary data\n\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            // @ts-expect-error TODO - type binary data\n            data: {...(pointsLayerProps.data as LayerData), attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data as unknown as BinaryFeatureTypes, index);\n      // @ts-ignore (TS2349) accessor is always function\n      return accessor(feature, info);\n    };\n  }\n}\n"],
  "mappings": "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,SACA,WACA,eACA,YACA,OACA,gBACA,gBACA,OACA,QACA,eACA,eACA,mBACA,oBACA,SACA,OACA,SACA,SACA,cACA,eACA,SACA,UACA,OACA,QACA,OACA,OACA,OACA,QACA,aACA,OACA,iBACA,WACA,WACA,WACA,eACA,SACA,YACA,QACA,OACA,QACA,cACA,QACA,QACA,OACA,QACA,aACA,SACA,QACA,cACA,YACA,QACA,cACA,YACA,UACA,gBACA,cACA,qBACA,iBACA,wBACA,eACA,oBACA,oBACA,qBACA,iBACA,qBACA,wBACA,6BACA,qBACA,sBACA,gCACA,gBACA,cACA,eACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,kBACA,6BACA,gBACA,gBACA,YACA,YACA,gBACA,iBACA,iBACA,iBACA,iBACA,kBACA,kBACA,cACA,cACA,mBACA,mBACA,mBACA,kBACA,kBACA,oBACA,wBACA,eACA,wBACA,wBACA,eACA,eACA,eACA,kBACA,qBACA,0BACA,iBACA,eACA,eACA,eACA,wBACA,wBACA,cACA,mBACA,uBACA,qBACA,sBACA,eACA,iBACA,oBACA,aACA,WAAA,CAAA;AAQI,IAAO2H,IAAP,cAAyBnB,EAAAA;EAC7B,cAAAtG;AACEjC,UAAAA;EACD;AAAA;AAQG,IAAO2J,IAAP,cAAwBD,EAAAA;EAU5B,YACE5K,IACA8K,IACAjI,IACAkI,IACA5J,IACAC,IAAAA;AAEAF,UAAAA,GAVFhB,KAAA8C,QAAuB,oBAAIC,OAWzB/C,KAAKF,OAAOA,IACZE,KAAK4K,OAAOA,IACZ5K,KAAK2C,aAAaA,IAClB3C,KAAK6K,OAAOA,IACZ7K,KAAKiB,YAAYA,IACjBjB,KAAKkB,UAAUA;EAChB;EAED,IAAA,cAAIyI;AACF,WAAO;EACR;EAED,OAAOC,IAAAA;AACL,QAAI5J,KAAKD,WACP,YAAW+K,MAAQ9K,KAAKD,WACtB6J,CAAAA,GAASkB,EAAAA;AAGblB,IAAAA,GAAS5J,IAAAA;AACT,eAAW+K,MAAO/K,KAAK4K,KACrBhB,CAAAA,GAASmB,EAAA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",
  "names": ["earcut", "x", "y", "i", "equals", "p", "a", "b", "c", "n", "len", "m", "tan", "q", "e", "r", "a2", "b2", "j", "d", "x", "a", "b", "t", "i", "equals", "lerp", "round", "a", "a", "x", "y", "b", "round", "scale", "len", "z", "lerp", "t", "r", "m", "equals", "i", "l", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "a", "length", "x", "y", "z", "fromValues", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "t", "angle", "c", "d", "random", "r", "transformMat4", "m", "w", "transformMat3", "q", "p", "zero", "str", "exactEquals", "equals", "a2", "b2", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "i", "l", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotate", "scale", "set", "str", "sub", "subtract", "create", "a", "clone", "copy", "fromValues", "set", "multiply", "b", "v", "x", "y", "rotate", "s", "c", "scale", "q", "z", "w", "x2", "y2", "z2", "str", "add", "subtract", "exactEquals", "equals", "a2", "b2", "mul", "sub", "INDICES", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "clone", "a", "copy", "fromValues", "set", "identity", "transpose", "invert", "adjoint", "determinant", "multiply", "b", "b2", "translate", "v", "x", "y", "z", "scale", "rotate", "len", "c", "s", "t", "rotateX", "rotateY", "rotateZ", "fromTranslation", "fromScaling", "fromRotation", "q", "w", "x2", "y2", "z2", "S", "o", "fromQuat", "f", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a2", "mul", "sub", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "a", "fromValues", "x", "y", "z", "w", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "u", "v", "A", "B", "C", "E", "F", "G", "H", "I", "J", "lerp", "t", "random", "d", "transformMat4", "m", "transformQuat", "q", "zero", "str", "exactEquals", "equals", "a2", "b2", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "i", "l", "INDICES", "IDENTITY_MATRIX", "add", "clone", "copy", "create", "dot", "equals", "exactEquals", "fromValues", "identity", "invert", "len", "length", "lerp", "mul", "multiply", "normalize", "rotateX", "rotateY", "rotateZ", "scale", "set", "slerp", "sqrLen", "squaredLength", "str", "create", "identity", "s", "q", "a", "b", "dot", "multiply", "rotateX", "rotateY", "rotateZ", "x", "y", "z", "w", "r", "et", "t", "scale", "slerp", "invert", "a2", "m", "i", "j", "k", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "cross", "c", "d", "RotationOrder", "assert", "DEGREES_TO_RADIANS", "RADIANS_TO_DEGREES", "assert", "DEGREES_TO_RADIANS", "x", "y", "DEGREES_TO_RADIANS", "u", "ut", "v", "p", "i", "uniformBlock", "defaultProps", "x", "u", "v", "uniformBlock", "i", "buffer", "x", "y", "DEFAULT_COLOR", "defaultProps", "x", "y", "DEFAULT_COLOR", "defaultProps", "x", "TypeInfo", "name", "attributes", "this", "size", "isArray", "isStruct", "isTemplate", "isPointer", "getTypeName", "MemberInfo", "type", "offset", "align", "members", "format", "count", "stride", "StructInfo", "super", "startLine", "endLine", "inUse", "ArrayInfo", "PointerInfo", "TemplateInfo", "access", "ResourceType", "VariableInfo", "group", "binding", "resourceType", "AliasInfo", "InputInfo", "locationType", "location", "interpolation", "OutputInfo", "OverrideInfo", "id", "ArgumentInfo", "FunctionInfo", "stage", "inputs", "outputs", "arguments", "returnType", "resources", "overrides", "calls", "Set", "EntryFunctions", "constructor", "vertex", "fragment", "compute", "float32View", "Float32Array", "int32View", "Int32Array", "buffer", "float16View", "Uint16Array", "float32ToFloat16", "float32", "f32", "sign", "exponent", "fraction", "shift", "uint32", "Uint32Array", "uint32ToFloat32", "float11ToFloat32", "f11", "u32", "e", "getTexturePixel", "imageData", "x", "y", "z", "mipLevel", "height", "bytesPerRow", "texelByteSize", "pixelValue", "value", "uintValue", "gi", "bi", "f10", "numChannels", "i", "float16", "s", "f", "Math", "pow", "NaN", "Infinity", "setPixelValue", "Int16Array", "f16", "TextureFormatInfo", "r8unorm", "bytesPerBlock", "blockWidth", "blockHeight", "isCompressed", "channels", "r8snorm", "r8uint", "r8sint", "rg8unorm", "rg8snorm", "rg8uint", "rg8sint", "rgba8unorm", "rgba8snorm", "rgba8uint", "rgba8sint", "bgra8unorm", "r16uint", "r16sint", "r16float", "rg16uint", "rg16sint", "rg16float", "rgba16uint", "rgba16sint", "rgba16float", "r32uint", "r32sint", "r32float", "rg32uint", "rg32sint", "rg32float", "rgba32uint", "rgba32sint", "rgba32float", "rgb10a2uint", "rgb10a2unorm", "rg11b10ufloat", "stencil8", "isDepthStencil", "hasDepth", "hasStencil", "depth16unorm", "depth24plus", "depthOnlyFormat", "depth32float", "stencilOnlyFormat", "rgb9e5ufloat", "Node", "_id", "line", "isAstNode", "astNodeType", "callback", "block", "_BlockStart", "instance", "node", "Array", "searchBlock", "search", "_BlockEnd", "context", "Error", "constEvaluate", "toString", "BuiltinFunctionNames", "Statement", "Function", "args", "body", "attr", "arg", "While", "Statement", "condition", "body", "super", "this", "astNodeType", "callback", "search", "searchBlock", "Continuing", "loopId", "For", "init", "increment", "_a", "_b", "_c", "Var", "name", "type", "storage", "access", "value", "attributes", "Override", "Let", "Const", "context", "constEvaluate", "IncrementOperator", "AssignOperator", "TokenClass", "parse", "val", "key", "Error", "Increment", "operator", "variable", "Assign", "Call", "args", "isBuiltin", "BuiltinFunctionNames", "has", "node", "Loop", "continuing", "Switch", "cases", "If", "elseif", "_else", "else", "Return", "Diagnostic", "Statement", "severity", "rule", "super", "this", "astNodeType", "Alias", "name", "type", "Break", "Statement", "constructor", "super", "this", "condition", "loopId", "astNodeType", "Continue", "Type", "name", "attributes", "isStruct", "isArray", "x", "t", "i", "length", "tv", "_priority", "get", "i32", "getTypeName", "x32", "f32", "u32", "f16", "bool", "void", "Map", "Struct", "Type", "name", "members", "startLine", "endLine", "super", "this", "astNodeType", "isStruct", "i", "length", "callback", "member", "TemplateType", "format", "access", "getTypeName", "vec2f", "f32", "vec3f", "vec4f", "vec2i", "i32", "vec3i", "vec4i", "vec2u", "u32", "vec3u", "vec4u", "vec2h", "f16", "vec3h", "vec4h", "vec2b", "bool", "vec3b", "vec4b", "mat2x2f", "mat2x3f", "mat2x4f", "mat3x2f", "mat3x3f", "mat3x4f", "mat4x2f", "mat4x3f", "mat4x4f", "mat2x2h", "mat2x3h", "mat2x4h", "mat3x2h", "mat3x3h", "mat3x4h", "mat4x2h", "mat4x3h", "mat4x4h", "mat2x2i", "mat2x3i", "mat2x4i", "mat3x2i", "mat3x3i", "mat3x4i", "mat4x2i", "mat4x3i", "mat4x4i", "mat2x2u", "mat2x3u", "mat2x4u", "mat3x2u", "mat3x3u", "mat3x4u", "mat4x2u", "mat4x3u", "mat4x4u", "PointerType", "storage", "type", "ArrayType", "attributes", "count", "isArray", "SamplerType", "Expression", "Node", "constructor", "postfix", "StringExpr", "value", "toString", "constEvaluateString", "CreateExpr", "args", "node", "search", "context", "evalExpression", "CallExpr", "cachedReturnValue", "isBuiltin", "BuiltinFunctionNames", "has", "VariableExpr", "ConstExpr", "initializer", "data", "getSubData", "LiteralExpr", "isScalar", "ScalarData", "isVector", "VectorData", "MatrixData", "scalarValue", "console", "error", "vectorValue", "Float32Array", "BitcastExpr", "ArrayIndex", "Expression", "index", "super", "this", "callback", "search", "Operator", "constructor", "UnaryOperator", "operator", "right", "astNodeType", "context", "type", "evalExpression", "BinaryOperator", "left", "t1", "t2", "name", "Type", "f32", "u32", "i32", "SwitchCase", "Node", "body", "searchBlock", "DefaultSelector", "Case", "selectors", "Default", "Attribute", "Node", "name", "value", "super", "this", "astNodeType", "Data", "typeInfo", "parent", "id", "_id", "clone", "constructor", "exec", "postfix", "context", "console", "error", "toString", "getTypeName", "VoidData", "TypeInfo", "void", "PointerData", "reference", "PointerInfo", "setDataValue", "getSubData", "ScalarData", "Int32Array", "Uint32Array", "Float32Array", "data", "Math", "floor", "v", "_getVectorData", "values", "formatName", "size", "length", "VectorData", "getTypeInfo", "typename", "StringExpr", "format", "TemplateInfo", "typeName", "self", "ArrayIndex", "idx", "index", "i", "LiteralExpr", "d", "evalExpression", "buffer", "byteOffset", "member", "toLowerCase", "m", "push", "s", "MatrixData", "endsWith", "formatSuffix", "vectorData", "TypedData", "offset", "ArrayBuffer", "cloned", "Uint8Array", "log", "ArrayInfo", "stride", "StructInfo", "found", "members", "type", "element", "setData", "byteLength", "set", "x", "_i", "Expression", "fa", "ua", "_a", "_b", "_c", "TextureData", "descriptor", "view", "width", "Array", "e", "Object", "t", "height", "depthOrArrayLayers", "sampleCount", "mipLevelCount", "dimension", "level", "max", "texelByteSize", "formatInfo", "TextureFormatInfo", "isDepthStencil", "bytesPerBlock", "bytesPerRow", "getGpuSize", "blockWidth", "blockHeight", "y", "z", "mipLevel", "getTexturePixel", "imageData", "setPixelValue", "TokenClass", "TokenType", "rule", "TokenTypes", "none", "reserved", "eof", "token", "asm", "bf16", "do", "enum", "f16", "f64", "handle", "i8", "i16", "i64", "mat", "premerge", "regardless", "typedef", "u8", "u16", "u64", "unless", "using", "vec", "keywords", "array", "keyword", "atomic", "bool", "f32", "i32", "mat2x2", "mat2x3", "mat2x4", "mat3x2", "mat3x3", "mat3x4", "mat4x2", "mat4x3", "mat4x4", "ptr", "sampler", "sampler_comparison", "struct", "texture_1d", "texture_2d", "texture_2d_array", "texture_3d", "texture_cube", "texture_cube_array", "texture_multisampled_2d", "texture_storage_1d", "texture_storage_2d", "texture_storage_2d_array", "texture_storage_3d", "texture_depth_2d", "texture_depth_2d_array", "texture_depth_cube", "texture_depth_cube_array", "texture_depth_multisampled_2d", "texture_external", "u32", "vec2", "vec3", "vec4", "bitcast", "block", "break", "case", "continue", "continuing", "default", "diagnostic", "discard", "else", "enable", "fallthrough", "false", "fn", "for", "function", "if", "let", "const", "loop", "while", "private", "read", "read_write", "return", "requires", "storage", "switch", "true", "alias", "uniform", "var", "override", "workgroup", "write", "r8unorm", "r8snorm", "r8uint", "r8sint", "r16uint", "r16sint", "r16float", "rg8unorm", "rg8snorm", "rg8uint", "rg8sint", "r32uint", "r32sint", "r32float", "rg16uint", "rg16sint", "rg16float", "rgba8unorm", "rgba8unorm_srgb", "rgba8snorm", "rgba8uint", "rgba8sint", "bgra8unorm", "bgra8unorm_srgb", "rgb10a2unorm", "rg11b10float", "rg32uint", "rg32sint", "rg32float", "rgba16uint", "rgba16sint", "rgba16float", "rgba32uint", "rgba32sint", "rgba32float", "static_assert", "tokens", "decimal_float_literal", "hex_float_literal", "int_literal", "uint_literal", "ident", "and", "and_and", "arrow", "attr", "forward_slash", "bang", "bracket_left", "bracket_right", "brace_left", "brace_right", "colon", "comma", "equal", "equal_equal", "not_equal", "greater_than", "greater_than_equal", "shift_right", "less_than", "less_than_equal", "shift_left", "modulo", "minus", "minus_minus", "period", "plus", "plus_plus", "or", "or_or", "paren_left", "paren_right", "semicolon", "star", "tilde", "underscore", "xor", "plus_equal", "minus_equal", "times_equal", "division_equal", "modulo_equal", "and_equal", "or_equal", "xor_equal", "shift_right_equal", "shift_left_equal", "simpleTokens", "literalTokens", "_", "regexTokens", "storage_class", "access_mode", "sampler_type", "sampled_texture_type", "multisampled_texture_type", "storage_texture_type", "depth_texture_type", "texture_external_type", "any_texture_type", "texel_format", "const_literal", "literal_or_ident", "element_count_expression", "template_types", "attribute_name", "assignment_operators", "increment_operators", "isArray", "value", "Array", "buffer", "ArrayBuffer", "_f32", "Float32Array", "_f32_i32", "Uint32Array", "_f32_u32", "_i32", "Int32Array", "_i32_f32", "_i32_u32", "_u32", "_u32_f32", "_u32_i32", "castScalar", "v", "from", "to", "console", "error", "_FunctionResources", "node", "this", "resources", "inUse", "info", "_TypeSize", "align", "size", "Reflect", "constructor", "uniforms", "storage", "textures", "samplers", "aliases", "overrides", "structs", "entry", "EntryFunctions", "functions", "_types", "Map", "_functions", "type", "name", "ast", "Function", "set", "Struct", "getTypeInfo", "StructInfo", "push", "Alias", "_getAliasInfo", "Override", "id", "_getAttributeNum", "attributes", "OverrideInfo", "_isUniformVar", "g", "b", "varInfo", "VariableInfo", "ResourceType", "Uniform", "access", "_isStorageVar", "isStorageTexture", "_isStorageTexture", "StorageTexture", "Storage", "_isTextureVar", "Texture", "_isSamplerVar", "Sampler", "vertexStage", "_getAttribute", "fragmentStage", "computeStage", "stage", "fn", "FunctionInfo", "startLine", "endLine", "get", "_findResources", "inputs", "_getInputs", "args", "outputs", "_getOutputs", "returnType", "arguments", "map", "arg", "ArgumentInfo", "values", "_addCalls", "calls", "search", "Attribute", "override", "_a", "_b", "VariableExpr", "_c", "u", "_markStructsInUse", "s", "o", "isStruct", "members", "m", "format", "isTemplate", "alias", "_getAlias", "call", "add", "group", "binding", "compute", "r", "vertex", "fragment", "t", "isEntry", "self", "varStack", "_BlockStart", "_BlockEnd", "pop", "Var", "_markStructsFromAST", "length", "CreateExpr", "c", "Let", "_findResource", "CallExpr", "callFn", "Call", "getBindGroups", "groups", "_makeRoom", "undefined", "_getStructOutputs", "output", "_getOutputInfo", "struct", "location", "typeInfo", "locationValue", "_parseInt", "OutputInfo", "_getStructInputs", "input", "_getInputInfo", "interpolation", "InputInfo", "_parseString", "n", "parseInt", "isNaN", "a", "AliasInfo", "has", "PointerType", "PointerInfo", "_updateTypeInfo", "ArrayType", "ArrayInfo", "count", "MemberInfo", "SamplerType", "formatIsType", "Type", "TypeInfo", "TemplateInfo", "TemplateType", "typeSize", "_getTypeSize", "formatInfo", "stride", "Math", "max", "_updateStructInfo", "offset", "lastSize", "lastOffset", "structAlign", "mi", "ml", "member", "sizeInfo", "_roundUp", "explicitSize", "explicitAlign", "_typeInfo", "divisor", "substring", "arrayType", "E", "_textureTypes", "indexOf", "_samplerTypes", "obj", "attrs", "defaultValue", "k", "ceil", "f16", "i32", "u32", "f32", "atomic", "vec2", "vec3", "vec4", "mat2x2", "mat3x2", "mat4x2", "mat2x3", "mat3x3", "mat4x3", "mat2x4", "mat3x4", "mat4x4", "TokenTypes", "any_texture_type", "sampler_type", "_id", "VarRef", "clone", "FunctionRef", "ExecContext", "parent", "variables", "currentFunctionName", "getVariable", "getFunction", "createVariable", "ExecInterface", "context", "BuiltinFunctions", "exec", "evalExpression", "isTrue", "VectorData", "data", "forEach", "x", "ScalarData", "Error", "line", "res", "some", "condition", "arrayArg", "UnaryOperator", "right", "arrayData", "TypedData", "ta", "byteLength", "abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "y", "i", "atan2", "ys", "xs", "min", "_clamp", "minS", "maxS", "cos", "cosh", "clz32", "_countOneBits", "_countTrailingZeros", "l", "lv", "rv", "radToDeg", "PI", "MatrixData", "mv", "mt", "getTypeName", "formatType", "endsWith", "sum", "sqrt", "ls", "rs", "e1", "e2", "dot", "_dot", "exp", "pow", "_firstLeadingBit", "log2", "_firstTrailingBit", "floor", "av", "bv", "cv", "insert", "mask", "invMask", "log", "as", "Length", "e3", "sqrtK", "round", "sign", "sin", "sinh", "edge0", "edge1", "_smoothstep", "e0", "xS", "edge", "e", "tan", "tanh", "tname", "ttype", "_getTransposeType", "trunc", "textureArg", "level", "textureName", "texture", "getVariableValue", "TextureData", "mipLevelCount", "textureSize", "getMipLevelSize", "dimension", "slice", "uv", "width", "height", "texel", "getPixel", "depthOrArrayLayers", "sampleCount", "index", "setPixel", "getVariableName", "getSubData", "postfix", "currentValue", "setDataValue", "originalValue", "VectorTypeSize", "vec2f", "vec2i", "vec2u", "vec2b", "vec2h", "vec3f", "vec3i", "vec3u", "vec3b", "vec3h", "vec4f", "vec4i", "vec4u", "vec4b", "vec4h", "MatrixTypeSize", "mat2x2f", "mat2x2h", "mat2x3f", "mat2x3h", "mat2x4f", "mat2x4h", "mat3x2f", "mat3x2h", "mat3x3f", "mat3x3h", "mat3x4f", "mat3x4h", "mat4x2f", "mat4x2h", "mat4x3f", "mat4x3h", "mat4x4f", "mat4x4h", "WgslExec", "super", "reflection", "updateAST", "builtins", "bool", "config", "_setOverrides", "_execStatements", "kernel", "dispatchCount", "bindGroups", "f", "depth", "setVariable", "attr", "descriptor", "textureData", "view", "uniform", "z", "_dispatchWorkgroup", "stmt", "Return", "Break", "_breakObj", "Continue", "_continueObj", "_let", "_var", "Const", "_const", "_function", "If", "_if", "Switch", "_switch", "For", "_for", "While", "_while", "Loop", "_loop", "Continuing", "subContext", "body", "Assign", "_assign", "Increment", "_increment", "_call", "Diagnostic", "BinaryOperator", "_evalBinaryOp", "LiteralExpr", "_evalLiteral", "_evalVariable", "_evalCall", "_evalCreate", "ConstExpr", "_evalConst", "BitcastExpr", "_evalBitcast", "_evalUnaryOp", "getTypeInfoByName", "constants", "getOverrideInfo", "workgroup_id", "workgroupSize", "li", "local_invocation_id", "global_invocation_id", "_dispatchExec", "globalName", "globalVar", "statements", "execStatement", "ai", "isBuiltin", "_callBuiltinFunction", "variable", "operator", "refData", "_getVariableData", "PointerData", "reference", "varData", "assignValue", "op", "Uint8Array", "rNode", "ArrayIndex", "idx", "typeName", "StringExpr", "defType", "defaultCase", "cases", "Case", "selector", "selectors", "DefaultSelector", "selectorValue", "Default", "elseif", "else", "init", "_getScalarValue", "increment", "continuing", "fromType", "fromCast", "toType", "toCast", "cast", "VoidData", "void", "_callConstructorValue", "_callConstructorVec", "_callConstructorMatrix", "memberInfo", "setData", "scalarValue", "tv", "_priority", "_r", "result", "rn", "_maxFormatTypeInfo", "_l", "left", "la", "ra", "ln", "matrixA", "t1", "matrixB", "t2", "j", "colsB", "rowsA", "matrix", "vector", "cols", "rows", "resultVec", "cachedReturnValue", "All", "Any", "Select", "ArrayLength", "Abs", "Acos", "Acosh", "Asin", "Asinh", "Atan", "Atanh", "Atan2", "Ceil", "Clamp", "Cos", "Cosh", "CountLeadingZeros", "CountOneBits", "CountTrailingZeros", "Cross", "Degrees", "Determinant", "Distance", "Dot", "Dot4U8Packed", "Dot4I8Packed", "Exp", "Exp2", "ExtractBits", "FaceForward", "FirstLeadingBit", "FirstTrailingBit", "Floor", "Fma", "Fract", "Frexp", "InsertBits", "InverseSqrt", "Ldexp", "Log", "Log2", "Max", "Min", "Mix", "Modf", "Normalize", "Pow", "QuantizeToF16", "Radians", "Refract", "ReverseBits", "Round", "Saturate", "Sign", "Sin", "Sinh", "SmoothStep", "Sqrt", "Step", "Tan", "Tanh", "Transpose", "Trunc", "Dpdx", "DpdxCoarse", "DpdxFine", "Dpdy", "DpdyCoarse", "DpdyFine", "Fwidth", "FwidthCoarse", "FwidthFine", "TextureDimensions", "TextureGather", "TextureGatherCompare", "TextureLoad", "TextureNumLayers", "TextureNumLevels", "TextureNumSamples", "TextureSample", "TextureSampleBias", "TextureSampleCompare", "TextureSampleCompareLevel", "TextureSampleGrad", "TextureSampleLevel", "TextureSampleBaseClampToEdge", "TextureStore", "AtomicLoad", "AtomicStore", "AtomicAdd", "AtomicSub", "AtomicMax", "AtomicMin", "AtomicAnd", "AtomicOr", "AtomicXor", "AtomicExchange", "AtomicCompareExchangeWeak", "Pack4x8snorm", "Pack4x8unorm", "Pack4xI8", "Pack4xU8", "Pack4x8Clamp", "Pack4xU8Clamp", "Pack2x16snorm", "Pack2x16unorm", "Pack2x16float", "Unpack4x8snorm", "Unpack4x8unorm", "Unpack4xI8", "Unpack4xU8", "Unpack2x16snorm", "Unpack2x16unorm", "Unpack2x16float", "StorageBarrier", "TextureBarrier", "WorkgroupBarrier", "WorkgroupUniformLoad", "SubgroupAdd", "SubgroupExclusiveAdd", "SubgroupInclusiveAdd", "SubgroupAll", "SubgroupAnd", "SubgroupAny", "SubgroupBallot", "SubgroupBroadcast", "SubgroupBroadcastFirst", "SubgroupElect", "SubgroupMax", "SubgroupMin", "SubgroupMul", "SubgroupExclusiveMul", "SubgroupInclusiveMul", "SubgroupOr", "SubgroupShuffle", "SubgroupShuffleDown", "SubgroupShuffleUp", "SubgroupShuffleXor", "SubgroupXor", "QuadBroadcast", "QuadSwapDiagonal", "QuadSwapX", "QuadSwapY", "isVector", "vectorValue", "argValue", "vd", "fill", "Data", "LIGHT_TYPE", "i", "lights", "x", "x", "vs", "fs", "uniformBlock", "DEFAULT_COLOR", "defaultProps", "x", "i", "angle", "DEFAULT_COLOR", "defaultProps", "x", "i", "j", "i", "j", "i", "copy", "a", "b", "t", "i", "p", "a", "b", "i", "copy", "p", "x", "y", "normalize", "i", "p", "v", "i", "j", "a", "sin", "cos", "k", "uniformBlock", "DEFAULT_COLOR", "defaultProps", "x", "geometry", "i", "p", "d", "angle", "defaultProps", "geometry", "angle", "length", "i", "j", "buffer", "p", "i", "uniformBlock", "DEFAULT_COLOR", "defaultProps", "d", "i", "import_earcut", "i", "len", "j", "normalize", "o", "x", "y", "z", "n", "p", "earcut", "fp64", "normalize", "isCut", "buffer", "i", "j", "x", "y", "z", "uniformBlock", "DEFAULT_COLOR", "defaultProps", "f", "ATTRIBUTE_TRANSITION", "d", "i", "i", "defaultProps", "f", "p", "normalize", "i", "x", "i", "uniformBlock", "DEFAULT_BUFFER", "defaultProps", "x", "buffer", "len", "y", "x", "a", "j", "d", "i", "f", "v", "z", "length", "q", "k", "s", "q2", "r", "nextPowOfTwo", "buildMapping", "buffer", "x", "i", "y", "j", "char", "length", "i", "buffer", "buildMapping", "uniformBlock", "defaultProps", "x", "DEFAULT_COLOR", "defaultProps", "x", "y", "i", "_", "scale", "getAngle", "geometry", "i", "f", "defaultProps", "f", "ft", "d"]
}
